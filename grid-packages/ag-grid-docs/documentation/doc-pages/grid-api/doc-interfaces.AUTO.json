{
  "_config_": {},
  "ColumnResizeSet": {
    "columns": { "type": { "returnType": "Column[]", "optional": false } },
    "ratios": { "type": { "returnType": "number[]", "optional": false } },
    "width": { "type": { "returnType": "number", "optional": false } }
  },
  "ColumnStateParams": {
    "hide": {
      "description": "/** True if the column is hidden */",
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "width": {
      "description": "/** Width of the column in pixels */",
      "type": { "returnType": "number", "optional": true }
    },
    "flex": {
      "description": "/** Column's flex if flex is set */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "sort": {
      "description": "/** Sort applied to the column */",
      "type": { "returnType": "'asc' | 'desc' | null", "optional": true }
    },
    "sortIndex": {
      "description": "/** The order of the sort, if sorting by many columns */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "aggFunc": {
      "description": "/** The aggregation function applied */",
      "type": { "returnType": "string | IAggFunc | null", "optional": true }
    },
    "pivot": {
      "description": "/** True if pivot active */",
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "pivotIndex": {
      "description": "/** The order of the pivot, if pivoting by many columns */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "pinned": {
      "description": "/** Set if column is pinned */",
      "type": { "returnType": "ColumnPinnedType", "optional": true }
    },
    "rowGroup": {
      "description": "/** True if row group active */",
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "rowGroupIndex": {
      "description": "/** The order of the row group, if grouping by many columns */",
      "type": { "returnType": "number | null", "optional": true }
    }
  },
  "ColumnState": {
    "colId": {
      "description": "/** ID of the column */",
      "type": { "returnType": "string", "optional": false }
    },
    "hide": {
      "description": "/** True if the column is hidden */",
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "width": {
      "description": "/** Width of the column in pixels */",
      "type": { "returnType": "number", "optional": true }
    },
    "flex": {
      "description": "/** Column's flex if flex is set */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "sort": {
      "description": "/** Sort applied to the column */",
      "type": { "returnType": "'asc' | 'desc' | null", "optional": true }
    },
    "sortIndex": {
      "description": "/** The order of the sort, if sorting by many columns */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "aggFunc": {
      "description": "/** The aggregation function applied */",
      "type": { "returnType": "string | IAggFunc | null", "optional": true }
    },
    "pivot": {
      "description": "/** True if pivot active */",
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "pivotIndex": {
      "description": "/** The order of the pivot, if pivoting by many columns */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "pinned": {
      "description": "/** Set if column is pinned */",
      "type": { "returnType": "ColumnPinnedType", "optional": true }
    },
    "rowGroup": {
      "description": "/** True if row group active */",
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "rowGroupIndex": {
      "description": "/** The order of the row group, if grouping by many columns */",
      "type": { "returnType": "number | null", "optional": true }
    }
  },
  "ApplyColumnStateParams": {
    "state": {
      "description": "/** The state from `getColumnState` */",
      "type": { "returnType": "ColumnState[]", "optional": true }
    },
    "applyOrder": {
      "description": "/** Whether column order should be applied */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "defaultState": {
      "description": "/** State to apply to columns where state is missing for those columns */",
      "type": { "returnType": "ColumnStateParams", "optional": true }
    }
  },
  "ISizeColumnsToFitParams": {
    "defaultMinWidth": {
      "description": "/** Defines a default minimum width for every column (does not override the column minimum width) */",
      "type": { "returnType": "number", "optional": true }
    },
    "defaultMaxWidth": {
      "description": "/** Defines a default maximum width for every column (does not override the column maximum width) */",
      "type": { "returnType": "number", "optional": true }
    },
    "columnLimits": {
      "description": "/** Provides a minimum and/or maximum width to specific columns */",
      "type": { "returnType": "IColumnLimit[]", "optional": true }
    }
  },
  "IColumnLimit": {
    "key": {
      "description": "/** Selector for the column to which these dimension limits will apply */",
      "type": { "returnType": "Column | string", "optional": false }
    },
    "minWidth": {
      "description": "/** Defines a minimum width for this column (does not override the column minimum width) */",
      "type": { "returnType": "number", "optional": true }
    },
    "maxWidth": {
      "description": "/** Defines a maximum width for this column (does not override the column maximum width) */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "ColDefPropertyChangedEvent": {
    "source": { "type": { "returnType": "ColumnEventType", "optional": true } },
    "type": {
      "type": { "returnType": "keyof GridOptions", "optional": false }
    },
    "currentValue": { "type": { "returnType": "any", "optional": false } },
    "previousValue": { "type": { "returnType": "any", "optional": false } }
  },
  "ColKey": {},
  "ComponentMetadata": {
    "mandatoryMethodList": {
      "type": { "returnType": "string[]", "optional": false }
    },
    "optionalMethodList": {
      "type": { "returnType": "string[]", "optional": false }
    },
    "functionAdapter": {
      "type": {
        "arguments": { "callback": "any" },
        "returnType": "{ new (): IComponent<any>; }",
        "optional": true
      }
    }
  },
  "ComponentType": {
    "propertyName": { "type": { "returnType": "string", "optional": false } },
    "cellRenderer": { "type": { "returnType": "boolean", "optional": false } }
  },
  "FrameworkComponentWrapper": {
    "wrap": {
      "type": {
        "arguments": {
          "frameworkComponent": "{ new (): any; } | null",
          "methodList": "string[]",
          "optionalMethodList": "string[]",
          "componentType": "ComponentType"
        },
        "returnType": "A",
        "optional": false
      }
    }
  },
  "WrappableInterface": {
    "hasMethod": {
      "type": {
        "arguments": { "name": "string" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "callMethod": {
      "type": {
        "arguments": { "name": "string", "args": "IArguments" },
        "returnType": "void",
        "optional": false
      }
    },
    "addMethod": {
      "type": {
        "arguments": { "name": "string", "callback": "Function" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "DefinitionObject": {},
  "UserCompDetails": {
    "componentClass": { "type": { "returnType": "any", "optional": false } },
    "componentFromFramework": {
      "type": { "returnType": "boolean", "optional": false }
    },
    "params": { "type": { "returnType": "any", "optional": false } },
    "type": { "type": { "returnType": "ComponentType", "optional": false } },
    "popupFromSelector": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "popupPositionFromSelector": {
      "type": { "returnType": "'over' | 'under'", "optional": true }
    },
    "newAgStackInstance": {
      "type": {
        "arguments": {},
        "returnType": "AgPromise<any>",
        "optional": false
      }
    }
  },
  "ContextParams": {
    "providedBeanInstances": {
      "type": { "returnType": "any", "optional": false }
    },
    "beanClasses": { "type": { "returnType": "any[]", "optional": false } },
    "debug": { "type": { "returnType": "boolean", "optional": false } }
  },
  "ComponentMeta": {
    "componentClass": {
      "type": { "arguments": {}, "returnType": "Object", "optional": false }
    },
    "componentName": { "type": { "returnType": "string", "optional": false } }
  },
  "ControllerMeta": {
    "controllerClass": {
      "type": { "arguments": {}, "returnType": "Object", "optional": false }
    },
    "controllerName": { "type": { "returnType": "string", "optional": false } }
  },
  "BeanWrapper": {
    "bean": { "type": { "returnType": "any", "optional": false } },
    "beanInstance": { "type": { "returnType": "any", "optional": false } },
    "beanName": { "type": { "returnType": "any", "optional": false } }
  },
  "ReadyParams": {
    "gridCtrl": { "type": { "returnType": "GridCtrl", "optional": false } },
    "gridBodyCtrl": {
      "type": { "returnType": "GridBodyCtrl", "optional": false }
    },
    "centerRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "leftRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "rightRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "bottomCenterRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "bottomLeftRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "bottomRightRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "topCenterRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "topLeftRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "topRightRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "stickyTopCenterRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "stickyTopLeftRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "stickyTopRightRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "fakeHScrollComp": {
      "type": { "returnType": "FakeHScrollComp", "optional": false }
    },
    "fakeVScrollComp": {
      "type": { "returnType": "FakeVScrollComp", "optional": false }
    },
    "gridHeaderCtrl": {
      "type": { "returnType": "GridHeaderCtrl", "optional": false }
    },
    "centerHeaderRowContainerCtrl": {
      "type": { "returnType": "HeaderRowContainerCtrl", "optional": false }
    },
    "leftHeaderRowContainerCtrl": {
      "type": { "returnType": "HeaderRowContainerCtrl", "optional": false }
    },
    "rightHeaderRowContainerCtrl": {
      "type": { "returnType": "HeaderRowContainerCtrl", "optional": false }
    }
  },
  "DragItem": {
    "rowNode": {
      "description": "/** When dragging a row, this contains the row node being dragged\n     * When dragging multiple rows, this contains the row that started the drag.\n     */",
      "type": { "returnType": "IRowNode", "optional": true }
    },
    "rowNodes": {
      "description": "/** When dragging multiple rows, this contains all rows being dragged */",
      "type": { "returnType": "IRowNode[]", "optional": true }
    },
    "columns": {
      "description": "/** When dragging columns, this contains the columns being dragged */",
      "type": { "returnType": "Column[]", "optional": true }
    },
    "visibleState": {
      "description": "/** When dragging columns, this contains the visible state of the columns */",
      "type": { "returnType": "{ [key: string]: boolean }", "optional": true }
    }
  },
  "DragSourceType": {},
  "DragSource": {
    "type": {
      "description": "/** The type of the drag source, used by the drop target to know where the\n     * drag originated from.\n     */",
      "type": { "returnType": "DragSourceType", "optional": false }
    },
    "eElement": {
      "description": "/** Element which, when dragged, will kick off the DnD process\n     */",
      "type": { "returnType": "Element", "optional": false }
    },
    "getDragItem": {
      "description": "/** If eElement is dragged, then the dragItem is the object that gets passed around.\n     */",
      "type": { "arguments": {}, "returnType": "DragItem", "optional": false }
    },
    "dragItemName": {
      "description": "/** This name appears in the ghost icon when dragging.\n     */",
      "type": {
        "returnType": "string | (() => string) | null",
        "optional": false
      }
    },
    "defaultIconName": {
      "description": "/** Icon to show when not over a drop zone\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "dragSourceDropTarget": {
      "description": "/** The drop target associated with this dragSource. When dragging starts, this\n     * target does not get an onDragEnter event.\n     */",
      "type": { "returnType": "DropTarget", "optional": true }
    },
    "dragSourceDomDataKey": {
      "description": "/** The drag source DOM Data Key, this is useful to detect if the origin grid is the same\n     * as the target grid.\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "dragStartPixels": {
      "description": "/** After how many pixels of dragging should the drag operation start. Default is 4.\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "onDragStarted": {
      "description": "/** Callback for drag started\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "onDragStopped": {
      "description": "/** Callback for drag stopped\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "onGridEnter": {
      "description": "/** Callback for entering the grid\n     */",
      "type": {
        "arguments": { "dragItem": "DragItem | null" },
        "returnType": "void",
        "optional": true
      }
    },
    "onGridExit": {
      "description": "/** Callback for exiting the grid\n     */",
      "type": {
        "arguments": { "dragItem": "DragItem | null" },
        "returnType": "void",
        "optional": true
      }
    }
  },
  "DropTarget": {
    "getContainer": {
      "description": "/** The main container that will get the drop. */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "getSecondaryContainers": {
      "description": "/** If any secondary containers. For example when moving columns in AG Grid, we listen for drops\n     * in the header as well as the body (main rows and pinned rows) of the grid. */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement[][]",
        "optional": true
      }
    },
    "getIconName": {
      "description": "/** Icon to show when drag is over */",
      "type": {
        "arguments": {},
        "returnType": "string | null",
        "optional": true
      }
    },
    "isInterestedIn": {
      "type": {
        "arguments": { "type": "DragSourceType", "el": "Element" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "targetContainsSource": {
      "description": "/** If `true`, the DragSources will only be allowed to be dragged within the DragTarget that contains them.\n     * This is useful for changing order of items within a container, and not moving items across containers.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "onDragEnter": {
      "description": "/** Callback for when drag enters */",
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onDragLeave": {
      "description": "/** Callback for when drag leaves */",
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onDragging": {
      "description": "/** Callback for when dragging */",
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onDragStop": {
      "description": "/** Callback for when drag stops */",
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "external": { "type": { "returnType": "boolean", "optional": true } }
  },
  "VerticalDirection": {},
  "HorizontalDirection": {},
  "DraggingEvent": {
    "event": { "type": { "returnType": "MouseEvent", "optional": false } },
    "x": { "type": { "returnType": "number", "optional": false } },
    "y": { "type": { "returnType": "number", "optional": false } },
    "vDirection": {
      "type": { "returnType": "VerticalDirection | null", "optional": false }
    },
    "hDirection": {
      "type": { "returnType": "HorizontalDirection | null", "optional": false }
    },
    "dragSource": { "type": { "returnType": "DragSource", "optional": false } },
    "dragItem": { "type": { "returnType": "DragItem", "optional": false } },
    "fromNudge": { "type": { "returnType": "boolean", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "dropZoneTarget": {
      "type": { "returnType": "HTMLElement", "optional": false }
    }
  },
  "DragSourceAndListener": {
    "dragSource": {
      "type": { "returnType": "DragListenerParams", "optional": false }
    },
    "mouseDownListener": {
      "type": {
        "arguments": { "mouseEvent": "MouseEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "touchEnabled": { "type": { "returnType": "boolean", "optional": false } },
    "touchStartListener": {
      "type": {
        "returnType": "((touchEvent: TouchEvent) => void) | null",
        "optional": false
      }
    }
  },
  "DragListenerParams": {
    "dragStartPixels": {
      "description": "/** After how many pixels of dragging should the drag operation start. Default is 4px. */",
      "type": { "returnType": "number", "optional": true }
    },
    "eElement": {
      "description": "/** Dom element to add the drag handling to */",
      "type": { "returnType": "Element", "optional": false }
    },
    "skipMouseEvent": {
      "description": "/** Some places may wish to ignore certain events, eg range selection ignores shift clicks */",
      "type": {
        "arguments": { "mouseEvent": "MouseEvent" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "onDragStart": {
      "description": "/** Callback for drag starting */",
      "type": {
        "arguments": { "mouseEvent": "MouseEvent | Touch" },
        "returnType": "void",
        "optional": false
      }
    },
    "onDragStop": {
      "description": "/** Callback for drag stopping */",
      "type": {
        "arguments": { "mouseEvent": "MouseEvent | Touch" },
        "returnType": "void",
        "optional": false
      }
    },
    "onDragging": {
      "description": "/** Callback for mouse move while dragging */",
      "type": {
        "arguments": { "mouseEvent": "MouseEvent | Touch" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "CellPosition": {
    "column": {
      "description": "/** The grid column */",
      "type": { "returnType": "Column", "optional": false }
    },
    "rowIndex": {
      "description": "/** A positive number from 0 to n, where n is the last row the grid is rendering\n    * or -1 if you want to navigate to the grid header */",
      "type": { "returnType": "number", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null/undefined (for not pinned) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    }
  },
  "AbstractColDef": {
    "headerName": {
      "description": "/** The name to render in the column header. If not specified and field is specified, the field name will be used as the header name. */",
      "type": { "returnType": "string", "optional": true }
    },
    "headerValueGetter": {
      "description": "/** Function or expression. Gets the value for display in the header. */",
      "type": {
        "returnType": "string | HeaderValueGetterFunc<TData>",
        "optional": true
      }
    },
    "headerTooltip": {
      "description": "/** Tooltip for the column header */",
      "type": { "returnType": "string", "optional": true }
    },
    "headerClass": {
      "description": "/** CSS class to use for the header cell. Can be a string, array of strings, or function. */",
      "type": { "returnType": "HeaderClass", "optional": true }
    },
    "suppressHeaderKeyboardEvent": {
      "description": "/** Suppress the grid taking action for the relevant keyboard event when a header is focused. */",
      "type": {
        "arguments": { "params": "SuppressHeaderKeyboardEventParams<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "columnGroupShow": {
      "description": "/** Whether to only show the column when the group is open / closed. If not set the column is always displayed as part of the group. */",
      "type": { "returnType": "ColumnGroupShowType", "optional": true }
    },
    "toolPanelClass": {
      "description": "/** CSS class to use for the tool panel cell. Can be a string, array of strings, or function. */",
      "type": { "returnType": "ToolPanelClass<TData>", "optional": true }
    },
    "suppressColumnsToolPanel": {
      "description": "/** Set to `true` if you do not want this column or group to appear in the Columns Tool Panel. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressFiltersToolPanel": {
      "description": "/** Set to `true` if you do not want this column (filter) or group (filter group) to appear in the Filters Tool Panel. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "tooltipComponent": {
      "description": "/** Provide your own tooltip component for the column.\n    * See [Tooltip Component](https://www.ag-grid.com/javascript-data-grid/component-tooltip/) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "tooltipComponentFramework": {
      "description": "/** @deprecated As of v27, use `tooltipComponent` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "tooltipComponentParams": {
      "description": "/** The params used to configure `tooltipComponent`. */",
      "type": { "returnType": "any", "optional": true }
    },
    "pivotKeys": {
      "description": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "meta": { "typeParams": ["TData = any"] }
  },
  "ColGroupDef": {
    "children": {
      "description": "/** A list containing a mix of columns and column groups. */",
      "type": {
        "returnType": "(ColDef<TData> | ColGroupDef<TData>)[]",
        "optional": false
      }
    },
    "groupId": {
      "description": "/** The unique ID to give the column. This is optional. If missing, a unique ID will be generated. This ID is used to identify the column group in the column API. */",
      "type": { "returnType": "string", "optional": true }
    },
    "openByDefault": {
      "description": "/** Set to `true` if this group should be opened by default. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "marryChildren": {
      "description": "/** Set to `true` to keep columns in this group beside each other in the grid. Moving the columns outside of the group (and hence breaking the group) is not allowed. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "stickyLabel": {
      "description": "/** If `true` the label of the Column Group will scroll alongside the grid to always remain visible. Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "headerGroupComponent": {
      "description": "/** The custom header group component to be used for rendering the component header. If none specified the default AG Grid is used.\n    * See [Header Group Component](https://www.ag-grid.com/javascript-data-grid/component-header/#header-group-components/) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "headerGroupComponentFramework": {
      "description": "/** @deprecated As of v27, use `headerGroupComponent` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "headerGroupComponentParams": {
      "description": "/** The params used to configure the `headerGroupComponent`. */",
      "type": { "returnType": "any", "optional": true }
    },
    "meta": { "typeParams": ["TData = any"] },
    "headerName": {
      "description": "/** The name to render in the column header. If not specified and field is specified, the field name will be used as the header name. */",
      "type": { "returnType": "string", "optional": true }
    },
    "headerValueGetter": {
      "description": "/** Function or expression. Gets the value for display in the header. */",
      "type": {
        "returnType": "string | HeaderValueGetterFunc<TData>",
        "optional": true
      }
    },
    "headerTooltip": {
      "description": "/** Tooltip for the column header */",
      "type": { "returnType": "string", "optional": true }
    },
    "headerClass": {
      "description": "/** CSS class to use for the header cell. Can be a string, array of strings, or function. */",
      "type": { "returnType": "HeaderClass", "optional": true }
    },
    "suppressHeaderKeyboardEvent": {
      "description": "/** Suppress the grid taking action for the relevant keyboard event when a header is focused. */",
      "type": {
        "arguments": { "params": "SuppressHeaderKeyboardEventParams<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "columnGroupShow": {
      "description": "/** Whether to only show the column when the group is open / closed. If not set the column is always displayed as part of the group. */",
      "type": { "returnType": "ColumnGroupShowType", "optional": true }
    },
    "toolPanelClass": {
      "description": "/** CSS class to use for the tool panel cell. Can be a string, array of strings, or function. */",
      "type": { "returnType": "ToolPanelClass<TData>", "optional": true }
    },
    "suppressColumnsToolPanel": {
      "description": "/** Set to `true` if you do not want this column or group to appear in the Columns Tool Panel. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressFiltersToolPanel": {
      "description": "/** Set to `true` if you do not want this column (filter) or group (filter group) to appear in the Filters Tool Panel. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "tooltipComponent": {
      "description": "/** Provide your own tooltip component for the column.\n    * See [Tooltip Component](https://www.ag-grid.com/javascript-data-grid/component-tooltip/) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "tooltipComponentFramework": {
      "description": "/** @deprecated As of v27, use `tooltipComponent` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "tooltipComponentParams": {
      "description": "/** The params used to configure `tooltipComponent`. */",
      "type": { "returnType": "any", "optional": true }
    },
    "pivotKeys": {
      "description": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
      "type": { "returnType": "string[]", "optional": true }
    }
  },
  "IAggFunc": { "meta": { "typeParams": ["TData = any", "TValue = any"] } },
  "IAggFuncParams": {
    "values": {
      "description": "/** Values to aggregate */",
      "type": { "returnType": "TValue[]", "optional": false }
    },
    "column": {
      "description": "/** Column the aggregation function is working on */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef of the aggregation column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "pivotResultColumn": {
      "description": "/** Pivot Result Column being produced using this aggregation */",
      "type": { "returnType": "Column", "optional": true }
    },
    "rowNode": {
      "description": "/** The parent RowNode, where the aggregation result will be shown */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "data": {
      "description": "/** data (if any) of the parent RowNode */",
      "type": { "returnType": "TData", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TValue = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "HeaderClassParams": {
    "colDef": {
      "type": { "returnType": "AbstractColDef<TData>", "optional": false }
    },
    "column": { "type": { "returnType": "Column | null", "optional": true } },
    "columnGroup": {
      "type": { "returnType": "ColumnGroup | null", "optional": true }
    },
    "meta": { "typeParams": ["TData = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "HeaderClass": { "meta": { "typeParams": ["TData = any"] } },
  "ToolPanelClassParams": {
    "colDef": {
      "type": { "returnType": "AbstractColDef<TData>", "optional": false }
    },
    "column": { "type": { "returnType": "Column | null", "optional": true } },
    "columnGroup": {
      "type": { "returnType": "ProvidedColumnGroup | null", "optional": true }
    },
    "meta": { "typeParams": ["TData = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ToolPanelClass": { "meta": { "typeParams": ["TData = any"] } },
  "ColDef": {
    "colId": {
      "description": "/** The unique ID to give the column. This is optional. If missing, the ID will default to the field.\n     *  If both field and colId are missing, a unique ID will be generated.\n     *  This ID is used to identify the column in the API for sorting, filtering etc. */",
      "type": { "returnType": "string", "optional": true }
    },
    "field": {
      "description": "/** The field of the row object to get the cell's data from.\n     * Deep references into a row object is supported via dot notation, i.e `'address.firstLine'`.\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "type": {
      "description": "/** A comma separated string or array of strings containing `ColumnType` keys which can be used as a template for a column.\n     * This helps to reduce duplication of properties when you have a lot of common column properties.\n     */",
      "type": { "returnType": "string | string[]", "optional": true }
    },
    "valueGetter": {
      "description": "/** Function or expression. Gets the value from your data for display. */",
      "type": {
        "returnType": "string | ValueGetterFunc<TData>",
        "optional": true
      }
    },
    "valueFormatter": {
      "description": "/** A function or expression to format a value, should return a string. Not used for CSV export or copy to clipboard, only for UI cell rendering. */",
      "type": {
        "returnType": "string | ValueFormatterFunc<TData>",
        "optional": true
      }
    },
    "refData": {
      "description": "/** Provided a reference data map to be used to map column values to their respective value from the map. */",
      "type": { "returnType": "{ [key: string]: string; }", "optional": true }
    },
    "keyCreator": {
      "description": "/** Function to return a string key for a value.\n     * This string is used for grouping, Set filtering, and searching within cell editor dropdowns.\n     * When filtering and searching the string is exposed to the user, so make sure to return a human-readable value. */",
      "type": {
        "arguments": { "params": "KeyCreatorParams<TData>" },
        "returnType": "string",
        "optional": true
      }
    },
    "equals": {
      "description": "/** Custom comparator for values, used by renderer to know if values have changed. Cells who's values have not changed don't get refreshed.\n     * By default the grid uses `===` is used which should work for most use cases.\n     */",
      "type": {
        "arguments": { "valueA": "any", "valueB": "any" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "tooltipField": {
      "description": "/** The field of the tooltip to apply to the cell. */",
      "type": { "returnType": "string", "optional": true }
    },
    "tooltipValueGetter": {
      "description": "/** Callback that should return the string to use for a tooltip, `tooltipField` takes precedence if set.\n     * If using a custom `tooltipComponent` you may return any custom value to be passed to your tooltip component.\n     */",
      "type": {
        "arguments": { "params": "ITooltipParams<TData>" },
        "returnType": "string | any",
        "optional": true
      }
    },
    "checkboxSelection": {
      "description": "/** Set to `true` (or return `true` from function) to render a selection checkbox in the column. Default: `false` */",
      "type": {
        "returnType": "boolean | CheckboxSelectionCallback<TData>",
        "optional": true
      }
    },
    "showDisabledCheckboxes": {
      "description": "/** Set to `true` to display a disabled checkbox when row is not selectable and checkboxes are enabled. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "icons": {
      "description": "/** Icons to use inside the column instead of the grid's default icons. Leave undefined to use defaults. */",
      "type": {
        "returnType": "{ [key: string]: Function | string; }",
        "optional": true
      }
    },
    "suppressNavigable": {
      "description": "/** Set to `true` if this column is not navigable (i.e. cannot be tabbed into), otherwise `false`.\n     * Can also be a callback function to have different rows navigable.\n     * Default: `false`\n     */",
      "type": {
        "returnType": "boolean | SuppressNavigableCallback<TData>",
        "optional": true
      }
    },
    "suppressKeyboardEvent": {
      "description": "/** Allows the user to suppress certain keyboard events in the grid cell. Default: `false` */",
      "type": {
        "arguments": { "params": "SuppressKeyboardEventParams<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "suppressPaste": {
      "description": "/** Pasting is on by default as long as cells are editable (non-editable cells cannot be modified, even with a paste operation).\n     * Set to `true` turn paste operations off.\n     */",
      "type": {
        "returnType": "boolean | SuppressPasteCallback<TData>",
        "optional": true
      }
    },
    "suppressFillHandle": {
      "description": "/** Set to true to prevent the fillHandle from being rendered in any cell that belongs to this column */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "hide": {
      "description": "/** Set to `true` for this column to be hidden. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "initialHide": {
      "description": "/** Same as `hide`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "lockVisible": {
      "description": "/** Set to `true` to block making column visible / hidden via the UI (API will still work). Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "lockPosition": {
      "description": "/** Lock a column to position to `'left'` or`'right'` to always have this column displayed in that position. `true` is treated as `'left'` */",
      "type": { "returnType": "boolean | 'left' | 'right'", "optional": true }
    },
    "suppressMovable": {
      "description": "/** Set to `true` if you do not want this column to be movable via dragging. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "editable": {
      "description": "/** Set to `true` if this column is editable, otherwise `false`. Can also be a function to have different rows editable. Default: `false` */",
      "type": {
        "returnType": "boolean | EditableCallback<TData>",
        "optional": true
      }
    },
    "valueSetter": {
      "description": "/** Function or expression. Sets the value into your data for saving. Return `true` if the data changed. */",
      "type": {
        "returnType": "string | ValueSetterFunc<TData>",
        "optional": true
      }
    },
    "valueParser": {
      "description": "/** Function or expression. Parses the value for saving. */",
      "type": {
        "returnType": "string | ValueParserFunc<TData>",
        "optional": true
      }
    },
    "cellEditor": {
      "description": "/** Provide your own cell editor component for this column's cells.\n    * See [Cell Editor](https://www.ag-grid.com/javascript-data-grid/component-cell-editor/) for framework specific implementation detail.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "cellEditorFramework": {
      "description": "/** @deprecated As of v27, use `cellEditor` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "cellEditorParams": {
      "description": "/** Params to be passed to the `cellEditor` component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "cellEditorSelector": {
      "description": "/** Callback to select which cell editor to be used for a given row within the same column. */",
      "type": {
        "returnType": "CellEditorSelectorFunc<TData>",
        "optional": true
      }
    },
    "singleClickEdit": {
      "description": "/** Set to `true` to have cells under this column enter edit mode after single click. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "cellEditorPopup": {
      "description": "/** Set to `true`, to have the cell editor appear in a popup.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "cellEditorPopupPosition": {
      "description": "/** Set the position for the popup cell editor. Possible values are\n     *  - `over` Popup will be positioned over the cell\n     *  - `under` Popup will be positioned below the cell leaving the cell value visible.\n     *\n     * Default: `over`. */",
      "type": { "returnType": "'over' | 'under'", "optional": true }
    },
    "onCellValueChanged": {
      "description": "/** Callback for after the value of a cell has changed, either due to editing or the application calling `api.setValue()`. */",
      "type": {
        "arguments": { "event": "NewValueParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "onCellClicked": {
      "description": "/** Callback called when a cell is clicked. */",
      "type": {
        "arguments": { "event": "CellClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "onCellDoubleClicked": {
      "description": "/** Callback called when a cell is double clicked. */",
      "type": {
        "arguments": { "event": "CellDoubleClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "onCellContextMenu": {
      "description": "/** Callback called when a cell is right clicked. */",
      "type": {
        "arguments": { "event": "CellContextMenuEvent<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "getQuickFilterText": {
      "description": "/** A function to tell the grid what Quick Filter text to use for this column if you don't want to use the default (which is calling `toString` on the value). */",
      "type": {
        "arguments": { "params": "GetQuickFilterTextParams<TData>" },
        "returnType": "string",
        "optional": true
      }
    },
    "filterValueGetter": {
      "description": "/** Function or expression. Gets the value for filtering purposes. */",
      "type": {
        "returnType": "string | ValueGetterFunc<TData>",
        "optional": true
      }
    },
    "floatingFilter": {
      "description": "/** Whether to display a floating filter for this column. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "wrapHeaderText": {
      "description": "/** If enabled then column header names that are too long for the column width will wrap onto the next line. Default `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "autoHeaderHeight": {
      "description": "/** If enabled then the column header row will automatically adjust height to accommodate the size of the header cell.\n    * This can be useful when using your own `headerComponent` or long header names in conjunction with `wrapHeaderText`.\n    * Default: `false`\n    */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "headerComponent": {
      "description": "/** The custom header component to be used for rendering the component header. If none specified the default AG Grid header component is used.\n    * See [Header Component](https://www.ag-grid.com/javascript-data-grid/component-header/) for framework specific implementation detail.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "headerComponentFramework": {
      "description": "/** @deprecated As of v27, use `headerComponent` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "headerComponentParams": {
      "description": "/** The parameters to be passed to the `headerComponent`. */",
      "type": { "returnType": "any", "optional": true }
    },
    "menuTabs": {
      "description": "/** Set to an array containing zero, one or many of the following options: `'filterMenuTab' | 'generalMenuTab' | 'columnsMenuTab'`.\n     * This is used to figure out which menu tabs are present and in which order the tabs are shown.\n     */",
      "type": { "returnType": "ColumnMenuTab[]", "optional": true }
    },
    "columnsMenuParams": {
      "description": "/** Params used to change the behaviour and appearance of the Columns Menu tab. */",
      "type": { "returnType": "ColumnsMenuParams", "optional": true }
    },
    "suppressMenu": {
      "description": "/** Set to `true` if no menu should be shown for this column header. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "headerCheckboxSelection": {
      "description": "/** If `true` or the callback returns `true`, a 'select all' checkbox will be put into the header. */",
      "type": {
        "returnType": "boolean | HeaderCheckboxSelectionCallback<TData>",
        "optional": true
      }
    },
    "headerCheckboxSelectionFilteredOnly": {
      "description": "/** If `true`, the header checkbox selection will only select filtered items. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "headerCheckboxSelectionCurrentPageOnly": {
      "description": "/** If `true`, the header checkbox selection will only select nodes on the current page. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "chartDataType": {
      "description": "/** Defines the chart data type that should be used for a column. */",
      "type": {
        "returnType": "'category' | 'series' | 'time' | 'excluded'",
        "optional": true
      }
    },
    "pinned": {
      "description": "/** Pin a column to one side: `right` or `left`. A value of `true` is converted to `'left'`. */",
      "type": {
        "returnType": "boolean | 'left' | 'right' | null",
        "optional": true
      }
    },
    "initialPinned": {
      "description": "/** Same as `pinned`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "boolean | 'left' | 'right'", "optional": true }
    },
    "lockPinned": {
      "description": "/** Set to true to block the user pinning the column, the column can only be pinned via definitions or API. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pivot": {
      "description": "/** Set to true to pivot by this column. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "initialPivot": {
      "description": "/** Same as `pivot`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pivotIndex": {
      "description": "/** Set this in columns you want to pivot by.\n     * If only pivoting by one column, set this to any number (e.g. `0`).\n     * If pivoting by multiple columns, set this to where you want this column to be in the order of pivots (e.g. `0` for first, `1` for second, and so on).\n     */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "initialPivotIndex": {
      "description": "/** Same as `pivotIndex`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "number", "optional": true }
    },
    "pivotComparator": {
      "description": "/** Comparator to use when ordering the pivot columns, when this column is used to pivot on.\n     * The values will always be strings, as the pivot service uses strings as keys for the pivot groups.\n     */",
      "type": {
        "arguments": { "valueA": "string", "valueB": "string" },
        "returnType": "number",
        "optional": true
      }
    },
    "enablePivot": {
      "description": "/** Set to `true` if you want to be able to pivot by this column via the GUI. This will not block the API or properties being used to achieve pivot. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "cellStyle": {
      "description": "/** An object of css values / or function returning an object of css values for a particular cell. */",
      "type": {
        "returnType": "CellStyle | CellStyleFunc<TData>",
        "optional": true
      }
    },
    "cellClass": {
      "description": "/** Class to use for the cell. Can be string, array of strings, or function that returns a string or array of strings. */",
      "type": {
        "returnType": "string | string[] | CellClassFunc<TData>",
        "optional": true
      }
    },
    "cellClassRules": {
      "description": "/** Rules which can be applied to include certain CSS classes. */",
      "type": { "returnType": "CellClassRules<TData>", "optional": true }
    },
    "cellRenderer": {
      "description": "/** Provide your own cell Renderer component for this column's cells.\n    * See [Cell Renderer](https://www.ag-grid.com/javascript-data-grid/component-cell-renderer/) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "cellRendererFramework": {
      "description": "/** @deprecated As of v27, use `cellRenderer` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "cellRendererParams": {
      "description": "/** Params to be passed to the `cellRenderer` component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "cellRendererSelector": {
      "description": "/** Callback to select which cell renderer to be used for a given row within the same column. */",
      "type": {
        "returnType": "CellRendererSelectorFunc<TData>",
        "optional": true
      }
    },
    "autoHeight": {
      "description": "/** Set to `true` to have the grid calculate the height of a row based on contents of this column. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "wrapText": {
      "description": "/** Set to `true` to have the text wrap inside the cell - typically used with `autoHeight`. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellChangeFlash": {
      "description": "/** Set to `true` to flash a cell when it's refreshed. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressCellFlash": {
      "description": "/** Set to `true` to prevent this column from flashing on changes. Only applicable if cell flashing is turned on for the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDrag": {
      "description": "/** `boolean` or `Function`. Set to `true` (or return `true` from function) to allow row dragging. Default: `false` */",
      "type": {
        "returnType": "boolean | RowDragCallback<TData>",
        "optional": true
      }
    },
    "rowDragText": {
      "description": "/** A callback that should return a string to be displayed by the `rowDragComp` while dragging a row.\n     * If this callback is not set, the `rowDragText` callback in the `gridOptions` will be used and\n     * if there is no callback in the `gridOptions` the current cell value will be used.\n     */",
      "type": {
        "arguments": { "params": "IRowDragItem", "dragItemCount": "number" },
        "returnType": "string",
        "optional": true
      }
    },
    "dndSource": {
      "description": "/** `boolean` or `Function`. Set to `true` (or return `true` from function) to allow dragging for native drag and drop. Default: `false` */",
      "type": {
        "returnType": "boolean | DndSourceCallback<TData>",
        "optional": true
      }
    },
    "dndSourceOnRowDrag": {
      "description": "/** Function to allow custom drag functionality for native drag and drop. */",
      "type": {
        "arguments": { "params": "DndSourceOnRowDragParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "rowGroup": {
      "description": "/** Set to `true` to row group by this column. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "initialRowGroup": {
      "description": "/** Same as `rowGroup`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowGroupIndex": {
      "description": "/** Set this in columns you want to group by.\n     * If only grouping by one column, set this to any number (e.g. `0`).\n     * If grouping by multiple columns, set this to where you want this column to be in the group (e.g. `0` for first, `1` for second, and so on).\n     */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "initialRowGroupIndex": {
      "description": "/** Same as `rowGroupIndex`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "number", "optional": true }
    },
    "enableRowGroup": {
      "description": "/** Set to `true` if you want to be able to row group by this column via the GUI.\n     * This will not block the API or properties being used to achieve row grouping.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableValue": {
      "description": "/** Set to `true` if you want to be able to aggregate by this column via the GUI.\n     * This will not block the API or properties being used to achieve aggregation.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "aggFunc": {
      "description": "/** Name of function to use for aggregation. In-built options are: `sum`, `min`, `max`, `count`, `avg`, `first`, `last`. Also accepts a custom aggregation name or an aggregation function. */",
      "type": {
        "returnType": "string | IAggFunc<TData> | null",
        "optional": true
      }
    },
    "initialAggFunc": {
      "description": "/** Same as `aggFunc`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "string | IAggFunc<TData>", "optional": true }
    },
    "defaultAggFunc": {
      "description": "/** The name of the aggregation function to use for this column when it is enabled via the GUI.\n     * Note that this does not immediately apply the aggregation function like `aggFunc`\n     * Default: `sum`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "allowedAggFuncs": {
      "description": "/** Aggregation functions allowed on this column e.g. `['sum', 'avg']`.\n     * If missing, all installed functions are allowed.\n     * This will only restrict what the GUI allows a user to select, it does not impact when you set a function via the API. */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "showRowGroup": {
      "description": "/** Set to true to have the grid place the values for the group into the cell, or put the name of a grouped column to just show that group. */",
      "type": { "returnType": "string | boolean", "optional": true }
    },
    "sortable": {
      "description": "/** Set to `true` to allow sorting on this column. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "sort": {
      "description": "/** If sorting by default, set it here. Set to `asc` or `desc`. */",
      "type": { "returnType": "SortDirection", "optional": true }
    },
    "initialSort": {
      "description": "/** Same as `sort`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "SortDirection", "optional": true }
    },
    "sortIndex": {
      "description": "/** If sorting more than one column by default, specifies order in which the sorting should be applied. */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "initialSortIndex": {
      "description": "/** Same as `sortIndex`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "number", "optional": true }
    },
    "sortingOrder": {
      "description": "/**  Array defining the order in which sorting occurs (if sorting is enabled). An array with any of the following in any order `['asc','desc',null]` */",
      "type": { "returnType": "(SortDirection)[]", "optional": true }
    },
    "comparator": {
      "description": "/** Override the default sorting order by providing a custom sort comparator.\n     *\n     * - `valueA`, `valueB` are the values to compare.\n     * - `nodeA`,  `nodeB` are the corresponding RowNodes. Useful if additional details are required by the sort.\n     * - `isDescending` - `true` if sort direction is `desc`. Not to be used for inverting the return value as the grid already applies `asc` or `desc` ordering.\n     *\n     * Return:\n     *  - `0`  valueA is the same as valueB\n     *  - `> 0` Sort valueA after valueB\n     *  - `< 0` Sort valueA before valueB\n     */",
      "type": {
        "arguments": {
          "valueA": "any",
          "valueB": "any",
          "nodeA": "IRowNode<TData>",
          "nodeB": "IRowNode<TData>",
          "isDescending": "boolean"
        },
        "returnType": "number",
        "optional": true
      }
    },
    "unSortIcon": {
      "description": "/** Set to `true` if you want the unsorted icon to be shown when no sort is applied to this column. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "colSpan": {
      "description": "/** By default, each cell will take up the width of one column. You can change this behaviour to allow cells to span multiple columns. */",
      "type": {
        "arguments": { "params": "ColSpanParams<TData>" },
        "returnType": "number",
        "optional": true
      }
    },
    "rowSpan": {
      "description": "/** By default, each cell will take up the height of one row. You can change this behaviour to allow cells to span multiple rows. */",
      "type": {
        "arguments": { "params": "RowSpanParams<TData>" },
        "returnType": "number",
        "optional": true
      }
    },
    "width": {
      "description": "/** Initial width in pixels for the cell. */",
      "type": { "returnType": "number", "optional": true }
    },
    "initialWidth": {
      "description": "/** Same as `width`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "number", "optional": true }
    },
    "minWidth": {
      "description": "/** Minimum width in pixels for the cell. */",
      "type": { "returnType": "number", "optional": true }
    },
    "maxWidth": {
      "description": "/** Maximum width in pixels for the cell. */",
      "type": { "returnType": "number", "optional": true }
    },
    "flex": {
      "description": "/** Used instead of `width` when the goal is to fill the remaining empty space of the grid. */",
      "type": { "returnType": "number", "optional": true }
    },
    "initialFlex": {
      "description": "/** Same as `flex`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "number", "optional": true }
    },
    "resizable": {
      "description": "/** Set to `true` to allow this column should be resized. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressSizeToFit": {
      "description": "/** Set to `true` if you want this column's width to be fixed during 'size to fit' operations. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAutoSize": {
      "description": "/** Set to `true` if you do not want this column to be auto-resizable by double clicking it's edge. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pivotValueColumn": {
      "description": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
      "type": { "returnType": "Column | null", "optional": true }
    },
    "pivotTotalColumnIds": {
      "description": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "spanHeaderHeight": {
      "description": "/** Set to `true` if you want this column header for this column to span the whole height of the header container. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "meta": { "typeParams": ["TData = any"] },
    "headerName": {
      "description": "/** The name to render in the column header. If not specified and field is specified, the field name will be used as the header name. */",
      "type": { "returnType": "string", "optional": true }
    },
    "headerValueGetter": {
      "description": "/** Function or expression. Gets the value for display in the header. */",
      "type": {
        "returnType": "string | HeaderValueGetterFunc<TData>",
        "optional": true
      }
    },
    "headerTooltip": {
      "description": "/** Tooltip for the column header */",
      "type": { "returnType": "string", "optional": true }
    },
    "headerClass": {
      "description": "/** CSS class to use for the header cell. Can be a string, array of strings, or function. */",
      "type": { "returnType": "HeaderClass", "optional": true }
    },
    "suppressHeaderKeyboardEvent": {
      "description": "/** Suppress the grid taking action for the relevant keyboard event when a header is focused. */",
      "type": {
        "arguments": { "params": "SuppressHeaderKeyboardEventParams<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "columnGroupShow": {
      "description": "/** Whether to only show the column when the group is open / closed. If not set the column is always displayed as part of the group. */",
      "type": { "returnType": "ColumnGroupShowType", "optional": true }
    },
    "toolPanelClass": {
      "description": "/** CSS class to use for the tool panel cell. Can be a string, array of strings, or function. */",
      "type": { "returnType": "ToolPanelClass<TData>", "optional": true }
    },
    "suppressColumnsToolPanel": {
      "description": "/** Set to `true` if you do not want this column or group to appear in the Columns Tool Panel. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressFiltersToolPanel": {
      "description": "/** Set to `true` if you do not want this column (filter) or group (filter group) to appear in the Filters Tool Panel. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "tooltipComponent": {
      "description": "/** Provide your own tooltip component for the column.\n    * See [Tooltip Component](https://www.ag-grid.com/javascript-data-grid/component-tooltip/) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "tooltipComponentFramework": {
      "description": "/** @deprecated As of v27, use `tooltipComponent` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "tooltipComponentParams": {
      "description": "/** The params used to configure `tooltipComponent`. */",
      "type": { "returnType": "any", "optional": true }
    },
    "pivotKeys": {
      "description": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "filter": {
      "description": "/** Filter component to use for this column.\n     * - Set to `true` to use the default filter.\n     * - Set to the name of a provided filter: `set`, `number`, `text`, `date`.\n     * - Set to a `IFilterComp`.\n     */",
      "type": { "returnType": "any", "optional": true }
    },
    "filterFramework": {
      "description": "/** @deprecated Provided a custom framework filter to use for this column. As of v27, you can use filter instead for Framework Components.  */",
      "type": { "returnType": "any", "optional": true }
    },
    "filterParams": {
      "description": "/** Params to be passed to the filter component specified in `filter` or `filterFramework`. */",
      "type": { "returnType": "any", "optional": true }
    },
    "floatingFilterComponent": {
      "description": "/** The custom component to be used for rendering the floating filter.\n     * If none is specified the default AG Grid is used.\n     */",
      "type": { "returnType": "any", "optional": true }
    },
    "floatingFilterComponentFramework": {
      "description": "/** @deprecated Floating filter framework component to use for this column. As of v27, you can use floatingFilterComponent instead for Framework Components. */",
      "type": { "returnType": "any", "optional": true }
    },
    "floatingFilterComponentParams": {
      "description": "/** Params to be passed to `floatingFilterComponent` or `floatingFilterComponentFramework`. */",
      "type": { "returnType": "any", "optional": true }
    }
  },
  "ColumnFunctionCallbackParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node. Will be `undefined` for group rows. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "meta": { "typeParams": ["TData = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "CheckboxSelectionCallbackParams": {
    "meta": { "typeParams": ["TData = any"] },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node. Will be `undefined` for group rows. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "CheckboxSelectionCallback": { "meta": { "typeParams": ["TData = any"] } },
  "RowDragCallbackParams": {
    "meta": { "typeParams": ["TData = any"] },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node. Will be `undefined` for group rows. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "RowDragCallback": { "meta": { "typeParams": ["TData = any"] } },
  "DndSourceCallbackParams": {
    "meta": { "typeParams": ["TData = any"] },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node. Will be `undefined` for group rows. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "DndSourceOnRowDragParams": {
    "rowNode": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "dragEvent": {
      "description": "/** The DOM event that represents a drag and drop interaction */",
      "type": { "returnType": "DragEvent", "optional": false }
    },
    "meta": { "typeParams": ["TData = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "DndSourceCallback": { "meta": { "typeParams": ["TData = any"] } },
  "EditableCallbackParams": {
    "meta": { "typeParams": ["TData = any"] },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node. Will be `undefined` for group rows. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "EditableCallback": { "meta": { "typeParams": ["TData = any"] } },
  "SuppressPasteCallbackParams": {
    "meta": { "typeParams": ["TData = any"] },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node. Will be `undefined` for group rows. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "SuppressPasteCallback": { "meta": { "typeParams": ["TData = any"] } },
  "SuppressNavigableCallbackParams": {
    "meta": { "typeParams": ["TData = any"] },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node. Will be `undefined` for group rows. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "SuppressNavigableCallback": { "meta": { "typeParams": ["TData = any"] } },
  "HeaderCheckboxSelectionCallbackParams": {
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef<TData>", "optional": false } },
    "meta": { "typeParams": ["TData = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "HeaderCheckboxSelectionCallback": {
    "meta": { "typeParams": ["TData = any"] }
  },
  "IsColumnFunc": { "meta": { "typeParams": ["TData = any"] } },
  "IsColumnFuncParams": {
    "meta": { "typeParams": ["TData = any"] },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node. Will be `undefined` for group rows. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "GetQuickFilterTextParams": {
    "value": {
      "description": "/** Value for the cell. */",
      "type": { "returnType": "TValue", "optional": false }
    },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "data": {
      "description": "/** Row data associated with the node. */",
      "type": { "returnType": "TData", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TValue = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ColumnMenuTab": {},
  "ColumnsMenuParams": {
    "suppressSyncLayoutWithGrid": {
      "description": "/** To suppress updating the layout of columns as they are rearranged in the grid */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressColumnFilter": {
      "description": "/** To suppress Column Filter section*/",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressColumnSelectAll": {
      "description": "/** To suppress Select / Un-select all widget*/",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressColumnExpandAll": {
      "description": "/** To suppress Expand / Collapse all widget*/",
      "type": { "returnType": "boolean", "optional": true }
    },
    "contractColumnSelection": {
      "description": "/** By default, column groups start expanded.\n     * Pass true to default to contracted groups*/",
      "type": { "returnType": "boolean", "optional": true }
    },
    "columnLayout": {
      "description": "/** Custom Columns Panel layout */",
      "type": { "returnType": "(ColDef | ColGroupDef)[]", "optional": true }
    }
  },
  "BaseColDefParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData> | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "TData", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "meta": { "typeParams": ["TData = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "BaseColDefOptionalDataParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData> | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "meta": { "typeParams": ["TData = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ValueGetterParams": {
    "getValue": {
      "description": "/** A utility method for getting other column values */",
      "type": {
        "arguments": { "field": "string" },
        "returnType": "any",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any"] },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData> | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ValueGetterFunc": { "meta": { "typeParams": ["TData = any"] } },
  "HeaderValueGetterParams": {
    "colDef": {
      "type": { "returnType": "AbstractColDef<TData>", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback if applicable*/",
      "type": { "returnType": "Column | null", "optional": true }
    },
    "columnGroup": {
      "description": "/** ColumnGroup for this callback if applicable */",
      "type": {
        "returnType": "ColumnGroup | ProvidedColumnGroup | null",
        "optional": true
      }
    },
    "providedColumnGroup": {
      "description": "/** Original column group if applicable */",
      "type": { "returnType": "ProvidedColumnGroup | null", "optional": false }
    },
    "location": {
      "description": "/** Where the column is going to appear */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "meta": { "typeParams": ["TData = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "HeaderValueGetterFunc": { "meta": { "typeParams": ["TData = any"] } },
  "NewValueParams": {
    "oldValue": {
      "description": "/** The value before the change */",
      "type": { "returnType": "any", "optional": false }
    },
    "newValue": {
      "description": "/** The value after the change */",
      "type": { "returnType": "any", "optional": false }
    },
    "meta": { "typeParams": ["TData = any"] },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData> | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "TData", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ValueSetterParams": {
    "meta": { "typeParams": ["TData = any"] },
    "oldValue": {
      "description": "/** The value before the change */",
      "type": { "returnType": "any", "optional": false }
    },
    "newValue": {
      "description": "/** The value after the change */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData> | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "TData", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ValueSetterFunc": { "meta": { "typeParams": ["TData = any"] } },
  "ValueParserParams": {
    "meta": { "typeParams": ["TData = any"] },
    "oldValue": {
      "description": "/** The value before the change */",
      "type": { "returnType": "any", "optional": false }
    },
    "newValue": {
      "description": "/** The value after the change */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData> | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "TData", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ValueParserFunc": {
    "meta": { "typeParams": ["TData = any", "TValue = any"] }
  },
  "ValueFormatterParams": {
    "value": {
      "description": "/** Value for the cell. */",
      "type": { "returnType": "TValue", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TValue = any"] },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData> | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ValueFormatterFunc": { "meta": { "typeParams": ["TData = any"] } },
  "KeyCreatorParams": {
    "value": {
      "description": "/** Value for the cell. */",
      "type": { "returnType": "TValue", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TValue = any"] },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData> | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "TData", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ColSpanParams": {
    "meta": { "typeParams": ["TData = any"] },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData> | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "RowSpanParams": {
    "meta": { "typeParams": ["TData = any"] },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData> | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "SuppressKeyboardEventParams": {
    "event": {
      "description": "/** The keyboard event the grid received */",
      "type": { "returnType": "KeyboardEvent", "optional": false }
    },
    "editing": {
      "description": "/** Whether the cell is editing or not */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "meta": { "typeParams": ["TData = any"] },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node. Will be `undefined` for group rows. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "SuppressHeaderKeyboardEventParams": {
    "column": {
      "type": { "returnType": "Column | ColumnGroup", "optional": false }
    },
    "colDef": {
      "type": {
        "returnType": "ColDef<TData> | ColGroupDef<TData> | null",
        "optional": false
      }
    },
    "headerRowIndex": {
      "description": "/** The index of the header row of the current focused header */",
      "type": { "returnType": "number", "optional": false }
    },
    "event": {
      "description": "/** The keyboard event the grid received */",
      "type": { "returnType": "KeyboardEvent", "optional": false }
    },
    "meta": { "typeParams": ["TData = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "CellClassParams": {
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** The colDef associated with the column for this cell */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "value": {
      "description": "/** The value to be rendered */",
      "type": { "returnType": "TValue", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TValue = any"] },
    "data": {
      "description": "/** The data associated with this row from rowData. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The RowNode associated with this row */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The index of the row */",
      "type": { "returnType": "number", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "CellClassFunc": { "meta": { "typeParams": ["TData = any"] } },
  "CellStyleFunc": { "meta": { "typeParams": ["TData = any"] } },
  "CellStyle": {},
  "CellClassRules": { "meta": { "typeParams": ["TData = any"] } },
  "CellRendererSelectorFunc": { "meta": { "typeParams": ["TData = any"] } },
  "CellEditorSelectorFunc": { "meta": { "typeParams": ["TData = any"] } },
  "CellRendererSelectorResult": {
    "component": {
      "description": "/** Equivalent of setting `colDef.cellRenderer` */",
      "type": { "returnType": "any", "optional": true }
    },
    "frameworkComponent": {
      "description": "/** @deprecated As of v27, use `component` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "params": {
      "description": "/** Equivalent of setting `colDef.cellRendererParams` */",
      "type": { "returnType": "any", "optional": true }
    }
  },
  "CellEditorSelectorResult": {
    "component": {
      "description": "/** Equivalent of setting `colDef.cellEditor` */",
      "type": { "returnType": "any", "optional": true }
    },
    "frameworkComponent": {
      "description": "/** @deprecated As of v27, use `component` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "params": {
      "description": "/** Equivalent of setting `colDef.cellEditorParams` */",
      "type": { "returnType": "any", "optional": true }
    },
    "popup": {
      "description": "/** Equivalent of setting `colDef.cellEditorPopup` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "popupPosition": {
      "description": "/** Equivalent of setting `colDef.cellEditorPopupPosition` */",
      "type": { "returnType": "'over' | 'under'", "optional": true }
    }
  },
  "SortDirection": {},
  "ColumnPinnedType": {},
  "ColumnEventName": {},
  "ColumnGroupShowType": {},
  "GridOptions": {
    "statusBar": {
      "description": "/** Specifies the status bar components to use in the status bar. */",
      "type": {
        "returnType": "{ statusPanels: StatusPanelDef[]; }",
        "optional": true
      }
    },
    "sideBar": {
      "description": "/** Specifies the side bar components. */",
      "type": {
        "returnType": "SideBarDef | string | string[] | boolean | null",
        "optional": true
      }
    },
    "suppressContextMenu": {
      "description": "/** Set to `true` to not show the context menu. Use if you don't want to use the default 'right click' context menu. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "preventDefaultOnContextMenu": {
      "description": "/** When using `suppressContextMenu`, you can use the `onCellContextMenu` function to provide your own code to handle cell `contextmenu` events.\n     * This flag is useful to prevent the browser from showing its default context menu.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "allowContextMenuWithControlKey": {
      "description": "/** Allows context menu to show, even when `Ctrl` key is held down. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMenuHide": {
      "description": "/** Set to `true` to always show the column menu button, rather than only showing when the mouse is over the column header. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableBrowserTooltips": {
      "description": "/** Set to `true` to use the browser's default tooltip instead of using the grid's Tooltip Component. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "tooltipShowDelay": {
      "description": "/** The delay in milliseconds that it takes for tooltips to show up once an element is hovered over.\n     * **Note:** This property does not work if `enableBrowserTooltips` is `true`.\n     * Default: `2000`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "tooltipHideDelay": {
      "description": "/** The delay in milliseconds that it takes for tooltips to hide once they have been displayed.\n     * **Note:** This property does not work if `enableBrowserTooltips` is `true`.\n     * Default: `10000`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "tooltipMouseTrack": {
      "description": "/** Set to `true` to have tooltips follow the cursor once they are displayed. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "popupParent": {
      "description": "/** DOM element to use as the popup parent for grid popups (context menu, column menu etc). */",
      "type": { "returnType": "HTMLElement | null", "optional": true }
    },
    "copyHeadersToClipboard": {
      "description": "/** Set to `true` to also include headers when copying to clipboard using `Ctrl + C` clipboard. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "copyGroupHeadersToClipboard": {
      "description": "/** Set to `true` to also include group headers when copying to clipboard using `Ctrl + C` clipboard. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "clipboardDeliminator": {
      "description": "/** @deprecated v27.1 Use `clipboardDelimiter` */",
      "type": { "returnType": "string", "optional": true }
    },
    "clipboardDelimiter": {
      "description": "/** Specify the delimiter to use when copying to clipboard.\n     * Default: `\\t`\n    */",
      "type": { "returnType": "string", "optional": true }
    },
    "suppressCopyRowsToClipboard": {
      "description": "/** Set to `true` to copy the cell range or focused cell to the clipboard and never the selected rows. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressCopySingleCellRanges": {
      "description": "/** Set to `true` to copy rows instead of ranges when a range with only a single cell is selected. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressLastEmptyLineOnPaste": {
      "description": "/** Set to `true` to work around a bug with Excel (Windows) that adds an extra empty line at the end of ranges copied to the clipboard. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressClipboardPaste": {
      "description": "/** Set to `true` to turn off paste operations within the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressClipboardApi": {
      "description": "/** Set to `true` to stop the grid trying to use the Clipboard API, if it is blocked, and immediately fallback to the workaround. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressCutToClipboard": {
      "description": "/** Set to `true` to block **cut** operations within the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "columnDefs": {
      "description": "/** Array of Column / Column Group definitions. */",
      "type": {
        "returnType": "(ColDef<TData> | ColGroupDef<TData>)[] | null",
        "optional": true
      }
    },
    "defaultColDef": {
      "description": "/** A default column definition. Items defined in the actual column definitions get precedence. */",
      "type": { "returnType": "ColDef<TData>", "optional": true }
    },
    "defaultColGroupDef": {
      "description": "/** A default column group definition. All column group definitions will use these properties. Items defined in the actual column group definition get precedence. */",
      "type": { "returnType": "Partial<ColGroupDef<TData>>", "optional": true }
    },
    "columnTypes": {
      "description": "/** An object map of custom column types which contain groups of properties that column definitions can inherit by referencing in their `type` property. */",
      "type": {
        "returnType": "{ [key: string]: ColDef<TData>; }",
        "optional": true
      }
    },
    "maintainColumnOrder": {
      "description": "/** Keeps the order of Columns maintained after new Column Definitions are updated. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressFieldDotNotation": {
      "description": "/** If `true`, then dots in field names (e.g. `'address.firstLine'`) are not treated as deep references. Allows you to use dots in your field name if you prefer. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "headerHeight": {
      "description": "/** The height in pixels for the row containing the column label header. If not specified, it uses the theme value of `header-height`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "groupHeaderHeight": {
      "description": "/** The height in pixels for the rows containing header column groups. If not specified, it uses `headerHeight`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "floatingFiltersHeight": {
      "description": "/** The height in pixels for the row containing the floating filters. If not specified, it uses the theme value of `header-height`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "pivotHeaderHeight": {
      "description": "/** The height in pixels for the row containing the columns when in pivot mode. If not specified, it uses `headerHeight`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "pivotGroupHeaderHeight": {
      "description": "/** The height in pixels for the row containing header column groups when in pivot mode. If not specified, it uses `groupHeaderHeight`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "allowDragFromColumnsToolPanel": {
      "description": "/** Allow reordering and pinning columns by dragging columns from the Columns Tool Panel to the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMovableColumns": {
      "description": "/** Set to `true` to suppress column moving, i.e. to make the columns fixed position. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressColumnMoveAnimation": {
      "description": "/** If `true`, the `ag-column-moving` class is not added to the grid while columns are moving. In the default themes, this results in no animation when moving columns. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressDragLeaveHidesColumns": {
      "description": "/** If `true`, when you drag a column out of the grid (e.g. to the group zone) the column is not hidden. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowGroupHidesColumns": {
      "description": "/** If `true`, when you drag a column into a row group panel the column is not hidden. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "colResizeDefault": {
      "description": "/** Set to `'shift'` to have shift-resize as the default resize operation (same as user holding down `Shift` while resizing). */",
      "type": { "returnType": "'shift'", "optional": true }
    },
    "suppressAutoSize": {
      "description": "/** Suppresses auto-sizing columns for columns. In other words, double clicking a column's header's edge will not auto-size. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "autoSizePadding": {
      "description": "/** Number of pixels to add to a column width after the [auto-sizing](/column-sizing/#auto-size-columns) calculation.\n     * Set this if you want to add extra room to accommodate (for example) sort icons, or some other dynamic nature of the header.\n     * Default: `20`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "skipHeaderOnAutoSize": {
      "description": "/** Set this to `true` to skip the `headerName` when `autoSize` is called by default. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "components": {
      "description": "/** A map of component names to components. */",
      "type": { "returnType": "{ [p: string]: any; }", "optional": true }
    },
    "frameworkComponents": {
      "description": "/** @deprecated As of v27, use `components` for framework components too. */",
      "type": {
        "returnType": "{ [p: string]: { new(): any; }; } | any",
        "optional": true
      }
    },
    "reactUi": {
      "description": "/** @deprecated React UI is enabled by default. Use suppressReactUi=true to turn it off. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressReactUi": {
      "description": "/** @deprecated Set to true to enable the experimental React UI. Works with React framework only.\n     * It is planned the next major release of the grid will drop support of the legacy React engine,\n     * hence this property is deprecated as will be removed in the next major release. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "editType": {
      "description": "/** Set to `'fullRow'` to enable Full Row Editing. Otherwise leave blank to edit one cell at a time. */",
      "type": { "returnType": "'fullRow'", "optional": true }
    },
    "singleClickEdit": {
      "description": "/** Set to `true` to enable Single Click Editing for cells, to start editing with a single click. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressClickEdit": {
      "description": "/** Set to `true` so that neither single nor double click starts editing. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "readOnlyEdit": {
      "description": "/** Set to `true` to stop the grid updating data after `Edit`, `Clipboard` and `Fill Handle` operations. When this is set, it is intended the application will update the data, eg in an external immutable store, and then pass the new dataset to the grid. <br />**Note:** `rowNode.setDataValue()` does not update the value of the cell when this is `True`, it fires `onCellEditRequest` instead. Default: `false`.     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "stopEditingWhenCellsLoseFocus": {
      "description": "/** Set this to `true` to stop cell editing when grid loses focus.\n     * The default is that the grid stays editing until focus goes onto another cell.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enterMovesDown": {
      "description": "/** Set to `true` along with `enterMovesDownAfterEdit` to have Excel-style behaviour for the `Enter` key.\n     * i.e. pressing the `Enter` key will move down to the cell beneath.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enterMovesDownAfterEdit": {
      "description": "/** Set to `true` along with `enterMovesDown` to have Excel-style behaviour for the 'Enter' key.\n     * i.e. pressing the Enter key will move down to the cell beneath.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellEditingOnBackspace": {
      "description": "/** Forces Cell Editing to start when backspace is pressed. This is only relevant for MacOS users. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "undoRedoCellEditing": {
      "description": "/** Set to `true` to enable Undo / Redo while editing. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "undoRedoCellEditingLimit": {
      "description": "/** Set the size of the undo / redo stack. Default: `10` */",
      "type": { "returnType": "number", "optional": true }
    },
    "defaultCsvExportParams": {
      "description": "/** A default configuration object used to export to CSV. */",
      "type": { "returnType": "CsvExportParams", "optional": true }
    },
    "suppressCsvExport": {
      "description": "/** Prevents the user from exporting the grid to CSV. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "defaultExcelExportParams": {
      "description": "/** A default configuration object used to export to Excel. */",
      "type": { "returnType": "ExcelExportParams", "optional": true }
    },
    "suppressExcelExport": {
      "description": "/** Prevents the user from exporting the grid to Excel. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "excelStyles": {
      "description": "/** A list (array) of Excel styles to be used when exporting to Excel with styles. */",
      "type": { "returnType": "ExcelStyle[]", "optional": true }
    },
    "quickFilterText": {
      "description": "/** Rows are filtered using this text as a Quick Filter. */",
      "type": { "returnType": "string", "optional": true }
    },
    "cacheQuickFilter": {
      "description": "/** Set to `true` to turn on the Quick Filter cache, used to improve performance when using the Quick Filter. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "excludeHiddenColumnsFromQuickFilter": {
      "description": "/** Set to `true` to exclude hidden columns from being checked by the Quick Filter.\n     * This can give a significant performance improvement when there are a large number of hidden columns,\n     * and you are only interested in filtering on what's visible. Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "excludeChildrenWhenTreeDataFiltering": {
      "description": "/** Set to `true` to override the default tree data filtering behaviour to instead exclude child nodes from filter results. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCharts": {
      "description": "/** Set to `true` to Enable Charts. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "chartThemes": {
      "description": "/** The list of chart themes to be used. */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "customChartThemes": {
      "description": "/** A map containing custom chart themes. */",
      "type": {
        "returnType": "{ [name: string]: AgChartTheme }",
        "optional": true
      }
    },
    "chartThemeOverrides": {
      "description": "/** Chart theme overrides applied to all themes. */",
      "type": { "returnType": "AgChartThemeOverrides", "optional": true }
    },
    "enableChartToolPanelsButton": {
      "description": "/** @deprecated As of v29, no longer used. To suppress use `suppressChartToolPanelsButton`. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressChartToolPanelsButton": {
      "description": "/** Set to `true` to show the 'hamburger' menu option from the Chart Toolbar and display the remaining toolbar buttons. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "chartToolPanelsDef": {
      "description": "/** Allows customisation of the Chart Tool Panels, such as changing the tool panels visibility and order, as well as choosing which charts should be displayed in the settings panel. */",
      "type": { "returnType": "ChartToolPanelsDef", "optional": true }
    },
    "loadingCellRenderer": {
      "description": "/** Provide your own loading cell renderer to use when data is loading via a DataSource.\n    * See [Loading Cell Renderer](https://www.ag-grid.com/javascript-data-grid/component-loading-cell-renderer/) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingCellRendererFramework": {
      "description": "/** @deprecated As of v27, use `loadingCellRenderer` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingCellRendererParams": {
      "description": "/** Params to be passed to the `loadingCellRenderer` component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingCellRendererSelector": {
      "description": "/** Callback to select which loading cell renderer to be used when data is loading via a DataSource. */",
      "type": {
        "returnType": "LoadingCellRendererSelectorFunc<TData>",
        "optional": true
      }
    },
    "localeText": {
      "description": "/** A map of key->value pairs for localising text within the grid. */",
      "type": { "returnType": "{ [key: string]: string }", "optional": true }
    },
    "masterDetail": {
      "description": "/** Set to `true` to enable Master Detail. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "keepDetailRows": {
      "description": "/** Set to `true` to keep detail rows for when they are displayed again. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "keepDetailRowsCount": {
      "description": "/** Sets the number of details rows to keep. Default: `10` */",
      "type": { "returnType": "number", "optional": true }
    },
    "detailCellRenderer": {
      "description": "/** Provide a custom `detailCellRenderer` to use when a master row is expanded.\n    * See [Detail Cell Renderer](https://www.ag-grid.com/javascript-data-grid/master-detail-custom-detail/) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "detailCellRendererFramework": {
      "description": "/** @deprecated As of v27, use `detailCellRenderer` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "detailCellRendererParams": {
      "description": "/** Specifies the params to be used by the Detail Cell Renderer. Can also be a function that provides the params to enable dynamic definitions of the params. */",
      "type": { "returnType": "any", "optional": true }
    },
    "detailRowHeight": {
      "description": "/** Set fixed height in pixels for each detail row. */",
      "type": { "returnType": "number", "optional": true }
    },
    "detailRowAutoHeight": {
      "description": "/** Set to `true` to have the detail grid dynamically change it's height to fit it's rows. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "context": {
      "description": "/** Provides a context object that is provided to different callbacks the grid uses. Used for passing additional information to the callbacks by your application. */",
      "type": { "returnType": "any", "optional": true }
    },
    "alignedGrids": {
      "description": "/** A list of grids to treat as Aligned Grids. If grids are aligned then the columns and horizontal scrolling will be kept in sync. */",
      "type": {
        "returnType": "{ api?: GridApi | null, columnApi?: ColumnApi | null }[]",
        "optional": true
      }
    },
    "tabIndex": {
      "description": "/** Change this value to set the tabIndex order of the Grid within your application. Default: `0` */",
      "type": { "returnType": "number", "optional": true }
    },
    "rowBuffer": {
      "description": "/** The number of rows rendered outside the viewable area the grid renders.\n     * Having a buffer means the grid will have rows ready to show as the user slowly scrolls vertically.\n     * Default: `10`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "valueCache": {
      "description": "/** Set to `true` to turn on the value cache. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "valueCacheNeverExpires": {
      "description": "/** Set to `true` to configure the value cache to not expire after data updates. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellExpressions": {
      "description": "/** Set to `true` to allow cell expressions. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressParentsInRowNodes": {
      "description": "/** If `true`, row nodes do not have their parents set.\n     * The grid doesn't use the parent reference, but it is included to help the client code navigate the node tree if it wants by providing bi-direction navigation up and down the tree.\n     * If this is a problem (e.g. if you need to convert the tree to JSON, which does not allow cyclic dependencies) then set this to `true`.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressTouch": {
      "description": "/** Disables touch support (but does not remove the browser's efforts to simulate mouse events on touch). Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressFocusAfterRefresh": {
      "description": "/** Set to `true` to not set focus back on the grid after a refresh. This can avoid issues where you want to keep the focus on another part of the browser. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAsyncEvents": {
      "description": "/** Disables the asynchronous nature of the events introduced in v10, and makes them synchronous. This property only exists for the purpose of supporting legacy code which has a dependency on synchronous events from earlier versions (v9 or earlier) of AG Grid. **It is strongly recommended that you do not change this property unless you have legacy issues.** Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressBrowserResizeObserver": {
      "description": "/** The grid will check for `ResizeObserver` and use it if it exists in the browser, otherwise it will use the grid's alternative implementation. Some users reported issues with Chrome's `ResizeObserver`. Use this property to always use the grid's alternative implementation should such problems exist. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressPropertyNamesCheck": {
      "description": "/** Disables showing a warning message in the console if using a `gridOptions` or `colDef` property that doesn't exist. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressChangeDetection": {
      "description": "/** Disables change detection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debug": {
      "description": "/** Set this to `true` to enable debug information from the grid and related components. Will result in additional logging being output, but very useful when investigating problems. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "overlayLoadingTemplate": {
      "description": "/** Provide a template for 'loading' overlay. */",
      "type": { "returnType": "string", "optional": true }
    },
    "loadingOverlayComponent": {
      "description": "/** Provide a custom loading overlay component.\n    * See [Loading Overlay Component](https://www.ag-grid.com/javascript-data-grid/component-overlay/#simple-loading-overlay-component) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingOverlayComponentFramework": {
      "description": "/** @deprecated As of v27, use `loadingOverlayComponent` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingOverlayComponentParams": {
      "description": "/** Customise the parameters provided to the loading overlay component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "suppressLoadingOverlay": {
      "description": "/** Disables the 'loading' overlay. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "overlayNoRowsTemplate": {
      "description": "/** Provide a template for 'no rows' overlay. */",
      "type": { "returnType": "string", "optional": true }
    },
    "noRowsOverlayComponent": {
      "description": "/** Provide a custom no rows overlay component.\n    * See [No Rows Overlay Component](https://www.ag-grid.com/javascript-data-grid/component-overlay/#simple-no-rows-overlay-component) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "noRowsOverlayComponentFramework": {
      "description": "/** @deprecated As of v27, use `noRowsOverlayComponent` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "noRowsOverlayComponentParams": {
      "description": "/** Customise the parameters provided to the no rows overlay component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "suppressNoRowsOverlay": {
      "description": "/** Disables the 'no rows' overlay. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pagination": {
      "description": "/** Set whether pagination is enabled. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "paginationPageSize": {
      "description": "/** How many rows to load per page. If `paginationAutoPageSize` is specified, this property is ignored. Default: `100` */",
      "type": { "returnType": "number", "optional": true }
    },
    "paginationAutoPageSize": {
      "description": "/** Set to `true` so that the number of rows to load per page is automatically adjusted by the grid so each page shows enough rows to just fill the area designated for the grid. If `false`, `paginationPageSize` is used. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "paginateChildRows": {
      "description": "/** Set to `true` to have pages split children of groups when using Row Grouping or detail rows with Master Detail. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressPaginationPanel": {
      "description": "/** If `true`, the default grid controls for navigation are hidden.\n     * This is useful if `pagination=true` and you want to provide your own pagination controls.\n     * Otherwise, when `pagination=true` the grid automatically shows the necessary controls at the bottom so that the user can navigate through the different pages.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pivotMode": {
      "description": "/** Set to `true` to enable pivot mode. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pivotPanelShow": {
      "description": "/** When to show the 'pivot panel' (where you drag rows to pivot) at the top. Note that the pivot panel will never show if `pivotMode` is off. Default: `never` */",
      "type": {
        "returnType": "'always' | 'onlyWhenPivoting' | 'never'",
        "optional": true
      }
    },
    "pivotColumnGroupTotals": {
      "description": "/** When set and the grid is in pivot mode, automatically calculated totals will appear within the Pivot Column Groups, in the position specified. */",
      "type": { "returnType": "'before' | 'after'", "optional": true }
    },
    "pivotRowTotals": {
      "description": "/** When set and the grid is in pivot mode, automatically calculated totals will appear for each value column in the position specified. */",
      "type": { "returnType": "'before' | 'after'", "optional": true }
    },
    "pivotSuppressAutoColumn": {
      "description": "/** If `true`, the grid will not swap in the grouping column when pivoting. Useful if pivoting using Server Side Row Model or Viewport Row Model and you want full control of all columns including the group column. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressExpandablePivotGroups": {
      "description": "/** When enabled, pivot column groups will appear 'fixed', without the ability to expand and collapse the column groups. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "functionsReadOnly": {
      "description": "/** If `true`, then row group, pivot and value aggregation will be read-only from the GUI. The grid will display what values are used for each, but will not allow the user to change the selection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "aggFuncs": {
      "description": "/** A map of 'function name' to 'function' for custom aggregation functions. */",
      "type": {
        "returnType": "{ [key: string]: IAggFunc<TData>; }",
        "optional": true
      }
    },
    "suppressAggFuncInHeader": {
      "description": "/** When `true`, column headers won't include the `aggFunc` name, e.g. `'sum(Bank Balance)`' will just be `'Bank Balance'`. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAggAtRootLevel": {
      "description": "/** When `true`, the aggregations won't be computed for the root node of the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "aggregateOnlyChangedColumns": {
      "description": "/** When using change detection, only the updated column will be re-aggregated. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAggFilteredOnly": {
      "description": "/** Set to `true` so that aggregations are not impacted by filtering. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "removePivotHeaderRowWhenSingleValueColumn": {
      "description": "/** Set to `true` to omit the value Column header when there is only a single value column. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "animateRows": {
      "description": "/** Set to `true` to enable Row Animation. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellChangeFlash": {
      "description": "/** Set to `true` to have cells flash after data changes. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "cellFlashDelay": {
      "description": "/** To be used in combination with `enableCellChangeFlash`, this configuration will set the delay in milliseconds of how long a cell should remain in its \"flashed\" state.\n     * Default: `500`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "cellFadeDelay": {
      "description": "/** To be used in combination with `enableCellChangeFlash`, this configuration will set the delay in milliseconds of how long the \"flashed\" state animation takes to fade away after the timer set by `cellFlashDelay` has completed.\n     * Default: `1000`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "allowShowChangeAfterFilter": {
      "description": "/** Set to `true` to have cells flash after data changes even when the change is due to filtering. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "domLayout": {
      "description": "/** Switch between layout options: `normal`, `autoHeight`, `print`.\n     * Default: `normal`\n     */",
      "type": { "returnType": "DomLayoutType", "optional": true }
    },
    "ensureDomOrder": {
      "description": "/** When `true`, the order of rows and columns in the DOM are consistent with what is on screen. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableRtl": {
      "description": "/** Set to `true` to operate the grid in RTL (Right to Left) mode. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressColumnVirtualisation": {
      "description": "/** Set to `true` so that the grid doesn't virtualise the columns. For example, if you have 100 columns, but only 10 visible due to scrolling, all 100 will always be rendered. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMaxRenderedRowRestriction": {
      "description": "/** By default the grid has a limit of rendering a maximum of 500 rows at once (remember the grid only renders rows you can see, so unless your display shows more than 500 rows without vertically scrolling this will never be an issue).\n     * <br />**This is only relevant if you are manually setting `rowBuffer` to a high value (rendering more rows than can be seen), or `suppressRowVirtualisation` is true, or if your grid height is able to display more than 500 rows at once.**\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowVirtualisation": {
      "description": "/** Set to `true` so that the grid doesn't virtualise the rows. For example, if you have 100 rows, but only 10 visible due to scrolling, all 100 will always be rendered. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDragManaged": {
      "description": "/** Set to `true` to enable Managed Row Dragging. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowDrag": {
      "description": "/** Set to `true` to suppress row dragging. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMoveWhenRowDragging": {
      "description": "/** Set to `true` to suppress moving rows while dragging the `rowDrag` waffle. This option highlights the position where the row will be placed and it will only move the row on mouse up. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDragEntireRow": {
      "description": "/** Set to `true` to enable clicking and dragging anywhere on the row without the need for a drag handle. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDragMultiRow": {
      "description": "/** Set to `true` to enable dragging multiple rows at the same time. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDragText": {
      "description": "/** A callback that should return a string to be displayed by the `rowDragComp` while dragging a row.\n     * If this callback is not set, the current cell value will be used.\n     * If the `rowDragText` callback is set in the ColDef it will take precedence over this, except when\n     * `rowDragEntireRow=true`.\n     */",
      "type": {
        "arguments": { "params": "IRowDragItem", "dragItemCount": "number" },
        "returnType": "string",
        "optional": true
      }
    },
    "fullWidthCellRenderer": {
      "description": "/** Provide your own cell renderer component to use for full width rows.\n    * See [Full Width Rows](https://www.ag-grid.com/javascript-data-grid/full-width-rows/) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "fullWidthCellRendererFramework": {
      "description": "/** @deprecated As of v27, use `fullWidthCellRenderer` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "fullWidthCellRendererParams": {
      "description": "/** Customise the parameters provided to the `fullWidthCellRenderer` component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "embedFullWidthRows": {
      "description": "/** Set to `true` to have the Full Width Rows embedded in grid's main container so they can be scrolled horizontally . */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupDisplayType": {
      "description": "/** Specifies how the results of row grouping should be displayed.\n     *\n     *  The options are:\n     *\n     * - `'singleColumn'`: single group column automatically added by the grid.\n     * - `'multipleColumns'`: a group column per row group is added automatically.\n     * - `'groupRows'`: group rows are automatically added instead of group columns.\n     * - `'custom'`: informs the grid that group columns will be provided.\n     */",
      "type": { "returnType": "RowGroupingDisplayType", "optional": true }
    },
    "groupDefaultExpanded": {
      "description": "/** If grouping, set to the number of levels to expand by default, e.g. `0` for none, `1` for first level only, etc. Set to `-1` to expand everything. Default: `0` */",
      "type": { "returnType": "number", "optional": true }
    },
    "autoGroupColumnDef": {
      "description": "/** Allows specifying the group 'auto column' if you are not happy with the default. If grouping, this column definition is included as the first column in the grid. If not grouping, this column is not included. */",
      "type": { "returnType": "ColDef<TData>", "optional": true }
    },
    "groupMaintainOrder": {
      "description": "/** When `true`, preserves the current group order when sorting on non-group columns. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupSelectsChildren": {
      "description": "/** When `true`, if you select a group, the children of the group will also be selected. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupAggFiltering": {
      "description": "/** Set to determine whether filters should be applied on aggregated group values. Default: `false` */",
      "type": {
        "returnType": "boolean | IsRowFilterable<TData>",
        "optional": true
      }
    },
    "groupIncludeFooter": {
      "description": "/** If grouping, this controls whether to show a group footer when the group is expanded.\n     * If `true`, then by default, the footer will contain aggregate data (if any) when shown and the header will be blank.\n     * When closed, the header will contain the aggregate data regardless of this setting (as the footer is hidden anyway).\n     * This is handy for 'total' rows, that are displayed below the data when the group is open, and alongside the group when it is closed.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupIncludeTotalFooter": {
      "description": "/** Set to `true` to show a 'grand total' group footer across all groups. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupSuppressBlankHeader": {
      "description": "/** If `true`, and showing footer, aggregate data will always be displayed at both the header and footer levels. This stops the possibly undesirable behaviour of the header details 'jumping' to the footer on expand. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupSelectsFiltered": {
      "description": "/** If using `groupSelectsChildren`, then only the children that pass the current filter will get selected. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "showOpenedGroup": {
      "description": "/** Shows the open group in the group column for non-group rows. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupRemoveSingleChildren": {
      "description": "/** Set to `true` to collapse groups that only have one child. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupRemoveLowestSingleChildren": {
      "description": "/** Set to `true` to collapse lowest level groups that only have one child. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupHideOpenParents": {
      "description": "/** Set to `true` to hide parents that are open. When used with multiple columns for showing groups, it can give a more pleasing user experience. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupAllowUnbalanced": {
      "description": "/** Set to `true` to prevent the grid from creating a '(Blanks)' group for nodes which do not belong to a group, and display the unbalanced nodes alongside group nodes. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowGroupPanelShow": {
      "description": "/** When to show the 'row group panel' (where you drag rows to group) at the top. Default: `never` */",
      "type": {
        "returnType": "'always' | 'onlyWhenGrouping' | 'never'",
        "optional": true
      }
    },
    "groupRowRenderer": {
      "description": "/** Provide the Cell Renderer to use when `groupDisplayType = 'groupRows'`.\n    * See [Group Row Cell Renderer](https://www.ag-grid.com/javascript-data-grid/grouping-group-rows/#providing-cell-renderer) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "groupRowRendererFramework": {
      "description": "/** @deprecated As of v27, use `groupRowRenderer` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "groupRowRendererParams": {
      "description": "/** Customise the parameters provided to the `groupRowRenderer` component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "suppressMakeColumnVisibleAfterUnGroup": {
      "description": "/** By default, when a column is un-grouped, i.e. using the Row Group Panel, it is made visible in the grid. This property stops the column becoming visible again when un-grouping. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "treeData": {
      "description": "/** Set to `true` to enable the Grid to work with Tree Data. You must also implement the `getDataPath(data)` callback. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowGroupPanelSuppressSort": {
      "description": "/** Set to `true` to suppress sort indicators and actions from the row group panel. Default: `false`. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupRowsSticky": {
      "description": "/** Set to `true` to keep open Group Rows visible at the top of the grid. Default: `false`.*/",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rememberGroupStateWhenNewData": {
      "description": "/** @deprecated v24 - no longer needed, transaction updates keep group state */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pinnedTopRowData": {
      "description": "/** Data to be displayed as pinned top rows in the grid. */",
      "type": { "returnType": "any[]", "optional": true }
    },
    "pinnedBottomRowData": {
      "description": "/** Data to be displayed as pinned bottom rows in the grid. */",
      "type": { "returnType": "any[]", "optional": true }
    },
    "rowModelType": {
      "description": "/** Sets the row model type. Default: `clientSide` */",
      "type": { "returnType": "RowModelType", "optional": true }
    },
    "rowData": {
      "description": "/** Set the data to be displayed as rows in the grid. */",
      "type": { "returnType": "TData[] | null", "optional": true }
    },
    "immutableData": {
      "description": "/** @deprecated 27.1 Immutable Data is on by default when grid callback getRowId() is implemented\n     * Enables Immutable Data mode, for compatibility with immutable stores. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "asyncTransactionWaitMillis": {
      "description": "/** How many milliseconds to wait before executing a batch of async transactions. */",
      "type": { "returnType": "number", "optional": true }
    },
    "suppressModelUpdateAfterUpdateTransaction": {
      "description": "/** Prevents Transactions changing sort, filter, group or pivot state when transaction only contains updates. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "datasource": {
      "description": "/** Provide the datasource for infinite scrolling. */",
      "type": { "returnType": "IDatasource", "optional": true }
    },
    "cacheOverflowSize": {
      "description": "/** How many extra blank rows to display to the user at the end of the dataset, which sets the vertical scroll and then allows the grid to request viewing more rows of data.\n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "infiniteInitialRowCount": {
      "description": "/** How many extra blank rows to display to the user at the end of the dataset, which sets the vertical scroll and then allows the grid to request viewing more rows of data.\n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "serverSideInitialRowCount": {
      "description": "/** Set how many loading rows to display to the user for the root level group.\n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "serverSideStoreType": {
      "description": "/** @deprecated v28 Whether to use Full Store or Partial Store for storing rows. Default: `partial`.\n     * Deprecated in favour of suppressServerSideInfiniteScroll. When false, Partial Store is used. When true,\n     * Full Store is used.\n     */",
      "type": { "returnType": "ServerSideStoreType", "optional": true }
    },
    "suppressServerSideInfiniteScroll": {
      "description": "/** When `true`, the Server-side Row Model will suppress Infinite Scrolling and load all the data at the current level.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "cacheBlockSize": {
      "description": "/** How many rows for each block in the store, i.e. how many rows returned from the server at a time.\n     * Default: `100`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "maxBlocksInCache": {
      "description": "/** How many blocks to keep in the store. Default is no limit, so every requested block is kept. Use this if you have memory concerns, and blocks that were least recently viewed will be purged when the limit is hit. The grid will additionally make sure it has all the blocks needed to display what is currently visible, in case this property is set to a low value. */",
      "type": { "returnType": "number", "optional": true }
    },
    "maxConcurrentDatasourceRequests": {
      "description": "/** How many requests to hit the server with concurrently. If the max is reached, requests are queued.\n     * Set to `-1` for no maximum restriction on requests.\n     * Default: `2`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "blockLoadDebounceMillis": {
      "description": "/** How many milliseconds to wait before loading a block. Useful when scrolling over many blocks, as it prevents blocks loading until scrolling has settled. */",
      "type": { "returnType": "number", "optional": true }
    },
    "purgeClosedRowNodes": {
      "description": "/** When enabled, closing group rows will remove children of that row. Next time the row is opened, child rows will be read from the datasource again. This property only applies when there is Row Grouping. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideDatasource": {
      "description": "/** Provide the `serverSideDatasource` for server side row model. */",
      "type": { "returnType": "IServerSideDatasource", "optional": true }
    },
    "serverSideSortAllLevels": {
      "description": "/** When enabled, always refreshes top level groups regardless of which column was sorted. This property only applies when there is Row Grouping & sorting is handled on the server. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideFilterAllLevels": {
      "description": "/** When enabled, always refreshes top level groups regardless of which column was filtered. This property only applies when there is Row Grouping & filtering is handled on the server. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideSortOnServer": {
      "description": "/**\n     * When enabled, Sorting will be done on the server. Only applicable when `suppressServerSideInfiniteScroll=true`.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideFilterOnServer": {
      "description": "/** When enabled, Filtering will be done on the server. Only applicable when `suppressServerSideInfiniteScroll=true`.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideSortingAlwaysResets": {
      "description": "/** @deprecated v28 This property has been deprecated. Use `serverSideSortAllLevels` instead. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideFilteringAlwaysResets": {
      "description": "/** @deprecated v28 This property has been deprecated. Use `serverSideFilterAllLevels` instead. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "viewportDatasource": {
      "description": "/** To use the viewport row model you need to provide the grid with a `viewportDatasource`. */",
      "type": { "returnType": "IViewportDatasource", "optional": true }
    },
    "viewportRowModelPageSize": {
      "description": "/** When using viewport row model, sets the page size for the viewport. */",
      "type": { "returnType": "number", "optional": true }
    },
    "viewportRowModelBufferSize": {
      "description": "/** When using viewport row model, sets the buffer size for the viewport. */",
      "type": { "returnType": "number", "optional": true }
    },
    "alwaysShowHorizontalScroll": {
      "description": "/** Set to `true` to always show the horizontal scrollbar. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "alwaysShowVerticalScroll": {
      "description": "/** Set to `true` to always show the vertical scrollbar. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debounceVerticalScrollbar": {
      "description": "/** Set to `true` to debounce the vertical scrollbar. Can provide smoother scrolling on slow machines. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressHorizontalScroll": {
      "description": "/** Set to `true` to never show the horizontal scroll. This is useful if the grid is aligned with another grid and will scroll when the other grid scrolls. (Should not be used in combination with `alwaysShowHorizontalScroll`.) Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressScrollOnNewData": {
      "description": "/** When `true`, the grid will not scroll to the top when new row data is provided. Use this if you don't want the default behaviour of scrolling to the top every time you load new data. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressScrollWhenPopupsAreOpen": {
      "description": "/** When `true`, the grid will not allow mousewheel / touchpad scroll when popup elements are present. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAnimationFrame": {
      "description": "/** When `true`, the grid will not use animation frames when drawing rows while scrolling. Use this if the grid is working fast enough that you don't need animation frames and you don't want the grid to flicker. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMiddleClickScrolls": {
      "description": "/** If `true`, middle clicks will result in `click` events for cells and rows. Otherwise the browser will use middle click to scroll the grid.<br />**Note:** Not all browsers fire `click` events with the middle button. Most will fire only `mousedown` and `mouseup` events, which can be used to focus a cell, but will not work to call the `onCellClicked` function. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressPreventDefaultOnMouseWheel": {
      "description": "/** If `true`, mouse wheel events will be passed to the browser. Useful if your grid has no vertical scrolls and you want the mouse to scroll the browser page. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "scrollbarWidth": {
      "description": "/** Tell the grid how wide in pixels the scrollbar is, which is used in grid width calculations. Set only if using non-standard browser-provided scrollbars, so the grid can use the non-standard size in its calculations. */",
      "type": { "returnType": "number", "optional": true }
    },
    "rowSelection": {
      "description": "/** Type of Row Selection: `single`, `multiple`. */",
      "type": { "returnType": "'single' | 'multiple'", "optional": true }
    },
    "rowMultiSelectWithClick": {
      "description": "/** Set to `true` to allow multiple rows to be selected using single click. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowDeselection": {
      "description": "/** If `true`, rows will not be deselected if you hold down `Ctrl` and click the row or press `Space`. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowClickSelection": {
      "description": "/** If `true`, row selection won't happen when rows are clicked. Use when you only want checkbox selection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressCellSelection": {
      "description": "/** @deprecated v27 This property has been deprecated. Use `suppressCellFocus` instead.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressCellFocus": {
      "description": "/** If `true`, cells won't be focusable. This means keyboard navigation will be disabled for grid cells, but remain enabled in other elements of the grid such as column headers, floating filters, tool panels. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMultiRangeSelection": {
      "description": "/** If `true`, only a single range can be selected. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellTextSelection": {
      "description": "/** Set to `true` to be able to select the text within cells.\n     *\n     * **Note:** When this is set to `true`, the clipboard service is disabled.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableRangeSelection": {
      "description": "/** Set to `true` to enable Range Selection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableRangeHandle": {
      "description": "/** Set to `true` to enable the Range Handle. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableFillHandle": {
      "description": "/** Set to `true` to enable the Fill Handle. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "fillHandleDirection": {
      "description": "/** Set to `'x'` to force the fill handle direction to horizontal, or set to `'y'` to force the fill handle direction to vertical. Default: `xy` */",
      "type": { "returnType": "'x' | 'y' | 'xy'", "optional": true }
    },
    "suppressClearOnFillReduction": {
      "description": "/** Set this to `true` to prevent cell values from being cleared when the Range Selection is reduced by the Fill Handle. Default: `false`*/",
      "type": { "returnType": "boolean", "optional": true }
    },
    "sortingOrder": {
      "description": "/** Array defining the order in which sorting occurs (if sorting is enabled). Values can be `'asc'`, `'desc'` or `null`. For example: `sortingOrder: ['asc', 'desc']`. Default: `[null, 'asc', 'desc']`  */",
      "type": { "returnType": "(SortDirection)[]", "optional": true }
    },
    "accentedSort": {
      "description": "/** Set to `true` to specify that the sort should take accented characters into account. If this feature is turned on the sort will be slower. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "unSortIcon": {
      "description": "/** Set to `true` to show the 'no sort' icon. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMultiSort": {
      "description": "/** Set to `true` to suppress multi-sort when the user shift-clicks a column header. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "alwaysMultiSort": {
      "description": "/** Set to `true` to always multi-sort when the user clicks a column header, regardless of key presses. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "multiSortKey": {
      "description": "/** Set to `'ctrl'` to have multi sorting work using the `Ctrl` (or `Command ⌘` for Mac) key. */",
      "type": { "returnType": "'ctrl'", "optional": true }
    },
    "suppressMaintainUnsortedOrder": {
      "description": "/** Set to `true` to suppress sorting of un-sorted data to match original row data. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "icons": {
      "description": "/** Icons to use inside the grid instead of the grid's default icons. */",
      "type": {
        "returnType": "{ [key: string]: Function | string; }",
        "optional": true
      }
    },
    "rowHeight": {
      "description": "/** Default row height in pixels. Default: `25` */",
      "type": { "returnType": "number", "optional": true }
    },
    "rowStyle": {
      "description": "/** The style properties to apply to all rows. Set to an object of key (style names) and values (style values) */",
      "type": { "returnType": "RowStyle", "optional": true }
    },
    "rowClass": {
      "description": "/** CSS class(es) for all rows. Provide either a string (class name) or array of strings (array of class names). */",
      "type": { "returnType": "string | string[]", "optional": true }
    },
    "rowClassRules": {
      "description": "/** Rules which can be applied to include certain CSS classes. */",
      "type": { "returnType": "RowClassRules<TData>", "optional": true }
    },
    "suppressRowHoverHighlight": {
      "description": "/** Set to `true` to not highlight rows by adding the `ag-row-hover` CSS class. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowTransform": {
      "description": "/** Uses CSS `top` instead of CSS `transform` for positioning rows. Useful if the transform function is causing issues such as used in row spanning. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "columnHoverHighlight": {
      "description": "/** Set to `true` to highlight columns by adding the `ag-column-hover` CSS class. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "deltaSort": { "type": { "returnType": "boolean", "optional": true } },
    "treeDataDisplayType": {
      "type": { "returnType": "TreeDataDisplayType", "optional": true }
    },
    "functionsPassive": {
      "description": "/** @deprecated v29.2 */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableGroupEdit": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "getContextMenuItems": {
      "description": "/** For customising the context menu. */",
      "type": { "returnType": "GetContextMenuItems<TData>", "optional": true }
    },
    "getMainMenuItems": {
      "description": "/** For customising the main 'column header' menu. */",
      "type": { "returnType": "GetMainMenuItems", "optional": true }
    },
    "postProcessPopup": {
      "description": "/** Allows user to process popups after they are created. Applications can use this if they want to, for example, reposition the popup. */",
      "type": {
        "arguments": { "params": "PostProcessPopupParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processCellForClipboard": {
      "description": "/** Allows you to process cells for the clipboard. Handy if for example you have `Date` objects that need to have a particular format if importing into Excel. */",
      "type": {
        "arguments": { "params": "ProcessCellForExportParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "processHeaderForClipboard": {
      "description": "/** Allows you to process header values for the clipboard.  */",
      "type": {
        "arguments": { "params": "ProcessHeaderForExportParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "processGroupHeaderForClipboard": {
      "description": "/** Allows you to process group header values for the clipboard.  */",
      "type": {
        "arguments": { "params": "ProcessGroupHeaderForExportParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "processCellFromClipboard": {
      "description": "/** Allows you to process cells from the clipboard. Handy if for example you have number fields, and want to block non-numbers from getting into the grid. */",
      "type": {
        "arguments": { "params": "ProcessCellForExportParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "sendToClipboard": {
      "description": "/** Allows you to get the data that would otherwise go to the clipboard. To be used when you want to control the 'copy to clipboard' operation yourself. */",
      "type": {
        "arguments": { "params": "SendToClipboardParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processDataFromClipboard": {
      "description": "/** Allows complete control of the paste operation, including cancelling the operation (so nothing happens) or replacing the data with other data. */",
      "type": {
        "arguments": { "params": "ProcessDataFromClipboardParams<TData>" },
        "returnType": "string[][] | null",
        "optional": true
      }
    },
    "isExternalFilterPresent": {
      "description": "/** Grid calls this method to know if an external filter is present. */",
      "type": {
        "arguments": { "params": "IsExternalFilterPresentParams<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "doesExternalFilterPass": {
      "description": "/** Should return `true` if external filter passes, otherwise `false`. */",
      "type": {
        "arguments": { "node": "IRowNode<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "getChartToolbarItems": {
      "description": "/** Callback to be used to customise the chart toolbar items. */",
      "type": { "returnType": "GetChartToolbarItems", "optional": true }
    },
    "createChartContainer": {
      "description": "/** Callback to enable displaying the chart in an alternative chart container. */",
      "type": {
        "arguments": { "params": "ChartRefParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "navigateToNextHeader": {
      "description": "/** Allows overriding the default behaviour for when user hits navigation (arrow) key when a header is focused. Return the next Header position to navigate to or `null` to stay on current header. */",
      "type": {
        "arguments": { "params": "NavigateToNextHeaderParams<TData>" },
        "returnType": "(HeaderPosition | null)",
        "optional": true
      }
    },
    "tabToNextHeader": {
      "description": "/** Allows overriding the default behaviour for when user hits `Tab` key when a header is focused. Return the next Header position to navigate to or `null` to stay on current header.  */",
      "type": {
        "arguments": { "params": "TabToNextHeaderParams<TData>" },
        "returnType": "(HeaderPosition | null)",
        "optional": true
      }
    },
    "navigateToNextCell": {
      "description": "/** Allows overriding the default behaviour for when user hits navigation (arrow) key when a cell is focused. Return the next Cell position to navigate to or `null` to stay on current cell.  */",
      "type": {
        "arguments": { "params": "NavigateToNextCellParams<TData>" },
        "returnType": "(CellPosition | null)",
        "optional": true
      }
    },
    "tabToNextCell": {
      "description": "/** Allows overriding the default behaviour for when user hits `Tab` key when a cell is focused. Return the next Cell position to navigate to or null to stay on current cell.  */",
      "type": {
        "arguments": { "params": "TabToNextCellParams<TData>" },
        "returnType": "(CellPosition | null)",
        "optional": true
      }
    },
    "localeTextFunc": {
      "description": "/** @deprecated v27.2 - Use `getLocaleText` instead. */",
      "type": {
        "arguments": {
          "key": "string",
          "defaultValue": "string",
          "variableValues?": "string[]"
        },
        "returnType": "string",
        "optional": true
      }
    },
    "getLocaleText": {
      "description": "/** A callback for localising text within the grid. */",
      "type": {
        "arguments": { "params": "GetLocaleTextParams<TData>" },
        "returnType": "string",
        "optional": true
      }
    },
    "getDocument": {
      "description": "/** Allows overriding what `document` is used. Currently used by Drag and Drop (may extend to other places in the future). Use this when you want the grid to use a different `document` than the one available on the global scope. This can happen if docking out components (something which Electron supports) */",
      "type": { "arguments": {}, "returnType": "Document", "optional": true }
    },
    "paginationNumberFormatter": {
      "description": "/** Allows user to format the numbers in the pagination panel, i.e. 'row count' and 'page number' labels. This is for pagination panel only, to format numbers inside the grid's cells (i.e. your data), then use `valueFormatter` in the column definitions. */",
      "type": {
        "arguments": { "params": "PaginationNumberFormatterParams<TData>" },
        "returnType": "string",
        "optional": true
      }
    },
    "groupRowAggNodes": {
      "description": "/** @deprecated v27.2 - Use `getGroupRowAgg` instead. */",
      "type": {
        "arguments": { "nodes": "IRowNode[]" },
        "returnType": "any",
        "optional": true
      }
    },
    "getGroupRowAgg": {
      "description": "/** Callback to use when you need access to more then the current column for aggregation. */",
      "type": {
        "arguments": { "params": "GetGroupRowAggParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "isGroupOpenByDefault": {
      "description": "/** (Client-side Row Model only) Allows groups to be open by default. */",
      "type": {
        "arguments": { "params": "IsGroupOpenByDefaultParams<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "initialGroupOrderComparator": {
      "description": "/** Allows default sorting of groups. */",
      "type": {
        "arguments": { "params": "InitialGroupOrderComparatorParams<TData>" },
        "returnType": "number",
        "optional": true
      }
    },
    "defaultGroupOrderComparator": {
      "description": "/** @deprecated v27.2 - Use `initialGroupOrderComparator` instead */",
      "type": {
        "arguments": { "nodeA": "IRowNode<TData>", "nodeB": "IRowNode<TData>" },
        "returnType": "number",
        "optional": true
      }
    },
    "processSecondaryColDef": {
      "description": "/** @deprecated v28 - Use `processPivotResultColDef` instead */",
      "type": {
        "arguments": { "colDef": "ColDef<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processSecondaryColGroupDef": {
      "description": "/** @deprecated v28 - Use `processPivotResultColGroupDef` instead */",
      "type": {
        "arguments": { "colGroupDef": "ColGroupDef<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processPivotResultColDef": {
      "description": "/** Callback to be used with pivoting, to allow changing the second column definition. */",
      "type": {
        "arguments": { "colDef": "ColDef<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processPivotResultColGroupDef": {
      "description": "/** Callback to be used with pivoting, to allow changing the second column group definition. */",
      "type": {
        "arguments": { "colGroupDef": "ColGroupDef<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "getDataPath": {
      "description": "/** Callback to be used when working with Tree Data when `treeData = true`. */",
      "type": { "returnType": "GetDataPath<TData>", "optional": true }
    },
    "getChildCount": {
      "description": "/** Allows setting the child count for a group row. */",
      "type": {
        "arguments": { "dataItem": "any" },
        "returnType": "number",
        "optional": true
      }
    },
    "getServerSideGroupLevelParams": {
      "description": "/** Allows providing different params for different levels of grouping. */",
      "type": {
        "arguments": { "params": "GetServerSideGroupLevelParamsParams" },
        "returnType": "ServerSideGroupLevelParams",
        "optional": true
      }
    },
    "getServerSideStoreParams": {
      "description": "/** @deprecated v28 Use `getServerSideGroupLevelParams` instead. */",
      "type": {
        "arguments": { "params": "GetServerSideGroupLevelParamsParams" },
        "returnType": "ServerSideGroupLevelParams",
        "optional": true
      }
    },
    "isServerSideGroupOpenByDefault": {
      "description": "/** Allows groups to be open by default. */",
      "type": {
        "arguments": { "params": "IsServerSideGroupOpenByDefaultParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "isApplyServerSideTransaction": {
      "description": "/** Allows cancelling transactions. */",
      "type": { "returnType": "IsApplyServerSideTransaction", "optional": true }
    },
    "isServerSideGroup": {
      "description": "/** SSRM Tree Data: Allows specifying which rows are expandable. */",
      "type": { "returnType": "IsServerSideGroup", "optional": true }
    },
    "getServerSideGroupKey": {
      "description": "/** SSRM Tree Data: Allows specifying group keys. */",
      "type": { "returnType": "GetServerSideGroupKey", "optional": true }
    },
    "getBusinessKeyForNode": {
      "description": "/** Return a business key for the node. If implemented, each row in the DOM will have an attribute `row-id='abc'` where `abc` is what you return as the business key.\n     * This is useful for automated testing, as it provides a way for your tool to identify rows based on unique business keys.\n     */",
      "type": {
        "arguments": { "node": "IRowNode<TData>" },
        "returnType": "string",
        "optional": true
      }
    },
    "getRowNodeId": {
      "description": "/** @deprecated v27.1 Use `getRowId` instead - however be aware, `getRowId()` will also set grid option `immutableData=true`\n     * Allows you to set the ID for a particular row node based on the data. */",
      "type": { "returnType": "GetRowNodeIdFunc<TData>", "optional": true }
    },
    "getRowId": {
      "description": "/** Allows setting the ID for a particular row node based on the data. */",
      "type": { "returnType": "GetRowIdFunc<TData>", "optional": true }
    },
    "resetRowDataOnUpdate": {
      "description": "/** When enabled, getRowId() callback is implemented and new Row Data is set, the grid will disregard all previous rows and treat the new Row Data as new data. As a consequence, all Row State (eg selection, rendered rows) will be reset.  Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "processRowPostCreate": {
      "description": "/** Allows you to process rows after they are created, so you can do final adding of custom attributes etc. */",
      "type": {
        "arguments": { "params": "ProcessRowParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "isRowSelectable": {
      "description": "/** Callback to be used to determine which rows are selectable. By default rows are selectable, so return `false` to make a row un-selectable. */",
      "type": { "returnType": "IsRowSelectable<TData>", "optional": true }
    },
    "isRowMaster": {
      "description": "/** Callback to be used with Master Detail to determine if a row should be a master row. If `false` is returned no detail row will exist for this row. */",
      "type": { "returnType": "IsRowMaster<TData>", "optional": true }
    },
    "fillOperation": {
      "description": "/** Callback to fill values instead of simply copying values or increasing number values using linear progression. */",
      "type": {
        "arguments": { "params": "FillOperationParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "postSort": {
      "description": "/** @deprecated v27.2 Use `postSortRows` instead */",
      "type": {
        "arguments": { "nodes": "IRowNode<TData>[]" },
        "returnType": "void",
        "optional": true
      }
    },
    "postSortRows": {
      "description": "/** Callback to perform additional sorting after the grid has sorted the rows. */",
      "type": {
        "arguments": { "params": "PostSortRowsParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "getRowStyle": {
      "description": "/** Callback version of property `rowStyle` to set style for each row individually. Function should return an object of CSS values or undefined for no styles. */",
      "type": {
        "arguments": { "params": "RowClassParams<TData>" },
        "returnType": "RowStyle | undefined",
        "optional": true
      }
    },
    "getRowClass": {
      "description": "/** Callback version of property `rowClass` to set class(es) for each row individually. Function should return either a string (class name), array of strings (array of class names) or undefined for no class. */",
      "type": {
        "arguments": { "params": "RowClassParams<TData>" },
        "returnType": "string | string[] | undefined",
        "optional": true
      }
    },
    "getRowHeight": {
      "description": "/** Callback version of property `rowHeight` to set height for each row individually. Function should return a positive number of pixels, or return `null`/`undefined` to use the default row height. */",
      "type": {
        "arguments": { "params": "RowHeightParams<TData>" },
        "returnType": "number | undefined | null",
        "optional": true
      }
    },
    "isFullWidthCell": {
      "description": "/** @deprecated v27.2 Use `isFullWidthRow` instead. */",
      "type": {
        "arguments": { "rowNode": "IRowNode<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "isFullWidthRow": {
      "description": "/** Tells the grid if this row should be rendered as full width. */",
      "type": {
        "arguments": { "params": "IsFullWidthRowParams<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "onToolPanelVisibleChanged": {
      "description": "/** The tool panel was hidden or shown. Use `api.isToolPanelShowing()` to get status. */",
      "type": {
        "arguments": { "event": "ToolPanelVisibleChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onToolPanelVisibleChanged" }
    },
    "toolPanelVisibleChanged": {
      "description": "/** The tool panel was hidden or shown. Use `api.isToolPanelShowing()` to get status. */",
      "type": {
        "arguments": { "event": "ToolPanelVisibleChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onToolPanelVisibleChanged" }
    },
    "onToolPanelSizeChanged": {
      "description": "/** The tool panel size has been changed. */",
      "type": {
        "arguments": { "event": "ToolPanelSizeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onToolPanelSizeChanged" }
    },
    "toolPanelSizeChanged": {
      "description": "/** The tool panel size has been changed. */",
      "type": {
        "arguments": { "event": "ToolPanelSizeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onToolPanelSizeChanged" }
    },
    "onPasteStart": {
      "description": "/** Paste operation has started. */",
      "type": {
        "arguments": { "event": "PasteStartEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteStart" }
    },
    "pasteStart": {
      "description": "/** Paste operation has started. */",
      "type": {
        "arguments": { "event": "PasteStartEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteStart" }
    },
    "onPasteEnd": {
      "description": "/** Paste operation has ended. */",
      "type": {
        "arguments": { "event": "PasteEndEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteEnd" }
    },
    "pasteEnd": {
      "description": "/** Paste operation has ended. */",
      "type": {
        "arguments": { "event": "PasteEndEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteEnd" }
    },
    "onColumnVisible": {
      "description": "/** A column, or group of columns, was hidden / shown. */",
      "type": {
        "arguments": { "event": "ColumnVisibleEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnVisible" }
    },
    "columnVisible": {
      "description": "/** A column, or group of columns, was hidden / shown. */",
      "type": {
        "arguments": { "event": "ColumnVisibleEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnVisible" }
    },
    "onColumnPinned": {
      "description": "/** A column, or group of columns, was pinned / unpinned. */",
      "type": {
        "arguments": { "event": "ColumnPinnedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPinned" }
    },
    "columnPinned": {
      "description": "/** A column, or group of columns, was pinned / unpinned. */",
      "type": {
        "arguments": { "event": "ColumnPinnedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPinned" }
    },
    "onColumnResized": {
      "description": "/** A column was resized. */",
      "type": {
        "arguments": { "event": "ColumnResizedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnResized" }
    },
    "columnResized": {
      "description": "/** A column was resized. */",
      "type": {
        "arguments": { "event": "ColumnResizedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnResized" }
    },
    "onColumnMoved": {
      "description": "/** A column was moved. */",
      "type": {
        "arguments": { "event": "ColumnMovedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnMoved" }
    },
    "columnMoved": {
      "description": "/** A column was moved. */",
      "type": {
        "arguments": { "event": "ColumnMovedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnMoved" }
    },
    "onColumnValueChanged": {
      "description": "/** A value column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChanged" }
    },
    "columnValueChanged": {
      "description": "/** A value column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChanged" }
    },
    "onColumnPivotModeChanged": {
      "description": "/** The pivot mode flag was changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotModeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotModeChanged" }
    },
    "columnPivotModeChanged": {
      "description": "/** The pivot mode flag was changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotModeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotModeChanged" }
    },
    "onColumnPivotChanged": {
      "description": "/** A pivot column was added, removed or order changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChanged" }
    },
    "columnPivotChanged": {
      "description": "/** A pivot column was added, removed or order changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChanged" }
    },
    "onColumnGroupOpened": {
      "description": "/** A column group was opened / closed. */",
      "type": {
        "arguments": { "event": "ColumnGroupOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnGroupOpened" }
    },
    "columnGroupOpened": {
      "description": "/** A column group was opened / closed. */",
      "type": {
        "arguments": { "event": "ColumnGroupOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnGroupOpened" }
    },
    "onNewColumnsLoaded": {
      "description": "/** User set new columns. */",
      "type": {
        "arguments": { "event": "NewColumnsLoadedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onNewColumnsLoaded" }
    },
    "newColumnsLoaded": {
      "description": "/** User set new columns. */",
      "type": {
        "arguments": { "event": "NewColumnsLoadedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onNewColumnsLoaded" }
    },
    "onGridColumnsChanged": {
      "description": "/** The list of grid columns changed. */",
      "type": {
        "arguments": { "event": "GridColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridColumnsChanged" }
    },
    "gridColumnsChanged": {
      "description": "/** The list of grid columns changed. */",
      "type": {
        "arguments": { "event": "GridColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridColumnsChanged" }
    },
    "onDisplayedColumnsChanged": {
      "description": "/** The list of displayed columns changed. This can result from columns open / close, column move, pivot, group, etc. */",
      "type": {
        "arguments": { "event": "DisplayedColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDisplayedColumnsChanged" }
    },
    "displayedColumnsChanged": {
      "description": "/** The list of displayed columns changed. This can result from columns open / close, column move, pivot, group, etc. */",
      "type": {
        "arguments": { "event": "DisplayedColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDisplayedColumnsChanged" }
    },
    "onVirtualColumnsChanged": {
      "description": "/** The list of rendered columns changed (only columns in the visible scrolled viewport are rendered by default). */",
      "type": {
        "arguments": { "event": "VirtualColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualColumnsChanged" }
    },
    "virtualColumnsChanged": {
      "description": "/** The list of rendered columns changed (only columns in the visible scrolled viewport are rendered by default). */",
      "type": {
        "arguments": { "event": "VirtualColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualColumnsChanged" }
    },
    "onColumnEverythingChanged": {
      "description": "/** Shotgun - gets called when either a) new columns are set or b) `columnApi.applyColumnState()` is used, so everything has changed. */",
      "type": {
        "arguments": { "event": "ColumnEverythingChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnEverythingChanged" }
    },
    "columnEverythingChanged": {
      "description": "/** Shotgun - gets called when either a) new columns are set or b) `columnApi.applyColumnState()` is used, so everything has changed. */",
      "type": {
        "arguments": { "event": "ColumnEverythingChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnEverythingChanged" }
    },
    "onComponentStateChanged": {
      "description": "/** Only used by Angular, React and VueJS AG Grid components (not used if doing plain JavaScript).\n     * If the grid receives changes due to bound properties, this event fires after the grid has finished processing the change.\n     */",
      "type": {
        "arguments": { "event": "ComponentStateChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onComponentStateChanged" }
    },
    "componentStateChanged": {
      "description": "/** Only used by Angular, React and VueJS AG Grid components (not used if doing plain JavaScript).\n     * If the grid receives changes due to bound properties, this event fires after the grid has finished processing the change.\n     */",
      "type": {
        "arguments": { "event": "ComponentStateChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onComponentStateChanged" }
    },
    "onCellValueChanged": {
      "description": "/** Value has changed after editing (this event will not fire if editing was cancelled, eg ESC was pressed) or\n     *  if cell value has changed as a result of cut, paste, cell clear (pressing Delete key),\n     * fill handle, copy range down, undo and redo.\n    */",
      "type": {
        "arguments": { "event": "CellValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellValueChanged" }
    },
    "cellValueChanged": {
      "description": "/** Value has changed after editing (this event will not fire if editing was cancelled, eg ESC was pressed) or\n     *  if cell value has changed as a result of cut, paste, cell clear (pressing Delete key),\n     * fill handle, copy range down, undo and redo.\n    */",
      "type": {
        "arguments": { "event": "CellValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellValueChanged" }
    },
    "onCellEditRequest": {
      "description": "/** Value has changed after editing. Only fires when `readOnlyEdit=true`. */",
      "type": {
        "arguments": { "event": "CellEditRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditRequest" }
    },
    "cellEditRequest": {
      "description": "/** Value has changed after editing. Only fires when `readOnlyEdit=true`. */",
      "type": {
        "arguments": { "event": "CellEditRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditRequest" }
    },
    "onRowValueChanged": {
      "description": "/** A cell's value within a row has changed. This event corresponds to Full Row Editing only. */",
      "type": {
        "arguments": { "event": "RowValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowValueChanged" }
    },
    "rowValueChanged": {
      "description": "/** A cell's value within a row has changed. This event corresponds to Full Row Editing only. */",
      "type": {
        "arguments": { "event": "RowValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowValueChanged" }
    },
    "onCellEditingStarted": {
      "description": "/** Editing a cell has started. */",
      "type": {
        "arguments": { "event": "CellEditingStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStarted" }
    },
    "cellEditingStarted": {
      "description": "/** Editing a cell has started. */",
      "type": {
        "arguments": { "event": "CellEditingStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStarted" }
    },
    "onCellEditingStopped": {
      "description": "/** Editing a cell has stopped. */",
      "type": {
        "arguments": { "event": "CellEditingStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStopped" }
    },
    "cellEditingStopped": {
      "description": "/** Editing a cell has stopped. */",
      "type": {
        "arguments": { "event": "CellEditingStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStopped" }
    },
    "onRowEditingStarted": {
      "description": "/** Editing a row has started (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStarted` will be fired for each individual cell. Only fires when doing Full Row Editing. */",
      "type": {
        "arguments": { "event": "RowEditingStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStarted" }
    },
    "rowEditingStarted": {
      "description": "/** Editing a row has started (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStarted` will be fired for each individual cell. Only fires when doing Full Row Editing. */",
      "type": {
        "arguments": { "event": "RowEditingStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStarted" }
    },
    "onRowEditingStopped": {
      "description": "/** Editing a row has stopped (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStopped` will be fired for each individual cell. Only fires when doing Full Row Editing. */",
      "type": {
        "arguments": { "event": "RowEditingStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStopped" }
    },
    "rowEditingStopped": {
      "description": "/** Editing a row has stopped (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStopped` will be fired for each individual cell. Only fires when doing Full Row Editing. */",
      "type": {
        "arguments": { "event": "RowEditingStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStopped" }
    },
    "onUndoStarted": {
      "description": "/** Undo operation has started. */",
      "type": {
        "arguments": { "event": "UndoStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onUndoStarted" }
    },
    "undoStarted": {
      "description": "/** Undo operation has started. */",
      "type": {
        "arguments": { "event": "UndoStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onUndoStarted" }
    },
    "onUndoEnded": {
      "description": "/** Undo operation has ended. */",
      "type": {
        "arguments": { "event": "UndoEndedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onUndoEnded" }
    },
    "undoEnded": {
      "description": "/** Undo operation has ended. */",
      "type": {
        "arguments": { "event": "UndoEndedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onUndoEnded" }
    },
    "onRedoStarted": {
      "description": "/** Redo operation has started. */",
      "type": {
        "arguments": { "event": "RedoStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRedoStarted" }
    },
    "redoStarted": {
      "description": "/** Redo operation has started. */",
      "type": {
        "arguments": { "event": "RedoStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRedoStarted" }
    },
    "onRedoEnded": {
      "description": "/** Redo operation has ended. */",
      "type": {
        "arguments": { "event": "RedoEndedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRedoEnded" }
    },
    "redoEnded": {
      "description": "/** Redo operation has ended. */",
      "type": {
        "arguments": { "event": "RedoEndedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRedoEnded" }
    },
    "onFilterOpened": {
      "description": "/** Filter has been opened. */",
      "type": {
        "arguments": { "event": "FilterOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterOpened" }
    },
    "filterOpened": {
      "description": "/** Filter has been opened. */",
      "type": {
        "arguments": { "event": "FilterOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterOpened" }
    },
    "onFilterChanged": {
      "description": "/** Filter has been modified and applied. */",
      "type": {
        "arguments": { "event": "FilterChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterChanged" }
    },
    "filterChanged": {
      "description": "/** Filter has been modified and applied. */",
      "type": {
        "arguments": { "event": "FilterChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterChanged" }
    },
    "onFilterModified": {
      "description": "/** Filter was modified but not applied. Used when filters have 'Apply' buttons. */",
      "type": {
        "arguments": { "event": "FilterModifiedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterModified" }
    },
    "filterModified": {
      "description": "/** Filter was modified but not applied. Used when filters have 'Apply' buttons. */",
      "type": {
        "arguments": { "event": "FilterModifiedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterModified" }
    },
    "onChartCreated": {
      "description": "/** A chart has been created. */",
      "type": {
        "arguments": { "event": "ChartCreated<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartCreated" }
    },
    "chartCreated": {
      "description": "/** A chart has been created. */",
      "type": {
        "arguments": { "event": "ChartCreated<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartCreated" }
    },
    "onChartRangeSelectionChanged": {
      "description": "/** The data range for the chart has been changed. */",
      "type": {
        "arguments": { "event": "ChartRangeSelectionChanged<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartRangeSelectionChanged" }
    },
    "chartRangeSelectionChanged": {
      "description": "/** The data range for the chart has been changed. */",
      "type": {
        "arguments": { "event": "ChartRangeSelectionChanged<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartRangeSelectionChanged" }
    },
    "onChartOptionsChanged": {
      "description": "/** Formatting changes have been made by users through the Format Panel. */",
      "type": {
        "arguments": { "event": "ChartOptionsChanged<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartOptionsChanged" }
    },
    "chartOptionsChanged": {
      "description": "/** Formatting changes have been made by users through the Format Panel. */",
      "type": {
        "arguments": { "event": "ChartOptionsChanged<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartOptionsChanged" }
    },
    "onChartDestroyed": {
      "description": "/** A chart has been destroyed. */",
      "type": {
        "arguments": { "event": "ChartDestroyed<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartDestroyed" }
    },
    "chartDestroyed": {
      "description": "/** A chart has been destroyed. */",
      "type": {
        "arguments": { "event": "ChartDestroyed<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartDestroyed" }
    },
    "onCellKeyDown": {
      "description": "/** DOM event `keyDown` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyDownEvent<TData> | FullWidthCellKeyDownEvent<TData>"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyDown" }
    },
    "cellKeyDown": {
      "description": "/** DOM event `keyDown` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyDownEvent<TData> | FullWidthCellKeyDownEvent<TData>"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyDown" }
    },
    "onCellKeyPress": {
      "description": "/** DOM event `keyPress` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyPressEvent<TData> | FullWidthCellKeyPressEvent<TData>"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyPress" }
    },
    "cellKeyPress": {
      "description": "/** DOM event `keyPress` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyPressEvent<TData> | FullWidthCellKeyPressEvent<TData>"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyPress" }
    },
    "onGridReady": {
      "description": "/** The grid has initialised and is ready for most api calls, but may not be fully rendered yet  */",
      "type": {
        "arguments": { "event": "GridReadyEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridReady" }
    },
    "gridReady": {
      "description": "/** The grid has initialised and is ready for most api calls, but may not be fully rendered yet  */",
      "type": {
        "arguments": { "event": "GridReadyEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridReady" }
    },
    "onFirstDataRendered": {
      "description": "/** Fired the first time data is rendered into the grid. Use this event if you want to auto resize columns based on their contents */",
      "type": {
        "arguments": { "event": "FirstDataRenderedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFirstDataRendered" }
    },
    "firstDataRendered": {
      "description": "/** Fired the first time data is rendered into the grid. Use this event if you want to auto resize columns based on their contents */",
      "type": {
        "arguments": { "event": "FirstDataRenderedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFirstDataRendered" }
    },
    "onGridSizeChanged": {
      "description": "/** The size of the grid `div` has changed. In other words, the grid was resized. */",
      "type": {
        "arguments": { "event": "GridSizeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridSizeChanged" }
    },
    "gridSizeChanged": {
      "description": "/** The size of the grid `div` has changed. In other words, the grid was resized. */",
      "type": {
        "arguments": { "event": "GridSizeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridSizeChanged" }
    },
    "onModelUpdated": {
      "description": "/** Displayed rows have changed. Triggered after sort, filter or tree expand / collapse events. */",
      "type": {
        "arguments": { "event": "ModelUpdatedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onModelUpdated" }
    },
    "modelUpdated": {
      "description": "/** Displayed rows have changed. Triggered after sort, filter or tree expand / collapse events. */",
      "type": {
        "arguments": { "event": "ModelUpdatedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onModelUpdated" }
    },
    "onVirtualRowRemoved": {
      "description": "/** A row was removed from the DOM, for any reason. Use to clean up resources (if any) used by the row. */",
      "type": {
        "arguments": { "event": "VirtualRowRemovedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualRowRemoved" }
    },
    "virtualRowRemoved": {
      "description": "/** A row was removed from the DOM, for any reason. Use to clean up resources (if any) used by the row. */",
      "type": {
        "arguments": { "event": "VirtualRowRemovedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualRowRemoved" }
    },
    "onViewportChanged": {
      "description": "/** Which rows are rendered in the DOM has changed. */",
      "type": {
        "arguments": { "event": "ViewportChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onViewportChanged" }
    },
    "viewportChanged": {
      "description": "/** Which rows are rendered in the DOM has changed. */",
      "type": {
        "arguments": { "event": "ViewportChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onViewportChanged" }
    },
    "onBodyScroll": {
      "description": "/** The body was scrolled horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScroll" }
    },
    "bodyScroll": {
      "description": "/** The body was scrolled horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScroll" }
    },
    "onBodyScrollEnd": {
      "description": "/** Main body of the grid has stopped scrolling, either horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEndEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScrollEnd" }
    },
    "bodyScrollEnd": {
      "description": "/** Main body of the grid has stopped scrolling, either horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEndEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScrollEnd" }
    },
    "onDragStarted": {
      "description": "/** When dragging starts. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStarted" }
    },
    "dragStarted": {
      "description": "/** When dragging starts. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStarted" }
    },
    "onDragStopped": {
      "description": "/** When dragging stops. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStopped" }
    },
    "dragStopped": {
      "description": "/** When dragging stops. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStopped" }
    },
    "onPaginationChanged": {
      "description": "/** Triggered every time the paging state changes. Some of the most common scenarios for this event to be triggered are:\n     *\n     *  - The page size changes.\n     *  - The current shown page is changed.\n     *  - New data is loaded onto the grid.\n     */",
      "type": {
        "arguments": { "event": "PaginationChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPaginationChanged" }
    },
    "paginationChanged": {
      "description": "/** Triggered every time the paging state changes. Some of the most common scenarios for this event to be triggered are:\n     *\n     *  - The page size changes.\n     *  - The current shown page is changed.\n     *  - New data is loaded onto the grid.\n     */",
      "type": {
        "arguments": { "event": "PaginationChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPaginationChanged" }
    },
    "onRowDragEnter": {
      "description": "/** A drag has started, or dragging was already started and the mouse has re-entered the grid having previously left the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnter" }
    },
    "rowDragEnter": {
      "description": "/** A drag has started, or dragging was already started and the mouse has re-entered the grid having previously left the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnter" }
    },
    "onRowDragMove": {
      "description": "/** The mouse has moved while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragMove" }
    },
    "rowDragMove": {
      "description": "/** The mouse has moved while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragMove" }
    },
    "onRowDragLeave": {
      "description": "/** The mouse has left the grid while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragLeave" }
    },
    "rowDragLeave": {
      "description": "/** The mouse has left the grid while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragLeave" }
    },
    "onRowDragEnd": {
      "description": "/** The drag has finished over the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnd" }
    },
    "rowDragEnd": {
      "description": "/** The drag has finished over the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnd" }
    },
    "onColumnRowGroupChanged": {
      "description": "/** A row group column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnRowGroupChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChanged" }
    },
    "columnRowGroupChanged": {
      "description": "/** A row group column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnRowGroupChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChanged" }
    },
    "onRowGroupOpened": {
      "description": "/** A row group was opened or closed. */",
      "type": {
        "arguments": { "event": "RowGroupOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowGroupOpened" }
    },
    "rowGroupOpened": {
      "description": "/** A row group was opened or closed. */",
      "type": {
        "arguments": { "event": "RowGroupOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowGroupOpened" }
    },
    "onExpandOrCollapseAll": {
      "description": "/** Fired when calling either of the API methods `expandAll()` or `collapseAll()`. */",
      "type": {
        "arguments": { "event": "ExpandCollapseAllEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onExpandOrCollapseAll" }
    },
    "expandOrCollapseAll": {
      "description": "/** Fired when calling either of the API methods `expandAll()` or `collapseAll()`. */",
      "type": {
        "arguments": { "event": "ExpandCollapseAllEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onExpandOrCollapseAll" }
    },
    "onPinnedRowDataChanged": {
      "description": "/** The client has set new pinned row data into the grid. */",
      "type": {
        "arguments": { "event": "PinnedRowDataChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPinnedRowDataChanged" }
    },
    "pinnedRowDataChanged": {
      "description": "/** The client has set new pinned row data into the grid. */",
      "type": {
        "arguments": { "event": "PinnedRowDataChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPinnedRowDataChanged" }
    },
    "onRowDataChanged": {
      "description": "/** @deprecated v28 No longer fired, use onRowDataUpdated instead */",
      "type": {
        "arguments": { "event": "RowDataChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataChanged" }
    },
    "rowDataChanged": {
      "description": "/** @deprecated v28 No longer fired, use onRowDataUpdated instead */",
      "type": {
        "arguments": { "event": "RowDataChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataChanged" }
    },
    "onRowDataUpdated": {
      "description": "/** The client has updated data for the grid by either a) setting new Row Data or b) Applying a Row Transaction. */",
      "type": {
        "arguments": { "event": "RowDataUpdatedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataUpdated" }
    },
    "rowDataUpdated": {
      "description": "/** The client has updated data for the grid by either a) setting new Row Data or b) Applying a Row Transaction. */",
      "type": {
        "arguments": { "event": "RowDataUpdatedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataUpdated" }
    },
    "onAsyncTransactionsFlushed": {
      "description": "/** Async transactions have been applied. Contains a list of all transaction results. */",
      "type": {
        "arguments": { "event": "AsyncTransactionsFlushed<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onAsyncTransactionsFlushed" }
    },
    "asyncTransactionsFlushed": {
      "description": "/** Async transactions have been applied. Contains a list of all transaction results. */",
      "type": {
        "arguments": { "event": "AsyncTransactionsFlushed<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onAsyncTransactionsFlushed" }
    },
    "onStoreRefreshed": {
      "description": "/** A server side store has finished refreshing. */",
      "type": {
        "arguments": { "event": "StoreRefreshedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onStoreRefreshed" }
    },
    "storeRefreshed": {
      "description": "/** A server side store has finished refreshing. */",
      "type": {
        "arguments": { "event": "StoreRefreshedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onStoreRefreshed" }
    },
    "onCellClicked": {
      "description": "/** Cell is clicked. */",
      "type": {
        "arguments": { "event": "CellClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellClicked" }
    },
    "cellClicked": {
      "description": "/** Cell is clicked. */",
      "type": {
        "arguments": { "event": "CellClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellClicked" }
    },
    "onCellDoubleClicked": {
      "description": "/** Cell is double clicked. */",
      "type": {
        "arguments": { "event": "CellDoubleClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellDoubleClicked" }
    },
    "cellDoubleClicked": {
      "description": "/** Cell is double clicked. */",
      "type": {
        "arguments": { "event": "CellDoubleClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellDoubleClicked" }
    },
    "onCellFocused": {
      "description": "/** Cell is focused. */",
      "type": {
        "arguments": { "event": "CellFocusedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellFocused" }
    },
    "cellFocused": {
      "description": "/** Cell is focused. */",
      "type": {
        "arguments": { "event": "CellFocusedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellFocused" }
    },
    "onCellMouseOver": {
      "description": "/** Mouse entered cell. */",
      "type": {
        "arguments": { "event": "CellMouseOverEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOver" }
    },
    "cellMouseOver": {
      "description": "/** Mouse entered cell. */",
      "type": {
        "arguments": { "event": "CellMouseOverEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOver" }
    },
    "onCellMouseOut": {
      "description": "/** Mouse left cell. */",
      "type": {
        "arguments": { "event": "CellMouseOutEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOut" }
    },
    "cellMouseOut": {
      "description": "/** Mouse left cell. */",
      "type": {
        "arguments": { "event": "CellMouseOutEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOut" }
    },
    "onCellMouseDown": {
      "description": "/** Mouse down on cell. */",
      "type": {
        "arguments": { "event": "CellMouseDownEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseDown" }
    },
    "cellMouseDown": {
      "description": "/** Mouse down on cell. */",
      "type": {
        "arguments": { "event": "CellMouseDownEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseDown" }
    },
    "onRowClicked": {
      "description": "/** Row is clicked. */",
      "type": {
        "arguments": { "event": "RowClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowClicked" }
    },
    "rowClicked": {
      "description": "/** Row is clicked. */",
      "type": {
        "arguments": { "event": "RowClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowClicked" }
    },
    "onRowDoubleClicked": {
      "description": "/** Row is double clicked. */",
      "type": {
        "arguments": { "event": "RowDoubleClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDoubleClicked" }
    },
    "rowDoubleClicked": {
      "description": "/** Row is double clicked. */",
      "type": {
        "arguments": { "event": "RowDoubleClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDoubleClicked" }
    },
    "onRowSelected": {
      "description": "/** Row is selected or deselected. The event contains the node in question, so call the node's `isSelected()` method to see if it was just selected or deselected. */",
      "type": {
        "arguments": { "event": "RowSelectedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowSelected" }
    },
    "rowSelected": {
      "description": "/** Row is selected or deselected. The event contains the node in question, so call the node's `isSelected()` method to see if it was just selected or deselected. */",
      "type": {
        "arguments": { "event": "RowSelectedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowSelected" }
    },
    "onSelectionChanged": {
      "description": "/** Row selection is changed. Use the grid API `getSelectedNodes()` or `getSelectedRows()` to get the new list of selected nodes / row data. */",
      "type": {
        "arguments": { "event": "SelectionChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSelectionChanged" }
    },
    "selectionChanged": {
      "description": "/** Row selection is changed. Use the grid API `getSelectedNodes()` or `getSelectedRows()` to get the new list of selected nodes / row data. */",
      "type": {
        "arguments": { "event": "SelectionChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSelectionChanged" }
    },
    "onCellContextMenu": {
      "description": "/** Cell is right clicked. */",
      "type": {
        "arguments": { "event": "CellContextMenuEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellContextMenu" }
    },
    "cellContextMenu": {
      "description": "/** Cell is right clicked. */",
      "type": {
        "arguments": { "event": "CellContextMenuEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellContextMenu" }
    },
    "onRangeSelectionChanged": {
      "description": "/** A change to range selection has occurred. */",
      "type": {
        "arguments": { "event": "RangeSelectionChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRangeSelectionChanged" }
    },
    "rangeSelectionChanged": {
      "description": "/** A change to range selection has occurred. */",
      "type": {
        "arguments": { "event": "RangeSelectionChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRangeSelectionChanged" }
    },
    "onSortChanged": {
      "description": "/** Sort has changed. The grid also listens for this and updates the model. */",
      "type": {
        "arguments": { "event": "SortChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSortChanged" }
    },
    "sortChanged": {
      "description": "/** Sort has changed. The grid also listens for this and updates the model. */",
      "type": {
        "arguments": { "event": "SortChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSortChanged" }
    },
    "onColumnRowGroupChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnRowGroupChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChangeRequest" }
    },
    "columnRowGroupChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnRowGroupChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChangeRequest" }
    },
    "onColumnPivotChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnPivotChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChangeRequest" }
    },
    "columnPivotChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnPivotChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChangeRequest" }
    },
    "onColumnValueChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnValueChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChangeRequest" }
    },
    "columnValueChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnValueChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChangeRequest" }
    },
    "onColumnAggFuncChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnAggFuncChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnAggFuncChangeRequest" }
    },
    "columnAggFuncChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnAggFuncChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnAggFuncChangeRequest" }
    },
    "api": {
      "description": "/** The Grid Api for interacting with the grid.\n     * Set by the grid on init, set to null on destroy.\n     */",
      "type": { "returnType": "GridApi<TData> | null", "optional": true }
    },
    "columnApi": {
      "description": "/** The Column Api for interacting with the grid columns.\n     * Set by the grid on init, set to null on destroy.\n     */",
      "type": { "returnType": "ColumnApi | null", "optional": true }
    },
    "meta": { "typeParams": ["TData = any"] }
  },
  "RowGroupingDisplayType": {},
  "TreeDataDisplayType": {},
  "GetDataPath": { "meta": { "typeParams": ["TData = any"] } },
  "IsServerSideGroup": {},
  "IsRowFilterable": { "meta": { "typeParams": ["TData = any"] } },
  "IsApplyServerSideTransaction": {},
  "GetServerSideGroupKey": {},
  "IsRowMaster": { "meta": { "typeParams": ["TData = any"] } },
  "IsRowSelectable": { "meta": { "typeParams": ["TData = any"] } },
  "RowClassRules": { "meta": { "typeParams": ["TData = any"] } },
  "RowStyle": {},
  "RowClassParams": {
    "data": {
      "description": "/** The data associated with this row from rowData. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The RowNode associated with this row */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The index of the row */",
      "type": { "returnType": "number", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "GetContextMenuItems": { "meta": { "typeParams": ["TData = any"] } },
  "GetChartToolbarItems": {},
  "MenuItemLeafDef": {
    "name": {
      "description": "/** Name of the menu item */",
      "type": { "returnType": "string", "optional": false }
    },
    "disabled": {
      "description": "/** It the item should be enabled / disabled */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "shortcut": {
      "description": "/** Shortcut (just display text, saying the shortcut here does nothing) */",
      "type": { "returnType": "string", "optional": true }
    },
    "action": {
      "description": "/** Function that gets executed when item is chosen */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "checked": {
      "description": "/** Set to true to provide a check beside the option */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "icon": {
      "description": "/** The icon to display, either a DOM element or HTML string */",
      "type": { "returnType": "Element | string", "optional": true }
    },
    "cssClasses": {
      "description": "/** CSS classes to apply to the menu item */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "tooltip": {
      "description": "/** Tooltip for the menu item */",
      "type": { "returnType": "string", "optional": true }
    }
  },
  "MenuItemDef": {
    "subMenu": {
      "description": "/** If this item is a sub menu, contains a list of menu item definitions */",
      "type": { "returnType": "(MenuItemDef | string)[]", "optional": true }
    },
    "name": {
      "description": "/** Name of the menu item */",
      "type": { "returnType": "string", "optional": false }
    },
    "disabled": {
      "description": "/** It the item should be enabled / disabled */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "shortcut": {
      "description": "/** Shortcut (just display text, saying the shortcut here does nothing) */",
      "type": { "returnType": "string", "optional": true }
    },
    "action": {
      "description": "/** Function that gets executed when item is chosen */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "checked": {
      "description": "/** Set to true to provide a check beside the option */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "icon": {
      "description": "/** The icon to display, either a DOM element or HTML string */",
      "type": { "returnType": "Element | string", "optional": true }
    },
    "cssClasses": {
      "description": "/** CSS classes to apply to the menu item */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "tooltip": {
      "description": "/** Tooltip for the menu item */",
      "type": { "returnType": "string", "optional": true }
    }
  },
  "GetMainMenuItems": {},
  "GetRowNodeIdFunc": { "meta": { "typeParams": ["TData = any"] } },
  "GetRowIdFunc": { "meta": { "typeParams": ["TData = any"] } },
  "ChartRef": {
    "chartId": {
      "description": "/** The id of the created chart. */",
      "type": { "returnType": "string", "optional": false }
    },
    "chart": {
      "description": "/** The chart instance that is produced by AG Charts which can be used to interact with the chart directly. */",
      "type": { "returnType": "any", "optional": false }
    },
    "chartElement": {
      "description": "/** The chart DOM element, which the application is responsible for placing into the DOM. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "destroyChart": {
      "description": "/** The application is responsible for calling this when the chart is no longer needed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "ChartRefParams": {
    "meta": { "typeParams": ["TData = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    },
    "chartId": {
      "description": "/** The id of the created chart. */",
      "type": { "returnType": "string", "optional": false }
    },
    "chart": {
      "description": "/** The chart instance that is produced by AG Charts which can be used to interact with the chart directly. */",
      "type": { "returnType": "any", "optional": false }
    },
    "chartElement": {
      "description": "/** The chart DOM element, which the application is responsible for placing into the DOM. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "destroyChart": {
      "description": "/** The application is responsible for calling this when the chart is no longer needed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "ServerSideStoreType": {},
  "ServerSideGroupLevelParams": {
    "storeType": {
      "description": "/** @deprecated\n     * What store type to use.\n     * If missing, then defaults to grid option `serverSideStoreType`.\n     * Deprecated in favor of infiniteScroll.\n     * If suppressInfiniteScroll==false, then Partial Store is used.\n     * If suppressInfiniteScroll==false, then Full Store is used.\n     *  */",
      "type": { "returnType": "ServerSideStoreType", "optional": true }
    },
    "suppressInfiniteScroll": {
      "description": "/** Whether to have infinite scroll active or not for the level.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "maxBlocksInCache": {
      "description": "/** For Infinite Scroll only.\n     * How many blocks to keep in cache.\n     * If missing, defaults to grid options `maxBlocksInCache`.\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "cacheBlockSize": {
      "description": "/** For Infinite Scroll only.\n     * Cache block size.\n     * If missing, defaults to grid options `cacheBlockSize`.\n     */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "ServerSideStoreParams": {
    "storeType": {
      "description": "/** @deprecated\n     * What store type to use.\n     * If missing, then defaults to grid option `serverSideStoreType`.\n     * Deprecated in favor of infiniteScroll.\n     * If suppressInfiniteScroll==false, then Partial Store is used.\n     * If suppressInfiniteScroll==false, then Full Store is used.\n     *  */",
      "type": { "returnType": "ServerSideStoreType", "optional": true }
    },
    "suppressInfiniteScroll": {
      "description": "/** Whether to have infinite scroll active or not for the level.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "maxBlocksInCache": {
      "description": "/** For Infinite Scroll only.\n     * How many blocks to keep in cache.\n     * If missing, defaults to grid options `maxBlocksInCache`.\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "cacheBlockSize": {
      "description": "/** For Infinite Scroll only.\n     * Cache block size.\n     * If missing, defaults to grid options `cacheBlockSize`.\n     */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "LoadingCellRendererSelectorFunc": {
    "meta": { "typeParams": ["TData = any"] }
  },
  "LoadingCellRendererSelectorResult": {
    "component": {
      "description": "/** Equivalent of setting `loadingCellRenderer` */",
      "type": { "returnType": "any", "optional": true }
    },
    "frameworkComponent": {
      "description": "/** @deprecated As of v27, use `component` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "params": {
      "description": "/** Equivalent of setting `loadingCellRendererParams` */",
      "type": { "returnType": "any", "optional": true }
    }
  },
  "DomLayoutType": {},
  "RowPosition": {
    "rowIndex": {
      "description": "/** A positive number from 0 to n, where n is the last row the grid is rendering\n    * or -1 if you want to navigate to the grid header */",
      "type": { "returnType": "number", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null/undefined (for not pinned) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    }
  },
  "SASS_PROPERTIES": {},
  "HardCodedSize": {},
  "ModelUpdatedEvent": {
    "animate": {
      "description": "/** If true, the grid will try and animate the rows to the new positions */",
      "type": { "returnType": "boolean | undefined", "optional": false }
    },
    "keepRenderedRows": {
      "description": "/** If true, the grid has new data loaded, eg user called setRowData(), otherwise\n     * it's the same data but sorted or filtered, in which case this is true, and rows\n     * can animate around (eg rowNode id 24 is the same row node as last time). */",
      "type": { "returnType": "boolean | undefined", "optional": false }
    },
    "newData": {
      "description": "/** If true, then this update was a result of setRowData() getting called. This\n     * gets the grid to scroll to the top again. */",
      "type": { "returnType": "boolean | undefined", "optional": false }
    },
    "newPage": {
      "description": "/** True when pagination and a new page is navigated to. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "keepUndoRedoStack": {
      "description": "/** true if all we did is changed row height, data still the same, no need to clear the undo/redo stacks */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "PaginationChangedEvent": {
    "animate": {
      "description": "/** True if rows were animated to new position */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "keepRenderedRows": {
      "description": "/** True if rows were kept (otherwise complete redraw) */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "newData": {
      "description": "/** True if data was new (i.e user set new data) */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "newPage": {
      "description": "/** True if user went to a new page */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "AgEvent": {
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "AgGridEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ToolPanelVisibleChangedEvent": {
    "source": {
      "type": { "returnType": "string | undefined", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "InternalToolPanelVisibleChangedEvent": {
    "source": {
      "type": {
        "returnType": "'sideBarButtonClicked' | 'sideBarInitializing' | 'api'",
        "optional": false
      }
    },
    "key": {
      "description": "/** Key of tool panel. */",
      "type": { "returnType": "string", "optional": false }
    },
    "visible": {
      "description": "/** True if now visible; false if now hidden. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ToolPanelSizeChangedEvent": {
    "type": {
      "type": { "returnType": "'toolPanelSizeChanged'", "optional": false }
    },
    "started": {
      "description": "/** True if this is the first change to the Tool Panel size. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "ended": {
      "description": "/** True if this is the last change to the Tool Panel size. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "width": {
      "description": "/** New width of the ToolPanel component. */",
      "type": { "returnType": "number", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ColumnPivotModeChangedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "VirtualColumnsChangedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnEverythingChangedEvent": {
    "source": { "type": { "returnType": "string", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "NewColumnsLoadedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "GridColumnsChangedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "DisplayedColumnsChangedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowDataChangedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowDataUpdatedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "PinnedRowDataChangedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "SelectionEventSourceType": {},
  "SelectionChangedEvent": {
    "source": {
      "type": { "returnType": "SelectionEventSourceType", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FilterChangedEvent": {
    "afterDataChange": {
      "description": "/** True if the filter was changed as a result of data changing */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "afterFloatingFilter": {
      "description": "/** True if filter was changed via floating filter */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "columns": {
      "description": "/** Columns affected by the filter change. Array contents depend on the source of the event.\n     *\n     * - Expect 1 element for UI-driven column filter changes.\n     * - Expect 0-N elements (all affected columns) for calls to `gridOptions.api.setFilterModel()`.\n     * - Expect 0-N elements (removed columns) for calls to `gridOptions.api.setColumnDefs()`.\n     * - Expect 0 elements for quick-filters and calls to `gridOptions.api.onFilterChanged()`.\n     */",
      "type": { "returnType": "Column[]", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FilterModifiedEvent": {
    "filterInstance": {
      "type": { "returnType": "IFilterComp", "optional": false }
    },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FilterOpenedEvent": {
    "column": {
      "description": "/** Column / OriginalColumnGroup that contains the filter */",
      "type": {
        "returnType": "Column | ProvidedColumnGroup",
        "optional": false
      }
    },
    "source": {
      "description": "/** Source of the open request */",
      "type": { "returnType": "FilterRequestSource", "optional": false }
    },
    "eGui": {
      "description": "/** Parent element of the filter */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FilterDestroyedEvent": {
    "source": {
      "type": {
        "returnType": "'api' | 'columnChanged' | 'gridDestroyed'",
        "optional": false
      }
    },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "SortChangedEvent": {
    "source": {
      "description": "/** Source of the sort change. */",
      "type": { "returnType": "string", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "GridReadyEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "DisplayedColumnsWidthChangedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnHoverChangedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "BodyHeightChangedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ComponentStateChangedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnPanelItemDragStartEvent": {
    "column": {
      "type": {
        "returnType": "Column | ProvidedColumnGroup",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnPanelItemDragEndEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "AgDragEvent": {
    "target": {
      "description": "/** The DOM element that started the event. */",
      "type": { "returnType": "Element", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "DragStartedEvent": {
    "type": { "type": { "returnType": "'dragStarted'", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "target": {
      "description": "/** The DOM element that started the event. */",
      "type": { "returnType": "Element", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "DragStoppedEvent": {
    "type": { "type": { "returnType": "'dragStopped'", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "target": {
      "description": "/** The DOM element that started the event. */",
      "type": { "returnType": "Element", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "CheckboxChangedEvent": {
    "id": { "type": { "returnType": "string", "optional": false } },
    "name": { "type": { "returnType": "string", "optional": false } },
    "selected": { "type": { "returnType": "boolean", "optional": true } },
    "previousValue": {
      "type": { "returnType": "boolean | undefined", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "GridSizeChangedEvent": {
    "clientWidth": {
      "description": "/** The grid's DIV's clientWidth */",
      "type": { "returnType": "number", "optional": false }
    },
    "clientHeight": {
      "description": "/** The grid's DIV's clientHeight */",
      "type": { "returnType": "number", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowDragEvent": {
    "type": {
      "description": "/** Event identifier: One of rowDragEnter, rowDragMove, rowDragEnd, rowDragLeave */",
      "type": { "returnType": "string", "optional": false }
    },
    "node": {
      "description": "/** The row node getting dragged. Also the node that started the drag when multi-row dragging. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "nodes": {
      "description": "/** The list of nodes being dragged. */",
      "type": { "returnType": "IRowNode<TData>[]", "optional": false }
    },
    "event": {
      "description": "/** The underlying mouse move event associated with the drag. */",
      "type": { "returnType": "MouseEvent", "optional": false }
    },
    "eventPath": {
      "description": "/** The `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "vDirection": {
      "description": "/** Direction of the drag, either `'up'`, `'down'` or `null` (if mouse is moving horizontally and not vertically). */",
      "type": { "returnType": "string", "optional": false }
    },
    "overIndex": {
      "description": "/** The row index the mouse is dragging over or -1 if over no row. */",
      "type": { "returnType": "number", "optional": false }
    },
    "overNode": {
      "description": "/** The row node the mouse is dragging over or undefined if over no row. */",
      "type": { "returnType": "IRowNode<TData>", "optional": true }
    },
    "y": {
      "description": "/** The vertical pixel location the mouse is over, with `0` meaning the top of the first row.\n     * This can be compared to the `rowNode.rowHeight` and `rowNode.rowTop` to work out the mouse position relative to rows.\n     * The provided attributes `overIndex` and `overNode` means the `y` property is mostly redundant.\n     * The `y` property can be handy if you want more information such as 'how close is the mouse to the top or bottom of the row?'\n     */",
      "type": { "returnType": "number", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "RowDragEnterEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "type": {
      "description": "/** Event identifier: One of rowDragEnter, rowDragMove, rowDragEnd, rowDragLeave */",
      "type": { "returnType": "string", "optional": false }
    },
    "node": {
      "description": "/** The row node getting dragged. Also the node that started the drag when multi-row dragging. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "nodes": {
      "description": "/** The list of nodes being dragged. */",
      "type": { "returnType": "IRowNode<TData>[]", "optional": false }
    },
    "event": {
      "description": "/** The underlying mouse move event associated with the drag. */",
      "type": { "returnType": "MouseEvent", "optional": false }
    },
    "eventPath": {
      "description": "/** The `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "vDirection": {
      "description": "/** Direction of the drag, either `'up'`, `'down'` or `null` (if mouse is moving horizontally and not vertically). */",
      "type": { "returnType": "string", "optional": false }
    },
    "overIndex": {
      "description": "/** The row index the mouse is dragging over or -1 if over no row. */",
      "type": { "returnType": "number", "optional": false }
    },
    "overNode": {
      "description": "/** The row node the mouse is dragging over or undefined if over no row. */",
      "type": { "returnType": "IRowNode<TData>", "optional": true }
    },
    "y": {
      "description": "/** The vertical pixel location the mouse is over, with `0` meaning the top of the first row.\n     * This can be compared to the `rowNode.rowHeight` and `rowNode.rowTop` to work out the mouse position relative to rows.\n     * The provided attributes `overIndex` and `overNode` means the `y` property is mostly redundant.\n     * The `y` property can be handy if you want more information such as 'how close is the mouse to the top or bottom of the row?'\n     */",
      "type": { "returnType": "number", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "RowDragEndEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "type": {
      "description": "/** Event identifier: One of rowDragEnter, rowDragMove, rowDragEnd, rowDragLeave */",
      "type": { "returnType": "string", "optional": false }
    },
    "node": {
      "description": "/** The row node getting dragged. Also the node that started the drag when multi-row dragging. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "nodes": {
      "description": "/** The list of nodes being dragged. */",
      "type": { "returnType": "IRowNode<TData>[]", "optional": false }
    },
    "event": {
      "description": "/** The underlying mouse move event associated with the drag. */",
      "type": { "returnType": "MouseEvent", "optional": false }
    },
    "eventPath": {
      "description": "/** The `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "vDirection": {
      "description": "/** Direction of the drag, either `'up'`, `'down'` or `null` (if mouse is moving horizontally and not vertically). */",
      "type": { "returnType": "string", "optional": false }
    },
    "overIndex": {
      "description": "/** The row index the mouse is dragging over or -1 if over no row. */",
      "type": { "returnType": "number", "optional": false }
    },
    "overNode": {
      "description": "/** The row node the mouse is dragging over or undefined if over no row. */",
      "type": { "returnType": "IRowNode<TData>", "optional": true }
    },
    "y": {
      "description": "/** The vertical pixel location the mouse is over, with `0` meaning the top of the first row.\n     * This can be compared to the `rowNode.rowHeight` and `rowNode.rowTop` to work out the mouse position relative to rows.\n     * The provided attributes `overIndex` and `overNode` means the `y` property is mostly redundant.\n     * The `y` property can be handy if you want more information such as 'how close is the mouse to the top or bottom of the row?'\n     */",
      "type": { "returnType": "number", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "RowDragMoveEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "type": {
      "description": "/** Event identifier: One of rowDragEnter, rowDragMove, rowDragEnd, rowDragLeave */",
      "type": { "returnType": "string", "optional": false }
    },
    "node": {
      "description": "/** The row node getting dragged. Also the node that started the drag when multi-row dragging. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "nodes": {
      "description": "/** The list of nodes being dragged. */",
      "type": { "returnType": "IRowNode<TData>[]", "optional": false }
    },
    "event": {
      "description": "/** The underlying mouse move event associated with the drag. */",
      "type": { "returnType": "MouseEvent", "optional": false }
    },
    "eventPath": {
      "description": "/** The `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "vDirection": {
      "description": "/** Direction of the drag, either `'up'`, `'down'` or `null` (if mouse is moving horizontally and not vertically). */",
      "type": { "returnType": "string", "optional": false }
    },
    "overIndex": {
      "description": "/** The row index the mouse is dragging over or -1 if over no row. */",
      "type": { "returnType": "number", "optional": false }
    },
    "overNode": {
      "description": "/** The row node the mouse is dragging over or undefined if over no row. */",
      "type": { "returnType": "IRowNode<TData>", "optional": true }
    },
    "y": {
      "description": "/** The vertical pixel location the mouse is over, with `0` meaning the top of the first row.\n     * This can be compared to the `rowNode.rowHeight` and `rowNode.rowTop` to work out the mouse position relative to rows.\n     * The provided attributes `overIndex` and `overNode` means the `y` property is mostly redundant.\n     * The `y` property can be handy if you want more information such as 'how close is the mouse to the top or bottom of the row?'\n     */",
      "type": { "returnType": "number", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "RowDragLeaveEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "type": {
      "description": "/** Event identifier: One of rowDragEnter, rowDragMove, rowDragEnd, rowDragLeave */",
      "type": { "returnType": "string", "optional": false }
    },
    "node": {
      "description": "/** The row node getting dragged. Also the node that started the drag when multi-row dragging. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "nodes": {
      "description": "/** The list of nodes being dragged. */",
      "type": { "returnType": "IRowNode<TData>[]", "optional": false }
    },
    "event": {
      "description": "/** The underlying mouse move event associated with the drag. */",
      "type": { "returnType": "MouseEvent", "optional": false }
    },
    "eventPath": {
      "description": "/** The `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "vDirection": {
      "description": "/** Direction of the drag, either `'up'`, `'down'` or `null` (if mouse is moving horizontally and not vertically). */",
      "type": { "returnType": "string", "optional": false }
    },
    "overIndex": {
      "description": "/** The row index the mouse is dragging over or -1 if over no row. */",
      "type": { "returnType": "number", "optional": false }
    },
    "overNode": {
      "description": "/** The row node the mouse is dragging over or undefined if over no row. */",
      "type": { "returnType": "IRowNode<TData>", "optional": true }
    },
    "y": {
      "description": "/** The vertical pixel location the mouse is over, with `0` meaning the top of the first row.\n     * This can be compared to the `rowNode.rowHeight` and `rowNode.rowTop` to work out the mouse position relative to rows.\n     * The provided attributes `overIndex` and `overNode` means the `y` property is mostly redundant.\n     * The `y` property can be handy if you want more information such as 'how close is the mouse to the top or bottom of the row?'\n     */",
      "type": { "returnType": "number", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "PasteStartEvent": {
    "source": { "type": { "returnType": "string", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "PasteEndEvent": {
    "source": { "type": { "returnType": "string", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FillStartEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FillEndEvent": {
    "initialRange": {
      "type": { "returnType": "CellRange", "optional": false }
    },
    "finalRange": { "type": { "returnType": "CellRange", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "UndoStartedEvent": {
    "source": {
      "description": "/** Source of the event. `api` if via API method. `ui` if via keyboard shortcut. */",
      "type": { "returnType": "'api' | 'ui'", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "UndoEndedEvent": {
    "source": {
      "description": "/** Source of the event. `api` if via API method. `ui` if via keyboard shortcut. */",
      "type": { "returnType": "'api' | 'ui'", "optional": false }
    },
    "operationPerformed": {
      "description": "/** `true` if any undo operations were performed. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RedoStartedEvent": {
    "source": {
      "description": "/** Source of the event. `api` if via API method. `ui` if via keyboard shortcut. */",
      "type": { "returnType": "'api' | 'ui'", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RedoEndedEvent": {
    "source": {
      "description": "/** Source of the event. `api` if via API method. `ui` if via keyboard shortcut. */",
      "type": { "returnType": "'api' | 'ui'", "optional": false }
    },
    "operationPerformed": {
      "description": "/** `true` if any redo operations were performed. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ViewportChangedEvent": {
    "firstRow": {
      "description": "/** Index of the first rendered row */",
      "type": { "returnType": "number", "optional": false }
    },
    "lastRow": {
      "description": "/** Index of the last rendered row */",
      "type": { "returnType": "number", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FirstDataRenderedEvent": {
    "firstRow": {
      "description": "/** Index of the first rendered row */",
      "type": { "returnType": "number", "optional": false }
    },
    "lastRow": {
      "description": "/** Index of the last rendered row */",
      "type": { "returnType": "number", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RangeSelectionChangedEvent": {
    "id": { "type": { "returnType": "string", "optional": true } },
    "started": {
      "description": "/** True for the first change event, otherwise false */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "finished": {
      "description": "/** True for the last change event, otherwise false */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ChartCreated": {
    "type": {
      "description": "/** Will always be `chartCreated`. */",
      "type": { "returnType": "string", "optional": false }
    },
    "chartId": {
      "description": "/** Id of the created chart. This can later be used to reference the chart via api methods. */",
      "type": { "returnType": "string", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ChartRangeSelectionChanged": {
    "type": {
      "description": "/** Will always be `chartRangeSelectionChanged`. */",
      "type": { "returnType": "string", "optional": false }
    },
    "chartId": {
      "description": "/** Id of the effected chart. */",
      "type": { "returnType": "string", "optional": false }
    },
    "id": {
      "description": "/** Same as `chartId`. */",
      "type": { "returnType": "string", "optional": false }
    },
    "cellRange": {
      "description": "/** New cellRange selected. */",
      "type": { "returnType": "CellRangeParams", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ChartOptionsChanged": {
    "type": {
      "description": "/** Will always be `chartOptionsChanged`. */",
      "type": { "returnType": "string", "optional": false }
    },
    "chartId": {
      "description": "/** Id of the effected chart. */",
      "type": { "returnType": "string", "optional": false }
    },
    "chartType": {
      "description": "/** ChartType */",
      "type": { "returnType": "ChartType", "optional": false }
    },
    "chartThemeName": {
      "description": "/** Chart theme name of currently selected theme. */",
      "type": { "returnType": "string", "optional": false }
    },
    "chartOptions": {
      "description": "/** Chart options.  */",
      "type": { "returnType": "AgChartThemeOverrides", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ChartDestroyed": {
    "type": {
      "description": "/** Will always be `chartDestroyed`. */",
      "type": { "returnType": "string", "optional": false }
    },
    "chartId": {
      "description": "/** Id of the effected chart. */",
      "type": { "returnType": "string", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ColumnGroupOpenedEvent": {
    "columnGroup": {
      "type": { "returnType": "ProvidedColumnGroup", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ItemsAddedEvent": {
    "items": {
      "type": { "returnType": "IRowNode<TData>[]", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ScrollDirection": {},
  "BodyScrollEvent": {
    "direction": {
      "type": { "returnType": "ScrollDirection", "optional": false }
    },
    "left": { "type": { "returnType": "number", "optional": false } },
    "top": { "type": { "returnType": "number", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "BodyScrollEndEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "direction": {
      "type": { "returnType": "ScrollDirection", "optional": false }
    },
    "left": { "type": { "returnType": "number", "optional": false } },
    "top": { "type": { "returnType": "number", "optional": false } },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FlashCellsEvent": {
    "cells": { "type": { "returnType": "any", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "PaginationPixelOffsetChangedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CommonCellFocusParams": {
    "rowIndex": {
      "description": "/** Row index of the focused cell */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "column": {
      "description": "/** Column of the focused cell */",
      "type": { "returnType": "Column | string | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** either 'top', 'bottom' or null / undefined (if not pinned) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "isFullWidthCell": {
      "description": "/** Whether the cell a full width cell or a regular cell */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "CellFocusClearedParams": {
    "rowIndex": {
      "description": "/** Row index of the focused cell */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "column": {
      "description": "/** Column of the focused cell */",
      "type": { "returnType": "Column | string | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** either 'top', 'bottom' or null / undefined (if not pinned) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "isFullWidthCell": {
      "description": "/** Whether the cell a full width cell or a regular cell */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "CellFocusedParams": {
    "forceBrowserFocus": {
      "description": "/** Whether browser focus is also set (false when editing) */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "preventScrollOnBrowserFocus": {
      "description": "/** When `forceBrowserFocus` is `true`, should scroll be prevented */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "floating": { "type": { "returnType": "string | null", "optional": true } },
    "rowIndex": {
      "description": "/** Row index of the focused cell */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "column": {
      "description": "/** Column of the focused cell */",
      "type": { "returnType": "Column | string | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** either 'top', 'bottom' or null / undefined (if not pinned) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "isFullWidthCell": {
      "description": "/** Whether the cell a full width cell or a regular cell */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "CellFocusClearedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    },
    "rowIndex": {
      "description": "/** Row index of the focused cell */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "column": {
      "description": "/** Column of the focused cell */",
      "type": { "returnType": "Column | string | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** either 'top', 'bottom' or null / undefined (if not pinned) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "isFullWidthCell": {
      "description": "/** Whether the cell a full width cell or a regular cell */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "CellFocusedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    },
    "forceBrowserFocus": {
      "description": "/** Whether browser focus is also set (false when editing) */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "preventScrollOnBrowserFocus": {
      "description": "/** When `forceBrowserFocus` is `true`, should scroll be prevented */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "floating": { "type": { "returnType": "string | null", "optional": true } },
    "rowIndex": {
      "description": "/** Row index of the focused cell */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "column": {
      "description": "/** Column of the focused cell */",
      "type": { "returnType": "Column | string | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** either 'top', 'bottom' or null / undefined (if not pinned) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "isFullWidthCell": {
      "description": "/** Whether the cell a full width cell or a regular cell */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "FullWidthRowFocusedEvent": {
    "fromBelow": { "type": { "returnType": "boolean", "optional": false } },
    "meta": { "typeParams": ["TData = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    },
    "forceBrowserFocus": {
      "description": "/** Whether browser focus is also set (false when editing) */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "preventScrollOnBrowserFocus": {
      "description": "/** When `forceBrowserFocus` is `true`, should scroll be prevented */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "floating": { "type": { "returnType": "string | null", "optional": true } },
    "rowIndex": {
      "description": "/** Row index of the focused cell */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "column": {
      "description": "/** Column of the focused cell */",
      "type": { "returnType": "Column | string | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** either 'top', 'bottom' or null / undefined (if not pinned) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "isFullWidthCell": {
      "description": "/** Whether the cell a full width cell or a regular cell */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "ExpandCollapseAllEvent": {
    "source": { "type": { "returnType": "string", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnEventType": {},
  "ColumnEvent": {
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null", "optional": false }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnResizedEvent": {
    "finished": {
      "description": "/** Set to true for last event in a sequence of move events */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "flexColumns": {
      "description": "/** Any columns resized due to flex */",
      "type": { "returnType": "Column[] | null", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null", "optional": false }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnPivotChangedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null", "optional": false }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnRowGroupChangedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null", "optional": false }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnValueChangedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null", "optional": false }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnMovedEvent": {
    "toIndex": {
      "description": "/** The position the column was moved to */",
      "type": { "returnType": "number", "optional": true }
    },
    "finished": {
      "description": "/** `True` when the column has finished moving. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null", "optional": false }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnVisibleEvent": {
    "visible": {
      "description": "/** True if column was set to visible, false if set to hide */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null", "optional": false }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnPinnedEvent": {
    "pinned": {
      "description": "/** Either 'left', 'right', or null (it not pinned) */",
      "type": { "returnType": "ColumnPinnedType", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null", "optional": false }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "BaseRowEvent": {
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "meta": { "typeParams": ["TData", "TContext"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowEvent": {
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowWithDataEvent": {
    "data": {
      "description": "/** The user provided data for the row. */",
      "type": { "returnType": "TData", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowGroupOpenedEvent": {
    "expanded": {
      "description": "/** True if the group is expanded. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowValueChangedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowSelectedEvent": {
    "source": {
      "type": { "returnType": "SelectionEventSourceType", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "VirtualRowRemovedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowClickedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowDoubleClickedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowEditingStartedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowEditingStoppedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FullWidthCellKeyDownEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FullWidthCellKeyPressEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellEvent": {
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef<TData>", "optional": false } },
    "value": {
      "description": "/** The value for the cell if available otherwise undefined. */",
      "type": { "returnType": "TValue | undefined", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TValue = any"] },
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellWithDataEvent": {
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef<TData>", "optional": false } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "TValue", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TValue = any"] },
    "data": {
      "description": "/** The user provided data for the row. */",
      "type": { "returnType": "TData", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellKeyDownEvent": {
    "meta": { "typeParams": ["TData = any", "TValue = any"] },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef<TData>", "optional": false } },
    "value": {
      "description": "/** The value for the cell if available otherwise undefined. */",
      "type": { "returnType": "TValue | undefined", "optional": false }
    },
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellKeyPressEvent": {
    "meta": { "typeParams": ["TData = any", "TValue = any"] },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef<TData>", "optional": false } },
    "value": {
      "description": "/** The value for the cell if available otherwise undefined. */",
      "type": { "returnType": "TValue | undefined", "optional": false }
    },
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellClickedEvent": {
    "meta": { "typeParams": ["TData = any", "TValue = any"] },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef<TData>", "optional": false } },
    "value": {
      "description": "/** The value for the cell if available otherwise undefined. */",
      "type": { "returnType": "TValue | undefined", "optional": false }
    },
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellMouseDownEvent": {
    "meta": { "typeParams": ["TData = any", "TValue = any"] },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef<TData>", "optional": false } },
    "value": {
      "description": "/** The value for the cell if available otherwise undefined. */",
      "type": { "returnType": "TValue | undefined", "optional": false }
    },
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellDoubleClickedEvent": {
    "meta": { "typeParams": ["TData = any", "TValue = any"] },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef<TData>", "optional": false } },
    "value": {
      "description": "/** The value for the cell if available otherwise undefined. */",
      "type": { "returnType": "TValue | undefined", "optional": false }
    },
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellMouseOverEvent": {
    "meta": { "typeParams": ["TData = any", "TValue = any"] },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef<TData>", "optional": false } },
    "value": {
      "description": "/** The value for the cell if available otherwise undefined. */",
      "type": { "returnType": "TValue | undefined", "optional": false }
    },
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellMouseOutEvent": {
    "meta": { "typeParams": ["TData = any", "TValue = any"] },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef<TData>", "optional": false } },
    "value": {
      "description": "/** The value for the cell if available otherwise undefined. */",
      "type": { "returnType": "TValue | undefined", "optional": false }
    },
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellContextMenuEvent": {
    "meta": { "typeParams": ["TData = any", "TValue = any"] },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef<TData>", "optional": false } },
    "value": {
      "description": "/** The value for the cell if available otherwise undefined. */",
      "type": { "returnType": "TValue | undefined", "optional": false }
    },
    "data": {
      "description": "/** The user provided data for the row. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellEditingStartedEvent": {
    "meta": { "typeParams": ["TData = any", "TValue = any"] },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef<TData>", "optional": false } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "TValue", "optional": false }
    },
    "data": {
      "description": "/** The user provided data for the row. */",
      "type": { "returnType": "TData", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellEditingStoppedEvent": {
    "oldValue": {
      "description": "/** The old value before editing */",
      "type": { "returnType": "any", "optional": false }
    },
    "newValue": {
      "description": "/** The new value after editing */",
      "type": { "returnType": "any", "optional": false }
    },
    "valueChanged": {
      "description": "/** Property indicating if the value of the editor has changed */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TValue = any"] },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef<TData>", "optional": false } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "TValue", "optional": false }
    },
    "data": {
      "description": "/** The user provided data for the row. */",
      "type": { "returnType": "TData", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellValueChangedEvent": {
    "oldValue": { "type": { "returnType": "any", "optional": false } },
    "newValue": { "type": { "returnType": "any", "optional": false } },
    "source": {
      "type": { "returnType": "string | undefined", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TValue = any"] },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef<TData>", "optional": false } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "TValue", "optional": false }
    },
    "data": {
      "description": "/** The user provided data for the row. */",
      "type": { "returnType": "TData", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellEditRequestEvent": {
    "oldValue": { "type": { "returnType": "any", "optional": false } },
    "newValue": { "type": { "returnType": "any", "optional": false } },
    "source": {
      "type": { "returnType": "string | undefined", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TValue = any"] },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef<TData>", "optional": false } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "TValue", "optional": false }
    },
    "data": {
      "description": "/** The user provided data for the row. */",
      "type": { "returnType": "TData", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "eventPath": {
      "description": "/** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */",
      "type": { "returnType": "EventTarget[]", "optional": true }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "AsyncTransactionsFlushed": {
    "results": {
      "description": "/** Array of result objects. for SSRM it's always list of `ServerSideTransactionResult`.\n     * For Client-Side Row Model it's a list of `RowNodeTransaction`.\n     */",
      "type": {
        "returnType": "(RowNodeTransaction<TData> | ServerSideTransactionResult)[]",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnRequestEvent": {
    "columns": { "type": { "returnType": "Column[]", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnRowGroupChangeRequestEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "columns": { "type": { "returnType": "Column[]", "optional": false } },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnPivotChangeRequestEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "columns": { "type": { "returnType": "Column[]", "optional": false } },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnValueChangeRequestEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "columns": { "type": { "returnType": "Column[]", "optional": false } },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnAggFuncChangeRequestEvent": {
    "aggFunc": { "type": { "returnType": "any", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "columns": { "type": { "returnType": "Column[]", "optional": false } },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "StoreRefreshedEvent": {
    "route": {
      "description": "/** The route of the store which has finished refreshing, undefined if root level */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ScrollVisibilityChangedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "StoreUpdatedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "LeftPinnedWidthChangedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RightPinnedWidthChangedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowContainerHeightChanged": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "DisplayedRowsChangedEvent": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CssVariablesChanged": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "IFilterLocaleText": {
    "applyFilter": { "type": { "returnType": "string", "optional": false } },
    "clearFilter": { "type": { "returnType": "string", "optional": false } },
    "resetFilter": { "type": { "returnType": "string", "optional": false } },
    "cancelFilter": { "type": { "returnType": "string", "optional": false } },
    "filterOoo": { "type": { "returnType": "string", "optional": false } },
    "empty": { "type": { "returnType": "string", "optional": false } },
    "equals": { "type": { "returnType": "string", "optional": false } },
    "notEqual": { "type": { "returnType": "string", "optional": false } },
    "lessThan": { "type": { "returnType": "string", "optional": false } },
    "greaterThan": { "type": { "returnType": "string", "optional": false } },
    "inRange": { "type": { "returnType": "string", "optional": false } },
    "inRangeStart": { "type": { "returnType": "string", "optional": false } },
    "inRangeEnd": { "type": { "returnType": "string", "optional": false } },
    "lessThanOrEqual": {
      "type": { "returnType": "string", "optional": false }
    },
    "greaterThanOrEqual": {
      "type": { "returnType": "string", "optional": false }
    },
    "contains": { "type": { "returnType": "string", "optional": false } },
    "notContains": { "type": { "returnType": "string", "optional": false } },
    "startsWith": { "type": { "returnType": "string", "optional": false } },
    "endsWith": { "type": { "returnType": "string", "optional": false } },
    "blank": { "type": { "returnType": "string", "optional": false } },
    "notBlank": { "type": { "returnType": "string", "optional": false } },
    "andCondition": { "type": { "returnType": "string", "optional": false } },
    "orCondition": { "type": { "returnType": "string", "optional": false } },
    "dateFormatOoo": { "type": { "returnType": "string", "optional": false } }
  },
  "IFilterTitleLocaleText": {
    "textFilter": { "type": { "returnType": "string", "optional": false } },
    "numberFilter": { "type": { "returnType": "string", "optional": false } },
    "dateFilter": { "type": { "returnType": "string", "optional": false } },
    "setFilter": { "type": { "returnType": "string", "optional": false } }
  },
  "FilterRequestSource": {},
  "FilterWrapper": {
    "compiledElement": { "type": { "returnType": "any", "optional": false } },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "filterPromise": {
      "type": {
        "returnType": "AgPromise<IFilterComp> | null",
        "optional": false
      }
    },
    "guiPromise": {
      "type": {
        "returnType": "AgPromise<HTMLElement | null>",
        "optional": false
      }
    }
  },
  "IFloatingFilterParent": {
    "onFloatingFilterChanged": {
      "description": "/** Notification that a new floating-filter value was input by the user.\n     *\n     * @param type operation type selected.\n     * @param value model-typed value entered.\n     */",
      "type": {
        "arguments": { "type": "string | null", "value": "any" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "InbuiltParentType": {},
  "IFloatingFilterParentCallback": {
    "meta": { "typeParams": ["P = InbuiltParentType"] }
  },
  "IFloatingFilterParams": {
    "column": {
      "description": "/** The column this filter is for. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "filterParams": {
      "description": "/** The params object passed to the filter.\n     * This is to allow the floating filter access to the configuration of the parent filter.\n     * For example, the provided filters use debounceMs from the parent filter params.\n     * */",
      "type": { "returnType": "IFilterParams", "optional": false }
    },
    "suppressFilterButton": {
      "description": "/** Boolean flag to indicate if the button in the floating filter that opens the parent filter in a popup should be displayed.\n     */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "currentParentModel": {
      "description": "/** This is a shortcut to invoke getModel on the parent filter.\n     * If the parent filter doesn't exist (filters are lazily created as needed)\n     * then it returns null rather than calling getModel() on the parent filter.\n     */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "parentFilterInstance": {
      "description": "/** Gets a reference to the parent filter. The result is returned asynchronously\n     * via a callback as the parent filter may not exist yet. If it does\n     * not exist, it is created and asynchronously returned (AG Grid itself\n     * does not create components asynchronously, however if providing a framework\n     * provided filter e.g. React, it might be).\n     *\n     * The floating filter can then call any method it likes on the parent filter.\n     * The parent filter will typically provide its own method for the floating\n     * filter to call to set the filter. For example, if creating custom filter A,\n     * it should have a method your floating A can call to set the state\n     * when the user updates via the floating filter.\n     */",
      "type": {
        "arguments": { "callback": "IFloatingFilterParentCallback<P>" },
        "returnType": "void",
        "optional": false
      }
    },
    "showParentFilter": {
      "description": "/** Shows the parent filter popup.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "meta": {
      "typeParams": ["P = InbuiltParentType", "TData = any", "TContext = any"]
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "IFloatingFilter": {
    "onParentModelChanged": {
      "description": "/** Gets called every time the parent filter changes.\n     * Your floating filter would typically refresh its UI to reflect the new filter state.\n     * The provided parentModel is what the parent filter returns from its getModel() method.\n     * The event is the FilterChangedEvent that the grid fires.\n     */",
      "type": {
        "arguments": {
          "parentModel": "any",
          "filterChangedEvent?": "FilterChangedEvent | null"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "IFloatingFilterComp": {
    "meta": { "typeParams": ["P = any"] },
    "onParentModelChanged": {
      "description": "/** Gets called every time the parent filter changes.\n     * Your floating filter would typically refresh its UI to reflect the new filter state.\n     * The provided parentModel is what the parent filter returns from its getModel() method.\n     * The event is the FilterChangedEvent that the grid fires.\n     */",
      "type": {
        "arguments": {
          "parentModel": "any",
          "filterChangedEvent?": "FilterChangedEvent | null"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. */",
      "type": {
        "arguments": { "params": "IFloatingFilterParams<P>" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "BaseFloatingFilterChange": {
    "model": {
      "type": { "returnType": "ProvidedFilterModel", "optional": false }
    },
    "apply": { "type": { "returnType": "boolean", "optional": false } }
  },
  "FloatingFilterInputService": {
    "setupGui": {
      "type": {
        "arguments": { "parentElement": "HTMLElement" },
        "returnType": "void",
        "optional": false
      }
    },
    "setEditable": {
      "type": {
        "arguments": { "editable": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "getValue": {
      "type": {
        "arguments": {},
        "returnType": "string | null | undefined",
        "optional": false
      }
    },
    "setValue": {
      "type": {
        "arguments": {
          "value": "string | null | undefined",
          "silent?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "addValueChangedListener": {
      "type": {
        "arguments": { "listener": "() => void" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ModelUnion": {},
  "DateFilterModel": {
    "filterType": {
      "description": "/** Filter type is always `'date'` */",
      "type": { "returnType": "'date'", "optional": true }
    },
    "dateFrom": {
      "description": "/** The date value(s) associated with the filter. The type is `string` and format is always\n     * `YYYY-MM-DD hh:mm:ss` e.g. 2019-05-24 00:00:00. Custom filters can have no values (hence both\n     * are optional). Range filter has two values (from and to).\n     */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "dateTo": {
      "description": "/** Range filter `to` date value.\n     */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "type": {
      "description": "/** One of the filter options, e.g. `'equals'` */",
      "type": {
        "returnType": "ISimpleFilterModelType | null",
        "optional": true
      }
    }
  },
  "DateFilterParams": { "meta": { "typeParams": ["TData = any"] } },
  "IDateFilterParams": {
    "comparator": {
      "description": "/** Required if the data for the column are not native JS `Date` objects. */",
      "type": { "returnType": "IDateComparatorFunc", "optional": true }
    },
    "browserDatePicker": {
      "description": "/** Defines whether the grid uses the browser date picker or a plain text box.\n     *  - `true`: Force the browser date picker to be used.\n     *  - `false`: Force a plain text box to be used.\n     *\n     * Default: `undefined` - If a date component is not provided, then the grid will use the browser date picker\n     * for all supported browsers and a plain text box for other browsers.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "minValidYear": {
      "description": "/** This is the minimum year that may be entered in a date field for the value to be considered valid. Default: `1000` */",
      "type": { "returnType": "number", "optional": true }
    },
    "maxValidYear": {
      "description": "/** This is the maximum year that may be entered in a date field for the value to be considered valid. Default is no restriction. */",
      "type": { "returnType": "number", "optional": true }
    },
    "inRangeFloatingFilterDateFormat": {
      "description": "/** Defines the date format for the floating filter text when an in range filter has been applied.\n     *\n     * Default: `YYYY-MM-DD`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "inRangeInclusive": {
      "description": "/** If `true`, the `'inRange'` filter option will include values equal to the start and end of the range. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInEquals": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'equals'` filter option. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInLessThan": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'lessThan'` and `'lessThanOrEqual'` filter options. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInGreaterThan": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'greaterThan'` and `'greaterThanOrEqual'` filter options. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInRange": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'inRange'` filter option. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "filterOptions": {
      "description": "/** Array of filter options to present to the user.\n     */",
      "type": {
        "returnType": "(IFilterOptionDef | ISimpleFilterModelType)[]",
        "optional": true
      }
    },
    "defaultOption": {
      "description": "/** The default filter option to be selected. */",
      "type": { "returnType": "string", "optional": true }
    },
    "defaultJoinOperator": {
      "description": "/** By default, the two conditions are combined using `AND`.\n     * You can change this default by setting this property.\n     * Options: `AND`, `OR`\n     */",
      "type": { "returnType": "JoinOperator", "optional": true }
    },
    "maxNumConditions": {
      "description": "/** Maximum number of conditions allowed in the filter.\n     * Default: `2`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "numAlwaysVisibleConditions": {
      "description": "/** By default only one condition is shown, and additional conditions are made visible when the previous conditions are entered\n     * (up to `maxNumConditions`). To have more conditions shown by default, set this to the number required.\n     * Conditions will be disabled until the previous conditions have been entered.\n     * Note that this cannot be greater than `maxNumConditions` - anything larger will be ignored. \n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "suppressAndOrCondition": {
      "description": "/** @deprecated As of v29.2 there can be more than two conditions in the filter. Use `maxNumConditions = 1` instead.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "alwaysShowBothConditions": {
      "description": "/** @deprecated As of v29.2 there can be more than two conditions in the filter. Use `numAlwaysVisibleConditions = 2` instead.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "filterPlaceholder": {
      "description": "/** Placeholder text for the filter textbox\n     */",
      "type": {
        "returnType": "FilterPlaceholderFunction | string",
        "optional": true
      }
    },
    "buttons": {
      "description": "/** Specifies the buttons to be shown in the filter, in the order they should be displayed in.\n     * The options are:\n     *\n     *  - `'apply'`: If the Apply button is present, the filter is only applied after the user hits the Apply button.\n     *  - `'clear'`: The Clear button will clear the (form) details of the filter without removing any active filters on the column.\n     *  - `'reset'`: The Reset button will clear the details of the filter and any active filters on that column.\n     *  - `'cancel'`: The Cancel button will discard any changes that have been made to the filter in the UI, restoring the applied model.\n     */",
      "type": { "returnType": "FilterButtonType[]", "optional": true }
    },
    "closeOnApply": {
      "description": "/** If the Apply button is present, the filter popup will be closed immediately when the Apply\n     * or Reset button is clicked if this is set to `true`.\n     *\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debounceMs": {
      "description": "/** Overrides the default debounce time in milliseconds for the filter. Defaults are:\n     * - `TextFilter` and `NumberFilter`: 500ms. (These filters have text field inputs, so a short delay before the input is formatted and the filtering applied is usually appropriate).\n     * - `DateFilter` and `SetFilter`: 0ms\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "readOnly": {
      "description": "/** If set to `true`, disables controls in the filter to mutate its state. Normally this would\n     * be used in conjunction with the Filter API.\n     *\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "IDateComparatorFunc": {},
  "NumberFilterModel": {
    "filterType": {
      "description": "/** Filter type is always `'number'` */",
      "type": { "returnType": "'number'", "optional": true }
    },
    "filter": {
      "description": "/** The number value(s) associated with the filter.\n     * Custom filters can have no values (hence both are optional).\n     * Range filter has two values (from and to).\n     */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "filterTo": {
      "description": "/** Range filter `to` value.\n     */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "type": {
      "description": "/** One of the filter options, e.g. `'equals'` */",
      "type": {
        "returnType": "ISimpleFilterModelType | null",
        "optional": true
      }
    }
  },
  "NumberFilterParams": { "meta": { "typeParams": ["TData = any"] } },
  "INumberFilterParams": {
    "allowedCharPattern": {
      "description": "/** When specified, the input field will be of type `text`, and this will be used as a regex of all the characters that are allowed to be typed.\n     * This will be compared against any typed character and prevent the character from appearing in the input if it does not match.\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "numberParser": {
      "description": "/** Typically used alongside `allowedCharPattern`, this provides a custom parser to convert the value entered in the filter inputs into a number that can be used for comparisons.\n     */",
      "type": {
        "arguments": { "text": "string | null" },
        "returnType": "number | null",
        "optional": true
      }
    },
    "inRangeInclusive": {
      "description": "/** If `true`, the `'inRange'` filter option will include values equal to the start and end of the range. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInEquals": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'equals'` filter option. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInLessThan": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'lessThan'` and `'lessThanOrEqual'` filter options. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInGreaterThan": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'greaterThan'` and `'greaterThanOrEqual'` filter options. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInRange": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'inRange'` filter option. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "filterOptions": {
      "description": "/** Array of filter options to present to the user.\n     */",
      "type": {
        "returnType": "(IFilterOptionDef | ISimpleFilterModelType)[]",
        "optional": true
      }
    },
    "defaultOption": {
      "description": "/** The default filter option to be selected. */",
      "type": { "returnType": "string", "optional": true }
    },
    "defaultJoinOperator": {
      "description": "/** By default, the two conditions are combined using `AND`.\n     * You can change this default by setting this property.\n     * Options: `AND`, `OR`\n     */",
      "type": { "returnType": "JoinOperator", "optional": true }
    },
    "maxNumConditions": {
      "description": "/** Maximum number of conditions allowed in the filter.\n     * Default: `2`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "numAlwaysVisibleConditions": {
      "description": "/** By default only one condition is shown, and additional conditions are made visible when the previous conditions are entered\n     * (up to `maxNumConditions`). To have more conditions shown by default, set this to the number required.\n     * Conditions will be disabled until the previous conditions have been entered.\n     * Note that this cannot be greater than `maxNumConditions` - anything larger will be ignored. \n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "suppressAndOrCondition": {
      "description": "/** @deprecated As of v29.2 there can be more than two conditions in the filter. Use `maxNumConditions = 1` instead.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "alwaysShowBothConditions": {
      "description": "/** @deprecated As of v29.2 there can be more than two conditions in the filter. Use `numAlwaysVisibleConditions = 2` instead.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "filterPlaceholder": {
      "description": "/** Placeholder text for the filter textbox\n     */",
      "type": {
        "returnType": "FilterPlaceholderFunction | string",
        "optional": true
      }
    },
    "buttons": {
      "description": "/** Specifies the buttons to be shown in the filter, in the order they should be displayed in.\n     * The options are:\n     *\n     *  - `'apply'`: If the Apply button is present, the filter is only applied after the user hits the Apply button.\n     *  - `'clear'`: The Clear button will clear the (form) details of the filter without removing any active filters on the column.\n     *  - `'reset'`: The Reset button will clear the details of the filter and any active filters on that column.\n     *  - `'cancel'`: The Cancel button will discard any changes that have been made to the filter in the UI, restoring the applied model.\n     */",
      "type": { "returnType": "FilterButtonType[]", "optional": true }
    },
    "closeOnApply": {
      "description": "/** If the Apply button is present, the filter popup will be closed immediately when the Apply\n     * or Reset button is clicked if this is set to `true`.\n     *\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debounceMs": {
      "description": "/** Overrides the default debounce time in milliseconds for the filter. Defaults are:\n     * - `TextFilter` and `NumberFilter`: 500ms. (These filters have text field inputs, so a short delay before the input is formatted and the filtering applied is usually appropriate).\n     * - `DateFilter` and `SetFilter`: 0ms\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "readOnly": {
      "description": "/** If set to `true`, disables controls in the filter to mutate its state. Normally this would\n     * be used in conjunction with the Filter API.\n     *\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "FilterButtonType": {},
  "ProvidedFilterParams": { "meta": { "typeParams": ["TData = any"] } },
  "IProvidedFilterParams": {
    "buttons": {
      "description": "/** Specifies the buttons to be shown in the filter, in the order they should be displayed in.\n     * The options are:\n     *\n     *  - `'apply'`: If the Apply button is present, the filter is only applied after the user hits the Apply button.\n     *  - `'clear'`: The Clear button will clear the (form) details of the filter without removing any active filters on the column.\n     *  - `'reset'`: The Reset button will clear the details of the filter and any active filters on that column.\n     *  - `'cancel'`: The Cancel button will discard any changes that have been made to the filter in the UI, restoring the applied model.\n     */",
      "type": { "returnType": "FilterButtonType[]", "optional": true }
    },
    "closeOnApply": {
      "description": "/** If the Apply button is present, the filter popup will be closed immediately when the Apply\n     * or Reset button is clicked if this is set to `true`.\n     *\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debounceMs": {
      "description": "/** Overrides the default debounce time in milliseconds for the filter. Defaults are:\n     * - `TextFilter` and `NumberFilter`: 500ms. (These filters have text field inputs, so a short delay before the input is formatted and the filtering applied is usually appropriate).\n     * - `DateFilter` and `SetFilter`: 0ms\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "readOnly": {
      "description": "/** If set to `true`, disables controls in the filter to mutate its state. Normally this would\n     * be used in conjunction with the Filter API.\n     *\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "IProvidedFilter": {
    "applyModel": {
      "description": "/** Applies the model shown in the UI (so that `getModel()` will now return what was in the UI\n     * when `applyModel()` was called).\n     * @param source The source of the method call. Default 'api'.\n     */",
      "type": {
        "arguments": { "source?": "'api' | 'ui' | 'rowDataUpdated'" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getModelFromUi": {
      "description": "/** Returns the filter model from the UI. If changes have been made to the UI but not yet\n     * applied, this model will reflect those changes.\n     */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "isFilterActive": {
      "description": "/** Returns `true` if the filter is currently active, otherwise `false`. \n     * If active then 1) the grid will show the filter icon in the column header \n     * and 2) the filter will be included in the filtering of the data.\n    */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "doesFilterPass": {
      "description": "/** The grid will ask each active filter, in turn, whether each row in the grid passes. If any\n     * filter fails, then the row will be excluded from the final set. The method is provided a\n     * params object with attributes node (the rodNode the grid creates that wraps the data) and data\n     * (the data object that you provided to the grid for that row).\n     */",
      "type": {
        "arguments": { "params": "IDoesFilterPassParams" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getModel": {
      "description": "/** Returns a model representing the current state of the filter, or `null` if the filter is\n     * not active. The grid calls `getModel()` on all active filters when `gridApi.getFilterModel()` is called.\n     */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "setModel": {
      "description": "/** Sets the state of the filter using the supplied model. Providing `null` as the model will\n     * de-activate the filter.\n     */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "void | AgPromise<void>",
        "optional": false
      }
    },
    "onNewRowsLoaded": {
      "description": "/** Gets called when new rows are inserted into the grid. If the filter needs to change its\n     state after rows are loaded, it can do it here. For example the set filters uses this\n     to update the list of available values to select from (e.g. 'Ireland', 'UK' etc for\n     Country filter). To get the list of available values from within this method from the\n    Client Side Row Model, use `gridApi.forEachLeafNode(callback)`.\n    */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "onAnyFilterChanged": {
      "description": "/** Called whenever any filter is changed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getModelAsString": {
      "description": "/** Optional method used by AG Grid when rendering floating filters and there isn't a floating filter\n     * associated for this filter, this will happen if you create a custom filter and NOT a custom floating\n     * filter.\n     */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "string",
        "optional": true
      }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "afterGuiDetached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been removed from the screen.\n     * If a parent popup is opened and closed (e.g. for filters), this method is called each time the component is hidden.\n     * This is useful for any logic to reset the UI state back to the model before the component is reopened.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "ScalarFilterParams": { "meta": { "typeParams": ["TData = any"] } },
  "IScalarFilterParams": {
    "inRangeInclusive": {
      "description": "/** If `true`, the `'inRange'` filter option will include values equal to the start and end of the range. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInEquals": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'equals'` filter option. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInLessThan": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'lessThan'` and `'lessThanOrEqual'` filter options. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInGreaterThan": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'greaterThan'` and `'greaterThanOrEqual'` filter options. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInRange": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'inRange'` filter option. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "filterOptions": {
      "description": "/** Array of filter options to present to the user.\n     */",
      "type": {
        "returnType": "(IFilterOptionDef | ISimpleFilterModelType)[]",
        "optional": true
      }
    },
    "defaultOption": {
      "description": "/** The default filter option to be selected. */",
      "type": { "returnType": "string", "optional": true }
    },
    "defaultJoinOperator": {
      "description": "/** By default, the two conditions are combined using `AND`.\n     * You can change this default by setting this property.\n     * Options: `AND`, `OR`\n     */",
      "type": { "returnType": "JoinOperator", "optional": true }
    },
    "maxNumConditions": {
      "description": "/** Maximum number of conditions allowed in the filter.\n     * Default: `2`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "numAlwaysVisibleConditions": {
      "description": "/** By default only one condition is shown, and additional conditions are made visible when the previous conditions are entered\n     * (up to `maxNumConditions`). To have more conditions shown by default, set this to the number required.\n     * Conditions will be disabled until the previous conditions have been entered.\n     * Note that this cannot be greater than `maxNumConditions` - anything larger will be ignored. \n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "suppressAndOrCondition": {
      "description": "/** @deprecated As of v29.2 there can be more than two conditions in the filter. Use `maxNumConditions = 1` instead.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "alwaysShowBothConditions": {
      "description": "/** @deprecated As of v29.2 there can be more than two conditions in the filter. Use `numAlwaysVisibleConditions = 2` instead.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "filterPlaceholder": {
      "description": "/** Placeholder text for the filter textbox\n     */",
      "type": {
        "returnType": "FilterPlaceholderFunction | string",
        "optional": true
      }
    },
    "buttons": {
      "description": "/** Specifies the buttons to be shown in the filter, in the order they should be displayed in.\n     * The options are:\n     *\n     *  - `'apply'`: If the Apply button is present, the filter is only applied after the user hits the Apply button.\n     *  - `'clear'`: The Clear button will clear the (form) details of the filter without removing any active filters on the column.\n     *  - `'reset'`: The Reset button will clear the details of the filter and any active filters on that column.\n     *  - `'cancel'`: The Cancel button will discard any changes that have been made to the filter in the UI, restoring the applied model.\n     */",
      "type": { "returnType": "FilterButtonType[]", "optional": true }
    },
    "closeOnApply": {
      "description": "/** If the Apply button is present, the filter popup will be closed immediately when the Apply\n     * or Reset button is clicked if this is set to `true`.\n     *\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debounceMs": {
      "description": "/** Overrides the default debounce time in milliseconds for the filter. Defaults are:\n     * - `TextFilter` and `NumberFilter`: 500ms. (These filters have text field inputs, so a short delay before the input is formatted and the filtering applied is usually appropriate).\n     * - `DateFilter` and `SetFilter`: 0ms\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "readOnly": {
      "description": "/** If set to `true`, disables controls in the filter to mutate its state. Normally this would\n     * be used in conjunction with the Filter API.\n     *\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "Comparator": { "meta": { "typeParams": ["T"] } },
  "JoinOperator": {},
  "ISimpleFilter": {
    "applyModel": {
      "description": "/** Applies the model shown in the UI (so that `getModel()` will now return what was in the UI\n     * when `applyModel()` was called).\n     * @param source The source of the method call. Default 'api'.\n     */",
      "type": {
        "arguments": { "source?": "'api' | 'ui' | 'rowDataUpdated'" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getModelFromUi": {
      "description": "/** Returns the filter model from the UI. If changes have been made to the UI but not yet\n     * applied, this model will reflect those changes.\n     */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "isFilterActive": {
      "description": "/** Returns `true` if the filter is currently active, otherwise `false`. \n     * If active then 1) the grid will show the filter icon in the column header \n     * and 2) the filter will be included in the filtering of the data.\n    */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "doesFilterPass": {
      "description": "/** The grid will ask each active filter, in turn, whether each row in the grid passes. If any\n     * filter fails, then the row will be excluded from the final set. The method is provided a\n     * params object with attributes node (the rodNode the grid creates that wraps the data) and data\n     * (the data object that you provided to the grid for that row).\n     */",
      "type": {
        "arguments": { "params": "IDoesFilterPassParams" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getModel": {
      "description": "/** Returns a model representing the current state of the filter, or `null` if the filter is\n     * not active. The grid calls `getModel()` on all active filters when `gridApi.getFilterModel()` is called.\n     */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "setModel": {
      "description": "/** Sets the state of the filter using the supplied model. Providing `null` as the model will\n     * de-activate the filter.\n     */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "void | AgPromise<void>",
        "optional": false
      }
    },
    "onNewRowsLoaded": {
      "description": "/** Gets called when new rows are inserted into the grid. If the filter needs to change its\n     state after rows are loaded, it can do it here. For example the set filters uses this\n     to update the list of available values to select from (e.g. 'Ireland', 'UK' etc for\n     Country filter). To get the list of available values from within this method from the\n    Client Side Row Model, use `gridApi.forEachLeafNode(callback)`.\n    */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "onAnyFilterChanged": {
      "description": "/** Called whenever any filter is changed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getModelAsString": {
      "description": "/** Optional method used by AG Grid when rendering floating filters and there isn't a floating filter\n     * associated for this filter, this will happen if you create a custom filter and NOT a custom floating\n     * filter.\n     */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "string",
        "optional": true
      }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "afterGuiDetached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been removed from the screen.\n     * If a parent popup is opened and closed (e.g. for filters), this method is called each time the component is hidden.\n     * This is useful for any logic to reset the UI state back to the model before the component is reopened.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "onFloatingFilterChanged": {
      "description": "/** Notification that a new floating-filter value was input by the user.\n     *\n     * @param type operation type selected.\n     * @param value model-typed value entered.\n     */",
      "type": {
        "arguments": { "type": "string | null", "value": "any" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "IFilterPlaceholderFunctionParams": {
    "filterOptionKey": {
      "description": "/** The filter option key\n     */",
      "type": { "returnType": "ISimpleFilterModelType", "optional": false }
    },
    "filterOption": {
      "description": "/** The filter option name as localised text\n     */",
      "type": { "returnType": "string", "optional": false }
    },
    "placeholder": {
      "description": "/** The default placeholder text\n     */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FilterPlaceholderFunction": {},
  "SimpleFilterParams": { "meta": { "typeParams": ["TData = any"] } },
  "ISimpleFilterParams": {
    "filterOptions": {
      "description": "/** Array of filter options to present to the user.\n     */",
      "type": {
        "returnType": "(IFilterOptionDef | ISimpleFilterModelType)[]",
        "optional": true
      }
    },
    "defaultOption": {
      "description": "/** The default filter option to be selected. */",
      "type": { "returnType": "string", "optional": true }
    },
    "defaultJoinOperator": {
      "description": "/** By default, the two conditions are combined using `AND`.\n     * You can change this default by setting this property.\n     * Options: `AND`, `OR`\n     */",
      "type": { "returnType": "JoinOperator", "optional": true }
    },
    "maxNumConditions": {
      "description": "/** Maximum number of conditions allowed in the filter.\n     * Default: `2`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "numAlwaysVisibleConditions": {
      "description": "/** By default only one condition is shown, and additional conditions are made visible when the previous conditions are entered\n     * (up to `maxNumConditions`). To have more conditions shown by default, set this to the number required.\n     * Conditions will be disabled until the previous conditions have been entered.\n     * Note that this cannot be greater than `maxNumConditions` - anything larger will be ignored. \n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "suppressAndOrCondition": {
      "description": "/** @deprecated As of v29.2 there can be more than two conditions in the filter. Use `maxNumConditions = 1` instead.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "alwaysShowBothConditions": {
      "description": "/** @deprecated As of v29.2 there can be more than two conditions in the filter. Use `numAlwaysVisibleConditions = 2` instead.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "filterPlaceholder": {
      "description": "/** Placeholder text for the filter textbox\n     */",
      "type": {
        "returnType": "FilterPlaceholderFunction | string",
        "optional": true
      }
    },
    "buttons": {
      "description": "/** Specifies the buttons to be shown in the filter, in the order they should be displayed in.\n     * The options are:\n     *\n     *  - `'apply'`: If the Apply button is present, the filter is only applied after the user hits the Apply button.\n     *  - `'clear'`: The Clear button will clear the (form) details of the filter without removing any active filters on the column.\n     *  - `'reset'`: The Reset button will clear the details of the filter and any active filters on that column.\n     *  - `'cancel'`: The Cancel button will discard any changes that have been made to the filter in the UI, restoring the applied model.\n     */",
      "type": { "returnType": "FilterButtonType[]", "optional": true }
    },
    "closeOnApply": {
      "description": "/** If the Apply button is present, the filter popup will be closed immediately when the Apply\n     * or Reset button is clicked if this is set to `true`.\n     *\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debounceMs": {
      "description": "/** Overrides the default debounce time in milliseconds for the filter. Defaults are:\n     * - `TextFilter` and `NumberFilter`: 500ms. (These filters have text field inputs, so a short delay before the input is formatted and the filtering applied is usually appropriate).\n     * - `DateFilter` and `SetFilter`: 0ms\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "readOnly": {
      "description": "/** If set to `true`, disables controls in the filter to mutate its state. Normally this would\n     * be used in conjunction with the Filter API.\n     *\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "ISimpleFilterModelType": {},
  "ISimpleFilterModel": {
    "type": {
      "description": "/** One of the filter options, e.g. `'equals'` */",
      "type": {
        "returnType": "ISimpleFilterModelType | null",
        "optional": true
      }
    },
    "filterType": { "type": { "returnType": "string", "optional": true } }
  },
  "ICombinedSimpleModel": {
    "operator": { "type": { "returnType": "JoinOperator", "optional": false } },
    "condition1": {
      "description": "/** @deprecated As of v29.2, supply as the first element of `conditions`. */",
      "type": { "returnType": "M", "optional": false }
    },
    "condition2": {
      "description": "/** @deprecated As of v29.2, supply as the second element of `conditions`. */",
      "type": { "returnType": "M", "optional": false }
    },
    "conditions": {
      "description": "/** Will be mandatory in a future release. */",
      "type": { "returnType": "M[]", "optional": true }
    },
    "meta": { "typeParams": ["M extends ISimpleFilterModel"] },
    "filterType": { "type": { "returnType": "string", "optional": true } }
  },
  "Tuple": { "meta": { "typeParams": ["T"] } },
  "TextFilterModel": {
    "filterType": {
      "description": "/** Filter type is always `'text'` */",
      "type": { "returnType": "'text'", "optional": true }
    },
    "filter": {
      "description": "/** The text value associated with the filter.\n     * It's optional as custom filters may not have a text value.\n     * */",
      "type": { "returnType": "string | null", "optional": true }
    },
    "filterTo": {
      "description": "/** The 2nd text value associated with the filter, if supported.\n     * */",
      "type": { "returnType": "string | null", "optional": true }
    },
    "type": {
      "description": "/** One of the filter options, e.g. `'equals'` */",
      "type": {
        "returnType": "ISimpleFilterModelType | null",
        "optional": true
      }
    }
  },
  "TextMatcherParams": {
    "filterOption": {
      "description": "/** The applicable filter option being tested.\n     * One of: `equals`, `notEqual`, `contains`, `notContains`, `startsWith`, `endsWith`.\n     */",
      "type": { "returnType": "string | null | undefined", "optional": false }
    },
    "value": {
      "description": "/** The value about to be filtered.\n     * If this column has a value getter, this value will be coming from the value getter,\n     * otherwise it is the raw value injected into the grid.\n     * If a `textFormatter` is provided, this value will have been formatted.\n     * If no `textFormatter` is provided and `caseSensitive` is not provided or is `false`,\n     * the value will have been converted to lower case.\n     */",
      "type": { "returnType": "any", "optional": false }
    },
    "filterText": {
      "description": "/** The value to filter by.\n     * If a `textFormatter` is provided, this value will have been formatted.\n     * If no `textFormatter` is provided and `caseSensitive` is not provided or is `false`,\n     * the value will have been converted to lower case.\n     */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "textFormatter": {
      "type": { "returnType": "TextFormatter", "optional": true }
    },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "IRowNode<TData> | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "TData", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "meta": { "typeParams": ["TData = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "TextMatcher": {},
  "TextFormatter": {},
  "TextFilterParams": { "meta": { "typeParams": ["TData = any"] } },
  "ITextFilterParams": {
    "textMatcher": {
      "description": "/** Used to override how to filter based on the user input.\n     * Returns `true` if the value passes the filter, otherwise `false`.\n     */",
      "type": { "returnType": "TextMatcher", "optional": true }
    },
    "caseSensitive": {
      "description": "/** By default, text filtering is case-insensitive. Set this to `true` to make text filtering case-sensitive.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "textFormatter": {
      "description": "/** Formats the text before applying the filter compare logic.\n     * Useful if you want to substitute accented characters, for example.\n     */",
      "type": {
        "arguments": { "from": "string" },
        "returnType": "string | null",
        "optional": true
      }
    },
    "trimInput": {
      "description": "/** If `true`, the input that the user enters will be trimmed when the filter is applied, so any leading or trailing whitespace will be removed.\n     * If only whitespace is entered, it will be left as-is.\n     * If you enable `trimInput`, it is best to also increase the `debounceMs` to give users more time to enter text.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "filterOptions": {
      "description": "/** Array of filter options to present to the user.\n     */",
      "type": {
        "returnType": "(IFilterOptionDef | ISimpleFilterModelType)[]",
        "optional": true
      }
    },
    "defaultOption": {
      "description": "/** The default filter option to be selected. */",
      "type": { "returnType": "string", "optional": true }
    },
    "defaultJoinOperator": {
      "description": "/** By default, the two conditions are combined using `AND`.\n     * You can change this default by setting this property.\n     * Options: `AND`, `OR`\n     */",
      "type": { "returnType": "JoinOperator", "optional": true }
    },
    "maxNumConditions": {
      "description": "/** Maximum number of conditions allowed in the filter.\n     * Default: `2`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "numAlwaysVisibleConditions": {
      "description": "/** By default only one condition is shown, and additional conditions are made visible when the previous conditions are entered\n     * (up to `maxNumConditions`). To have more conditions shown by default, set this to the number required.\n     * Conditions will be disabled until the previous conditions have been entered.\n     * Note that this cannot be greater than `maxNumConditions` - anything larger will be ignored. \n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "suppressAndOrCondition": {
      "description": "/** @deprecated As of v29.2 there can be more than two conditions in the filter. Use `maxNumConditions = 1` instead.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "alwaysShowBothConditions": {
      "description": "/** @deprecated As of v29.2 there can be more than two conditions in the filter. Use `numAlwaysVisibleConditions = 2` instead.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "filterPlaceholder": {
      "description": "/** Placeholder text for the filter textbox\n     */",
      "type": {
        "returnType": "FilterPlaceholderFunction | string",
        "optional": true
      }
    },
    "buttons": {
      "description": "/** Specifies the buttons to be shown in the filter, in the order they should be displayed in.\n     * The options are:\n     *\n     *  - `'apply'`: If the Apply button is present, the filter is only applied after the user hits the Apply button.\n     *  - `'clear'`: The Clear button will clear the (form) details of the filter without removing any active filters on the column.\n     *  - `'reset'`: The Reset button will clear the details of the filter and any active filters on that column.\n     *  - `'cancel'`: The Cancel button will discard any changes that have been made to the filter in the UI, restoring the applied model.\n     */",
      "type": { "returnType": "FilterButtonType[]", "optional": true }
    },
    "closeOnApply": {
      "description": "/** If the Apply button is present, the filter popup will be closed immediately when the Apply\n     * or Reset button is clicked if this is set to `true`.\n     *\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debounceMs": {
      "description": "/** Overrides the default debounce time in milliseconds for the filter. Defaults are:\n     * - `TextFilter` and `NumberFilter`: 500ms. (These filters have text field inputs, so a short delay before the input is formatted and the filtering applied is usually appropriate).\n     * - `DateFilter` and `SetFilter`: 0ms\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "readOnly": {
      "description": "/** If set to `true`, disables controls in the filter to mutate its state. Normally this would\n     * be used in conjunction with the Filter API.\n     *\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "GridParams": {
    "globalEventListener": {
      "type": { "returnType": "Function", "optional": true }
    },
    "frameworkOverrides": {
      "type": { "returnType": "IFrameworkOverrides", "optional": true }
    },
    "providedBeanInstances": {
      "type": { "returnType": "{ [key: string]: any; }", "optional": true }
    },
    "modules": { "type": { "returnType": "Module[]", "optional": true } }
  },
  "DetailGridInfo": {
    "id": {
      "description": "/** Id of the detail grid, the format is `detail_{ROW-ID}`,\n     * where `ROW-ID` is the `id` of the parent row.\n     */",
      "type": { "returnType": "string", "optional": false }
    },
    "api": {
      "description": "/** Grid api of the detail grid. */",
      "type": { "returnType": "GridApi", "optional": true }
    },
    "columnApi": {
      "description": "/** Column api of the detail grid. */",
      "type": { "returnType": "ColumnApi", "optional": true }
    }
  },
  "StartEditingCellParams": {
    "rowIndex": {
      "description": "/** The row index of the row to start editing */",
      "type": { "returnType": "number", "optional": false }
    },
    "colKey": {
      "description": "/** The column key of the row to start editing */",
      "type": { "returnType": "string | Column", "optional": false }
    },
    "rowPinned": {
      "description": "/** Set to `'top'` or `'bottom'` to start editing a pinned row */",
      "type": { "returnType": "RowPinnedType", "optional": true }
    },
    "key": {
      "description": "/** The key to pass to the cell editor */",
      "type": { "returnType": "string", "optional": true }
    },
    "charPress": {
      "description": "/** The charPress to pass to the cell editor */",
      "type": { "returnType": "string", "optional": true }
    }
  },
  "RowAnimationCssClasses": {},
  "IGridBodyComp": {
    "setColumnMovingCss": {
      "type": {
        "arguments": { "cssClass": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setCellSelectableCss": {
      "type": {
        "arguments": { "cssClass": "string | null", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setTopHeight": {
      "type": {
        "arguments": { "height": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "setTopDisplay": {
      "type": {
        "arguments": { "display": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setBottomHeight": {
      "type": {
        "arguments": { "height": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "setBottomDisplay": {
      "type": {
        "arguments": { "display": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setStickyTopHeight": {
      "type": {
        "arguments": { "height": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setStickyTopTop": {
      "type": {
        "arguments": { "offsetTop": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setStickyTopWidth": {
      "type": {
        "arguments": { "width": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setColumnCount": {
      "type": {
        "arguments": { "count": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRowCount": {
      "type": {
        "arguments": { "count": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRowAnimationCssOnBodyViewport": {
      "type": {
        "arguments": { "cssClass": "string", "animate": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setAlwaysVerticalScrollClass": {
      "type": {
        "arguments": { "cssClass": "string | null", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setPinnedTopBottomOverflowY": {
      "type": {
        "arguments": { "overflow": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "registerBodyViewportResizeListener": {
      "type": {
        "arguments": { "listener": "(() => void)" },
        "returnType": "void",
        "optional": false
      }
    },
    "setBodyViewportWidth": {
      "type": {
        "arguments": { "width": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "updateLayoutClasses": {
      "type": {
        "arguments": {
          "layoutClass": "string",
          "params": "UpdateLayoutClassesParams"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "NavigateParams": {
    "scrollIndex": {
      "description": "/** The rowIndex to vertically scroll to. */",
      "type": { "returnType": "number", "optional": false }
    },
    "scrollType": {
      "description": "/** The position to put scroll index. */",
      "type": { "returnType": "'top' | 'bottom' | null", "optional": false }
    },
    "scrollColumn": {
      "description": "/**  The column to horizontally scroll to. */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "focusIndex": {
      "description": "/** For page up/down, we want to scroll to one row/column but focus another (ie. scrollRow could be stub). */",
      "type": { "returnType": "number", "optional": false }
    },
    "focusColumn": { "type": { "returnType": "Column", "optional": false } },
    "isAsync": { "type": { "returnType": "boolean", "optional": true } }
  },
  "RowContainerName": {},
  "RowContainerType": {},
  "IRowContainerComp": {
    "setViewportHeight": {
      "type": {
        "arguments": { "height": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRowCtrls": {
      "type": {
        "arguments": { "rowCtrls": "RowCtrl[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "setDomOrder": {
      "type": {
        "arguments": { "domOrder": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setContainerWidth": {
      "type": {
        "arguments": { "width": "string" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "RowDropZoneEvents": {
    "onDragEnter": {
      "description": "/** Callback function that will be executed when the rowDrag enters the target. */",
      "type": {
        "arguments": { "params": "RowDragEnterEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onDragLeave": {
      "description": "/** Callback function that will be executed when the rowDrag leaves the target */",
      "type": {
        "arguments": { "params": "RowDragLeaveEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onDragging": {
      "description": "/** Callback function that will be executed when the rowDrag is dragged inside the target.\n     * Note: this gets called multiple times.\n     */",
      "type": {
        "arguments": { "params": "RowDragMoveEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onDragStop": {
      "description": "/** Callback function that will be executed when the rowDrag drops rows within the target. */",
      "type": {
        "arguments": { "params": "RowDragEndEvent" },
        "returnType": "void",
        "optional": true
      }
    }
  },
  "RowDropZoneParams": {
    "getContainer": {
      "description": "/** A callback method that returns the DropZone HTMLElement. */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "onDragEnter": {
      "description": "/** Callback function that will be executed when the rowDrag enters the target. */",
      "type": {
        "arguments": { "params": "RowDragEnterEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onDragLeave": {
      "description": "/** Callback function that will be executed when the rowDrag leaves the target */",
      "type": {
        "arguments": { "params": "RowDragLeaveEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onDragging": {
      "description": "/** Callback function that will be executed when the rowDrag is dragged inside the target.\n     * Note: this gets called multiple times.\n     */",
      "type": {
        "arguments": { "params": "RowDragMoveEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onDragStop": {
      "description": "/** Callback function that will be executed when the rowDrag drops rows within the target. */",
      "type": {
        "arguments": { "params": "RowDragEndEvent" },
        "returnType": "void",
        "optional": true
      }
    }
  },
  "SetScrollsVisibleParams": {
    "horizontalScrollShowing": {
      "type": { "returnType": "boolean", "optional": false }
    },
    "verticalScrollShowing": {
      "type": { "returnType": "boolean", "optional": false }
    }
  },
  "IGridComp": {
    "setRtlClass": {
      "type": {
        "arguments": { "cssClass": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "destroyGridUi": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "forceFocusOutOfContainer": {
      "type": {
        "arguments": { "up": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "addOrRemoveKeyboardFocusClass": {
      "type": {
        "arguments": { "value": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "getFocusableContainers": {
      "type": {
        "arguments": {},
        "returnType": "HTMLElement[]",
        "optional": false
      }
    },
    "setCursor": {
      "type": {
        "arguments": { "value": "string | null" },
        "returnType": "void",
        "optional": false
      }
    },
    "setUserSelect": {
      "type": {
        "arguments": { "value": "string | null" },
        "returnType": "void",
        "optional": false
      }
    },
    "updateLayoutClasses": {
      "type": {
        "arguments": {
          "layoutClass": "string",
          "params": "UpdateLayoutClassesParams"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "GetKeys": { "meta": { "typeParams": ["T", "U"] } },
  "KeysOfType": { "meta": { "typeParams": ["U"] } },
  "BooleanProps": {},
  "NumberProps": {},
  "NoArgFuncs": {},
  "AnyArgFuncs": {},
  "CallbackProps": {},
  "NonPrimitiveProps": {},
  "ExtractParamsFromCallback": { "meta": { "typeParams": ["TCallback"] } },
  "ExtractReturnTypeFromCallback": { "meta": { "typeParams": ["TCallback"] } },
  "WrappedCallback": {
    "meta": {
      "typeParams": [
        "K extends CallbackProps",
        "OriginalCallback extends GridOptions[K]"
      ]
    }
  },
  "PropertyChangedEvent": {
    "type": {
      "type": { "returnType": "keyof GridOptions", "optional": false }
    },
    "currentValue": { "type": { "returnType": "any", "optional": false } },
    "previousValue": { "type": { "returnType": "any", "optional": false } }
  },
  "PropertyChangedListener": {
    "meta": { "typeParams": ["T extends PropertyChangedEvent"] }
  },
  "DeprecatedReference": { "meta": { "typeParams": ["T"] } },
  "IAbstractHeaderCellComp": {},
  "IHeaderCellComp": {
    "setWidth": {
      "type": {
        "arguments": { "width": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setColId": {
      "type": {
        "arguments": { "id": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setAriaDescription": {
      "type": {
        "arguments": { "description?": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setAriaSort": {
      "type": {
        "arguments": { "sort?": "ColumnSortState" },
        "returnType": "void",
        "optional": false
      }
    },
    "setUserCompDetails": {
      "type": {
        "arguments": { "compDetails": "UserCompDetails" },
        "returnType": "void",
        "optional": false
      }
    },
    "getUserCompInstance": {
      "type": {
        "arguments": {},
        "returnType": "IHeader | undefined",
        "optional": false
      }
    },
    "setTitle": {
      "type": {
        "arguments": { "title": "string | undefined" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "IHeaderParams": {
    "column": {
      "description": "/** The column the header is for. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "displayName": {
      "description": "/** The name to display for the column.\n     * If the column is using a headerValueGetter, the displayName will take this into account.\n     */",
      "type": { "returnType": "string", "optional": false }
    },
    "enableSorting": {
      "description": "/** Whether sorting is enabled for the column.\n     * Only put sort logic into your header if this is true.\n     */",
      "type": { "returnType": "boolean | undefined", "optional": false }
    },
    "enableMenu": {
      "description": "/** Whether menu is enabled for the column.\n     * Only display a menu button in your header if this is true.\n     */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "showColumnMenu": {
      "description": "/** Callback to request the grid to show the column menu.\n     * Pass in the html element of the column menu to have the\n     *  grid position the menu over the button.\n     */",
      "type": {
        "arguments": { "source": "HTMLElement" },
        "returnType": "void",
        "optional": false
      }
    },
    "progressSort": {
      "description": "/** Callback to progress the sort for this column.\n     * The grid will decide the next sort direction eg ascending, descending or 'no sort'.\n     * Pass `multiSort=true` if you want to do a multi sort (eg user has Shift held down when they click).\n     */",
      "type": {
        "arguments": { "multiSort?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setSort": {
      "description": "/** Callback to set the sort for this column.\n     * Pass the sort direction to use ignoring the current sort eg one of 'asc', 'desc' or null (for no sort).\n     * Pass `multiSort=true` if you want to do a multi sort (eg user has Shift held down when they click)\n     */",
      "type": {
        "arguments": { "sort": "SortDirection", "multiSort?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "template": {
      "description": "/** Custom header template if provided to `headerComponentParams`, otherwise will be `undefined`. See [Header Templates](https://ag-grid.com/javascript-data-grid/column-headers/#header-templates) */",
      "type": { "returnType": "string", "optional": true }
    },
    "eGridHeader": {
      "description": "/** The header the grid provides.\n     * The custom header component is a child of the grid provided header.\n     * The grid's header component is what contains the grid managed functionality such as resizing, keyboard navigation etc.\n     * This is provided should you want to make changes to this cell,\n     * eg add ARIA tags, or add keyboard event listener (as focus goes here when navigating to the header).\n     */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "IHeader": {
    "refresh": {
      "description": "/** Get the header to refresh. Gets called whenever Column Defs are updated. */",
      "type": {
        "arguments": { "params": "IHeaderParams" },
        "returnType": "boolean",
        "optional": false
      }
    }
  },
  "IHeaderComp": {
    "refresh": {
      "description": "/** Get the header to refresh. Gets called whenever Column Defs are updated. */",
      "type": {
        "arguments": { "params": "IHeaderParams" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. */",
      "type": {
        "arguments": { "params": "IHeaderParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "SelectionCount": {
    "selected": { "type": { "returnType": "number", "optional": false } },
    "notSelected": { "type": { "returnType": "number", "optional": false } }
  },
  "IHeaderGroupCellComp": {
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setResizableDisplayed": {
      "type": {
        "arguments": { "displayed": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setWidth": {
      "type": {
        "arguments": { "width": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setColId": {
      "type": {
        "arguments": { "id": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setAriaExpanded": {
      "type": {
        "arguments": { "expanded": "'true' | 'false' | undefined" },
        "returnType": "void",
        "optional": false
      }
    },
    "setUserCompDetails": {
      "type": {
        "arguments": { "compDetails": "UserCompDetails" },
        "returnType": "void",
        "optional": false
      }
    },
    "setTitle": {
      "type": {
        "arguments": { "title": "string | undefined" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "IHeaderGroupParams": {
    "columnGroup": {
      "description": "/** The column group the header is for. */",
      "type": { "returnType": "ColumnGroup", "optional": false }
    },
    "displayName": {
      "description": "/** The text label to render.\n     * If the column is using a headerValueGetter, the displayName will take this into account.\n     */",
      "type": { "returnType": "string", "optional": false }
    },
    "setExpanded": {
      "description": "/** Opens / closes the column group */",
      "type": {
        "arguments": { "expanded": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "IHeaderGroup": {},
  "IHeaderGroupComp": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. */",
      "type": {
        "arguments": { "params": "IHeaderGroupParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "IHeaderFilterCellComp": {
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "addOrRemoveBodyCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setButtonWrapperDisplayed": {
      "type": {
        "arguments": { "displayed": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setCompDetails": {
      "type": {
        "arguments": { "compDetails": "UserCompDetails" },
        "returnType": "void",
        "optional": false
      }
    },
    "getFloatingFilterComp": {
      "type": {
        "arguments": {},
        "returnType": "AgPromise<IFloatingFilter> | null",
        "optional": false
      }
    },
    "setWidth": {
      "type": {
        "arguments": { "width": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setMenuIcon": {
      "type": {
        "arguments": { "icon": "HTMLElement" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "DropListener": {
    "getIconName": {
      "type": {
        "arguments": {},
        "returnType": "string | null",
        "optional": false
      }
    },
    "onDragEnter": {
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "onDragLeave": {
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "onDragging": {
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "onDragStop": {
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "HeaderNavigationDirection": {},
  "HeaderPosition": {
    "headerRowIndex": {
      "description": "/** A number from 0 to n, where n is the last header row the grid is rendering */",
      "type": { "returnType": "number", "optional": false }
    },
    "column": {
      "description": "/** The grid column or column group */",
      "type": { "returnType": "Column | ColumnGroup", "optional": false }
    }
  },
  "HorizontalResizeParams": {
    "eResizeBar": {
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "dragStartPixels": { "type": { "returnType": "number", "optional": true } },
    "onResizeStart": {
      "type": {
        "arguments": { "shiftKey": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "onResizing": {
      "type": {
        "arguments": { "delta": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "onResizeEnd": {
      "type": {
        "arguments": { "delta": "number" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "IGridHeaderComp": {
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setHeightAndMinHeight": {
      "type": {
        "arguments": { "height": "string" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "HeaderRowType": {},
  "IHeaderRowComp": {
    "setTransform": {
      "type": {
        "arguments": { "transform": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setTop": {
      "type": {
        "arguments": { "top": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setHeight": {
      "type": {
        "arguments": { "height": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setHeaderCtrls": {
      "type": {
        "arguments": { "ctrls": "AbstractHeaderCellCtrl[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "setWidth": {
      "type": {
        "arguments": { "width": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setAriaRowIndex": {
      "type": {
        "arguments": { "rowIndex": "number" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "IHeaderRowContainerComp": {
    "setCenterWidth": {
      "type": {
        "arguments": { "width": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setViewportScrollLeft": {
      "type": {
        "arguments": { "left": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "setPinnedContainerWidth": {
      "type": {
        "arguments": { "width": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setDisplayed": {
      "type": {
        "arguments": { "displayed": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setCtrls": {
      "type": {
        "arguments": { "ctrls": "HeaderRowCtrl[]" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ILogger": {
    "log": {
      "type": {
        "arguments": { "message": "string" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "BaseExportParams": {
    "allColumns": {
      "description": "/** If `true`, all columns will be exported in the order they appear in the columnDefs.\n     * When `false` only the columns currently being displayed will be exported.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "columnKeys": {
      "description": "/** Provide a list (an array) of column keys or Column objects if you want to export specific columns.\n     */",
      "type": { "returnType": "(string | Column)[]", "optional": true }
    },
    "rowPositions": {
      "description": "/** Row node positions. */",
      "type": { "returnType": "RowPosition[]", "optional": true }
    },
    "fileName": {
      "description": "/** String to use as the file name.\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "exportedRows": {
      "description": "/** Determines whether rows are exported before being filtered and sorted.\n     * Default: `filteredAndSorted`\n     */",
      "type": { "returnType": "'all' | 'filteredAndSorted'", "optional": true }
    },
    "onlySelected": {
      "description": "/** Export only selected rows.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "onlySelectedAllPages": {
      "description": "/** Only export selected rows including other pages (only makes sense when using pagination).\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipColumnGroupHeaders": {
      "description": "/** Set to `true` to exclude header column groups.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipColumnHeaders": {
      "description": "/** Set to `true` if you don't want to export column headers.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipRowGroups": {
      "description": "/** Set to `true` to skip row group headers if grouping rows. Only relevant when grouping rows.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipPinnedTop": {
      "description": "/** Set to `true` to suppress exporting rows pinned to the top of the grid.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipPinnedBottom": {
      "description": "/** Set to `true` to suppress exporting rows pinned to the bottom of the grid.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "shouldRowBeSkipped": {
      "description": "/** A callback function that will be invoked once per row in the grid. Return true to omit the row from the export.\n     */",
      "type": {
        "arguments": { "params": "ShouldRowBeSkippedParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "processCellCallback": {
      "description": "/** A callback function invoked once per cell in the grid. Return a string value to be displayed in the export. For example this is useful for formatting date values.\n     */",
      "type": {
        "arguments": { "params": "ProcessCellForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processHeaderCallback": {
      "description": "/** A callback function invoked once per column. Return a string to be displayed in the column header.\n     */",
      "type": {
        "arguments": { "params": "ProcessHeaderForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processGroupHeaderCallback": {
      "description": "/** A callback function invoked once per column group. Return a `string` to be displayed in the column group header.\n     * Note that column groups are exported by default, this option will not work with `skipColumnGroupHeaders=true`.\n     */",
      "type": {
        "arguments": { "params": "ProcessGroupHeaderForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processRowGroupCallback": {
      "description": "/** A callback function invoked once per row group. Return a `string` to be displayed in the group cell.\n     */",
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "columnGroups": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipGroups": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipHeader": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "ExportParams": {
    "prependContent": {
      "description": "/** Content to put at the top of the exported sheet.\n     */",
      "type": { "returnType": "T", "optional": true }
    },
    "appendContent": {
      "description": "/** Content to put at the bottom of the exported sheet.\n     */",
      "type": { "returnType": "T", "optional": true }
    },
    "customHeader": {
      "description": "/** @deprecated Use prependContent\n     */",
      "type": { "returnType": "T", "optional": true }
    },
    "customFooter": {
      "description": "/** @deprecated Use appendContent\n     */",
      "type": { "returnType": "T", "optional": true }
    },
    "getCustomContentBelowRow": {
      "description": "/** A callback function to return content to be inserted below a row in the export. */",
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "T | undefined",
        "optional": true
      }
    },
    "meta": { "typeParams": ["T"] },
    "allColumns": {
      "description": "/** If `true`, all columns will be exported in the order they appear in the columnDefs.\n     * When `false` only the columns currently being displayed will be exported.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "columnKeys": {
      "description": "/** Provide a list (an array) of column keys or Column objects if you want to export specific columns.\n     */",
      "type": { "returnType": "(string | Column)[]", "optional": true }
    },
    "rowPositions": {
      "description": "/** Row node positions. */",
      "type": { "returnType": "RowPosition[]", "optional": true }
    },
    "fileName": {
      "description": "/** String to use as the file name.\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "exportedRows": {
      "description": "/** Determines whether rows are exported before being filtered and sorted.\n     * Default: `filteredAndSorted`\n     */",
      "type": { "returnType": "'all' | 'filteredAndSorted'", "optional": true }
    },
    "onlySelected": {
      "description": "/** Export only selected rows.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "onlySelectedAllPages": {
      "description": "/** Only export selected rows including other pages (only makes sense when using pagination).\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipColumnGroupHeaders": {
      "description": "/** Set to `true` to exclude header column groups.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipColumnHeaders": {
      "description": "/** Set to `true` if you don't want to export column headers.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipRowGroups": {
      "description": "/** Set to `true` to skip row group headers if grouping rows. Only relevant when grouping rows.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipPinnedTop": {
      "description": "/** Set to `true` to suppress exporting rows pinned to the top of the grid.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipPinnedBottom": {
      "description": "/** Set to `true` to suppress exporting rows pinned to the bottom of the grid.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "shouldRowBeSkipped": {
      "description": "/** A callback function that will be invoked once per row in the grid. Return true to omit the row from the export.\n     */",
      "type": {
        "arguments": { "params": "ShouldRowBeSkippedParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "processCellCallback": {
      "description": "/** A callback function invoked once per cell in the grid. Return a string value to be displayed in the export. For example this is useful for formatting date values.\n     */",
      "type": {
        "arguments": { "params": "ProcessCellForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processHeaderCallback": {
      "description": "/** A callback function invoked once per column. Return a string to be displayed in the column header.\n     */",
      "type": {
        "arguments": { "params": "ProcessHeaderForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processGroupHeaderCallback": {
      "description": "/** A callback function invoked once per column group. Return a `string` to be displayed in the column group header.\n     * Note that column groups are exported by default, this option will not work with `skipColumnGroupHeaders=true`.\n     */",
      "type": {
        "arguments": { "params": "ProcessGroupHeaderForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processRowGroupCallback": {
      "description": "/** A callback function invoked once per row group. Return a `string` to be displayed in the group cell.\n     */",
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "columnGroups": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipGroups": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipHeader": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "PackageFileParams": { "meta": { "typeParams": ["T"] } },
  "CsvCell": {
    "data": {
      "description": "/** The data that will be added to the cell. */",
      "type": { "returnType": "CsvCellData", "optional": false }
    },
    "mergeAcross": {
      "description": "/** The number of cells to span across (1 means span 2 columns).\n     * Default: `0`\n     */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "CsvCellData": {
    "value": {
      "description": "/** The value of the cell. */",
      "type": { "returnType": "string | null", "optional": false }
    }
  },
  "CsvCustomContent": {},
  "CsvExportParams": {
    "columnSeparator": {
      "description": "/** Delimiter to insert between cell values.\n     * Default: `,`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "suppressQuotes": {
      "description": "/** By default cell values are encoded according to CSV format rules: values are wrapped in double quotes, and any double quotes within the values are escaped, so my value becomes \\\"my\\\"\\\"value\\\". Pass `true` to insert the value into the CSV file without escaping.\n     * In this case it is your responsibility to ensure that no cells contain the columnSeparator character.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "prependContent": {
      "description": "/** Content to put at the top of the exported sheet.\n     */",
      "type": { "returnType": "CsvCustomContent", "optional": true }
    },
    "appendContent": {
      "description": "/** Content to put at the bottom of the exported sheet.\n     */",
      "type": { "returnType": "CsvCustomContent", "optional": true }
    },
    "customHeader": {
      "description": "/** @deprecated Use prependContent\n     */",
      "type": { "returnType": "CsvCustomContent", "optional": true }
    },
    "customFooter": {
      "description": "/** @deprecated Use appendContent\n     */",
      "type": { "returnType": "CsvCustomContent", "optional": true }
    },
    "getCustomContentBelowRow": {
      "description": "/** A callback function to return content to be inserted below a row in the export. */",
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "CsvCustomContent | undefined",
        "optional": true
      }
    },
    "allColumns": {
      "description": "/** If `true`, all columns will be exported in the order they appear in the columnDefs.\n     * When `false` only the columns currently being displayed will be exported.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "columnKeys": {
      "description": "/** Provide a list (an array) of column keys or Column objects if you want to export specific columns.\n     */",
      "type": { "returnType": "(string | Column)[]", "optional": true }
    },
    "rowPositions": {
      "description": "/** Row node positions. */",
      "type": { "returnType": "RowPosition[]", "optional": true }
    },
    "fileName": {
      "description": "/** String to use as the file name.\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "exportedRows": {
      "description": "/** Determines whether rows are exported before being filtered and sorted.\n     * Default: `filteredAndSorted`\n     */",
      "type": { "returnType": "'all' | 'filteredAndSorted'", "optional": true }
    },
    "onlySelected": {
      "description": "/** Export only selected rows.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "onlySelectedAllPages": {
      "description": "/** Only export selected rows including other pages (only makes sense when using pagination).\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipColumnGroupHeaders": {
      "description": "/** Set to `true` to exclude header column groups.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipColumnHeaders": {
      "description": "/** Set to `true` if you don't want to export column headers.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipRowGroups": {
      "description": "/** Set to `true` to skip row group headers if grouping rows. Only relevant when grouping rows.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipPinnedTop": {
      "description": "/** Set to `true` to suppress exporting rows pinned to the top of the grid.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipPinnedBottom": {
      "description": "/** Set to `true` to suppress exporting rows pinned to the bottom of the grid.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "shouldRowBeSkipped": {
      "description": "/** A callback function that will be invoked once per row in the grid. Return true to omit the row from the export.\n     */",
      "type": {
        "arguments": { "params": "ShouldRowBeSkippedParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "processCellCallback": {
      "description": "/** A callback function invoked once per cell in the grid. Return a string value to be displayed in the export. For example this is useful for formatting date values.\n     */",
      "type": {
        "arguments": { "params": "ProcessCellForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processHeaderCallback": {
      "description": "/** A callback function invoked once per column. Return a string to be displayed in the column header.\n     */",
      "type": {
        "arguments": { "params": "ProcessHeaderForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processGroupHeaderCallback": {
      "description": "/** A callback function invoked once per column group. Return a `string` to be displayed in the column group header.\n     * Note that column groups are exported by default, this option will not work with `skipColumnGroupHeaders=true`.\n     */",
      "type": {
        "arguments": { "params": "ProcessGroupHeaderForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processRowGroupCallback": {
      "description": "/** A callback function invoked once per row group. Return a `string` to be displayed in the group cell.\n     */",
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "columnGroups": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipGroups": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipHeader": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "ShouldRowBeSkippedParams": {
    "node": {
      "description": "/** Row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ProcessCellForExportParams": {
    "value": { "type": { "returnType": "any", "optional": false } },
    "accumulatedRowIndex": {
      "type": { "returnType": "number", "optional": true }
    },
    "node": {
      "type": { "returnType": "IRowNode<TData> | null", "optional": true }
    },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "type": { "type": { "returnType": "string", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ProcessHeaderForExportParams": {
    "column": { "type": { "returnType": "Column", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ProcessGroupHeaderForExportParams": {
    "columnGroup": {
      "type": { "returnType": "ColumnGroup", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ProcessRowGroupForExportParams": {
    "node": {
      "description": "/** Row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ContainerType": {},
  "IAfterGuiAttachedParams": {
    "container": {
      "description": "/** Where this component is attached to. */",
      "type": { "returnType": "ContainerType", "optional": true }
    },
    "hidePopup": {
      "description": "/** Call this to hide the popup. \n     * i.e useful if your component has an action button and you want to hide the popup after it is pressed.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "suppressFocus": {
      "description": "/** Set to `true` to not have the component focus its default item. */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "AgChartThemeOverrides": {},
  "AgChartThemePalette": {},
  "AgChartThemeDefinition": {},
  "AgChartTheme": {},
  "IAggFuncService": {
    "addAggFuncs": {
      "type": {
        "arguments": { "aggFuncs": "{ [key: string]: IAggFunc; }" },
        "returnType": "void",
        "optional": false
      }
    },
    "addAggFunc": {
      "type": {
        "arguments": { "key": "string", "aggFunc": "IAggFunc" },
        "returnType": "void",
        "optional": false
      }
    },
    "clear": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "getDefaultAggFunc": {
      "type": {
        "arguments": { "column": "Column" },
        "returnType": "string | null",
        "optional": false
      }
    },
    "getFuncNames": {
      "type": {
        "arguments": { "column": "Column" },
        "returnType": "string[]",
        "optional": false
      }
    }
  },
  "IAggregationStage": {
    "aggregateValues": {
      "type": {
        "arguments": {
          "values": "any[]",
          "aggFuncOrString": "string | IAggFunc"
        },
        "returnType": "any",
        "optional": false
      }
    }
  },
  "GetContextMenuItemsParams": {
    "defaultItems": {
      "description": "/** Names of the items that would be provided by default. */",
      "type": { "returnType": "string[] | undefined", "optional": false }
    },
    "column": {
      "description": "/** The column, if a cell was clicked, otherwise null. */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "node": {
      "description": "/** The row node, if a cell was clicked, otherwise null. */",
      "type": { "returnType": "IRowNode<TData> | null", "optional": false }
    },
    "value": {
      "description": "/** The value, if a cell was clicked, otherwise null.  */",
      "type": { "returnType": "any", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "GetMainMenuItemsParams": {
    "column": {
      "description": "/** The column that was clicked */",
      "type": { "returnType": "Column", "optional": false }
    },
    "defaultItems": {
      "description": "/** List of the items that would be displayed by default */",
      "type": { "returnType": "string[]", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "PostProcessPopupParams": {
    "column": {
      "description": "/** If popup is for a column, this gives the Column */",
      "type": { "returnType": "Column | null", "optional": true }
    },
    "rowNode": {
      "description": "/** If popup is for a row, this gives the RowNode */",
      "type": { "returnType": "IRowNode<TData> | null", "optional": true }
    },
    "ePopup": {
      "description": "/** The popup we are showing */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "type": {
      "description": "/** The different types are:\n     *  'contextMenu', 'columnMenu', 'aggFuncSelect', 'popupCellEditor' */",
      "type": { "returnType": "string", "optional": false }
    },
    "eventSource": {
      "description": "/** If the popup is as a result of a button click (eg menu button),\n     *  this is the component that the user clicked */",
      "type": { "returnType": "HTMLElement | null", "optional": true }
    },
    "mouseEvent": {
      "description": "/** If the popup is as a result of a click or touch,\n     *  this is the event - eg user showing context menu */",
      "type": { "returnType": "MouseEvent | Touch | null", "optional": true }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "SendToClipboardParams": {
    "data": { "type": { "returnType": "string", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ProcessDataFromClipboardParams": {
    "data": {
      "description": "/** 2D array of all cells from the clipboard */",
      "type": { "returnType": "string[][]", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "GetChartToolbarItemsParams": {
    "defaultItems": {
      "type": { "returnType": "ChartMenuOptions[]", "optional": true }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "NavigateToNextHeaderParams": {
    "key": {
      "description": "/** The key for the arrow key pressed,\n     *  left = 'ArrowLeft', up = 'ArrowUp', right = 'ArrowRight', down = 'ArrowDown' */",
      "type": { "returnType": "string", "optional": false }
    },
    "previousHeaderPosition": {
      "description": "/** The header that currently has focus */",
      "type": { "returnType": "HeaderPosition | null", "optional": false }
    },
    "nextHeaderPosition": {
      "description": "/** The header the grid would normally pick as the next header for this navigation */",
      "type": { "returnType": "HeaderPosition | null", "optional": false }
    },
    "headerRowCount": {
      "description": "/** The number of header rows present in the grid */",
      "type": { "returnType": "number", "optional": false }
    },
    "event": { "type": { "returnType": "KeyboardEvent", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "TabToNextHeaderParams": {
    "backwards": {
      "description": "/** True if the Shift key is also down */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "previousHeaderPosition": {
      "description": "/** The header that currently has focus */",
      "type": { "returnType": "HeaderPosition | null", "optional": false }
    },
    "nextHeaderPosition": {
      "description": "/** The header the grid would normally pick as the next header for this navigation */",
      "type": { "returnType": "HeaderPosition | null", "optional": false }
    },
    "headerRowCount": {
      "description": "/** The number of header rows present in the grid */",
      "type": { "returnType": "number", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "TabToNextCellParams": {
    "backwards": {
      "description": "/** True if the Shift key is also down */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "editing": {
      "description": "/** True if the current cell is editing\n     * (you may want to skip cells that are not editable, as the grid will enter the next cell in editing mode also if tabbing) */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "previousCellPosition": {
      "description": "/** The cell that currently has focus */",
      "type": { "returnType": "CellPosition", "optional": false }
    },
    "nextCellPosition": {
      "description": "/** The cell the grid would normally pick as the next cell for navigation.  */",
      "type": { "returnType": "CellPosition | null", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "NavigateToNextCellParams": {
    "key": {
      "description": "/** The keycode for the arrow key pressed:\n     *  left = 'ArrowLeft', up = 'ArrowUp', right = 'ArrowRight', down = 'ArrowDown' */",
      "type": { "returnType": "string", "optional": false }
    },
    "previousCellPosition": {
      "description": "/** The cell that currently has focus */",
      "type": { "returnType": "CellPosition", "optional": false }
    },
    "nextCellPosition": {
      "description": "/** The cell the grid would normally pick as the next cell for navigation */",
      "type": { "returnType": "CellPosition | null", "optional": false }
    },
    "event": {
      "type": { "returnType": "KeyboardEvent | null", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "PaginationNumberFormatterParams": {
    "value": { "type": { "returnType": "number", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "IsGroupOpenByDefaultParams": {
    "rowNode": {
      "description": "/** The row node being considered. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowGroupColumn": {
      "description": "/** The Column for which this row is grouping. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "level": {
      "description": "/** Same as `rowNode.level` - what level the group is at, e.g. 0 for top level, 1 for second etc */",
      "type": { "returnType": "number", "optional": false }
    },
    "field": {
      "description": "/** Same as `rowNode.field` - the field we are grouping on, e.g. 'country' */",
      "type": { "returnType": "string", "optional": false }
    },
    "key": {
      "description": "/** Same as `rowNode.key`, the value of this group, e.g. 'Ireland' */",
      "type": { "returnType": "string", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "GetServerSideGroupLevelParamsParams": {
    "level": {
      "description": "/** The level of the store. Top level is 0. */",
      "type": { "returnType": "number", "optional": false }
    },
    "parentRowNode": {
      "description": "/** The Row Node for the group that got expanded, or undefined if top level (ie no parent) */",
      "type": { "returnType": "IRowNode", "optional": true }
    },
    "rowGroupColumns": {
      "description": "/** Active Row Group Columns, if any. */",
      "type": { "returnType": "Column[]", "optional": false }
    },
    "pivotColumns": {
      "description": "/** Active Pivot Columns, if any. */",
      "type": { "returnType": "Column[]", "optional": false }
    },
    "pivotMode": {
      "description": "/** true if pivot mode is active. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<any>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "GetServerSideStoreParamsParams": {
    "level": {
      "description": "/** The level of the store. Top level is 0. */",
      "type": { "returnType": "number", "optional": false }
    },
    "parentRowNode": {
      "description": "/** The Row Node for the group that got expanded, or undefined if top level (ie no parent) */",
      "type": { "returnType": "IRowNode", "optional": true }
    },
    "rowGroupColumns": {
      "description": "/** Active Row Group Columns, if any. */",
      "type": { "returnType": "Column[]", "optional": false }
    },
    "pivotColumns": {
      "description": "/** Active Pivot Columns, if any. */",
      "type": { "returnType": "Column[]", "optional": false }
    },
    "pivotMode": {
      "description": "/** true if pivot mode is active. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<any>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "IsServerSideGroupOpenByDefaultParams": {
    "data": { "type": { "returnType": "any", "optional": false } },
    "rowNode": { "type": { "returnType": "IRowNode", "optional": false } },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<any>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "IsApplyServerSideTransactionParams": {
    "transaction": {
      "description": "/** The transaction getting applied. */",
      "type": { "returnType": "ServerSideTransaction", "optional": false }
    },
    "parentNode": {
      "description": "/** The parent RowNode, if transaction is applied to a group. */",
      "type": { "returnType": "IRowNode", "optional": false }
    },
    "storeInfo": {
      "description": "/** @deprecated use groupLevelInfo instead */",
      "type": { "returnType": "any", "optional": false }
    },
    "groupLevelInfo": {
      "description": "/** Store info, if any, as passed via the success() callback when loading data. */",
      "type": { "returnType": "any", "optional": false }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<any>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "GetRowIdParams": {
    "data": {
      "description": "/** The data item provided to the grid for the row in question */",
      "type": { "returnType": "TData", "optional": false }
    },
    "level": {
      "description": "/** If grouping, the level, ie how many levels from the top. Used by ServerSide Row Model only */",
      "type": { "returnType": "number", "optional": false }
    },
    "parentKeys": {
      "description": "/** If grouping, provides the keys of the parent groups. Used by ServerSide Row Model only */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ProcessRowParams": {
    "eRow": { "type": { "returnType": "HTMLElement", "optional": false } },
    "ePinnedLeftRow": {
      "type": { "returnType": "HTMLElement", "optional": true }
    },
    "ePinnedRightRow": {
      "type": { "returnType": "HTMLElement", "optional": true }
    },
    "rowIndex": { "type": { "returnType": "number", "optional": false } },
    "node": { "type": { "returnType": "IRowNode<TData>", "optional": false } },
    "addRenderedRowListener": {
      "type": {
        "arguments": { "eventType": "string", "listener": "Function" },
        "returnType": "void",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "FillOperationParams": {
    "event": {
      "description": "/** The mouse event for the fill operation. */",
      "type": { "returnType": "MouseEvent", "optional": false }
    },
    "values": {
      "description": "/** The values that have been processed by the fill operation. */",
      "type": { "returnType": "any[]", "optional": false }
    },
    "rowNode": {
      "description": "/** The RowNode of the current cell being changed. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "column": {
      "description": "/** The Column of the current cell being changed. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "initialValues": {
      "description": "/** The values that were present before processing started. */",
      "type": { "returnType": "any[]", "optional": false }
    },
    "currentIndex": {
      "description": "/** The index of the current processed value. */",
      "type": { "returnType": "number", "optional": false }
    },
    "currentCellValue": {
      "description": "/** The value of the cell being currently processed by the Fill Operation. */",
      "type": { "returnType": "any", "optional": false }
    },
    "direction": {
      "description": "/** The direction of the Fill Operation. */",
      "type": {
        "returnType": "'up' | 'down' | 'left' | 'right'",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "RowHeightParams": {
    "data": {
      "description": "/** The data associated with this row from rowData. Data is `undefined` for row groups. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The RowNode of the row in question. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "IsExternalFilterPresentParams": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "InitialGroupOrderComparatorParams": {
    "nodeA": { "type": { "returnType": "IRowNode<TData>", "optional": false } },
    "nodeB": { "type": { "returnType": "IRowNode<TData>", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "GetGroupRowAggParams": {
    "nodes": {
      "type": { "returnType": "IRowNode<TData>[]", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "PostSortRowsParams": {
    "nodes": {
      "type": { "returnType": "IRowNode<TData>[]", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "IsFullWidthRowParams": {
    "rowNode": {
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "GetLocaleTextParams": {
    "key": { "type": { "returnType": "string", "optional": false } },
    "defaultValue": { "type": { "returnType": "string", "optional": false } },
    "variableValues": {
      "type": { "returnType": "string[]", "optional": true }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "GetGroupAggFilteringParams": {
    "node": { "type": { "returnType": "IRowNode<TData>", "optional": false } },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ICellEditor": {
    "getValue": {
      "description": "/** Return the final value - called by the grid once after editing is complete\n     */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "isPopup": {
      "description": "/** Gets called once after initialised. If you return true, the editor will\n     * appear in a popup, so is not constrained to the boundaries of the cell.\n     * This is great if you want to, for example, provide you own custom dropdown list\n     * for selection. Default is false (ie if you don't provide the method).\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "getPopupPosition": {
      "description": "/** Gets called once, only if isPopup() returns true. Return \"over\" if the popup\n     * should cover the cell, or \"under\" if it should be positioned below leaving the\n     * cell value visible. If this method is not present, the default is \"over\".\n     */",
      "type": {
        "arguments": {},
        "returnType": "'over' | 'under' | undefined",
        "optional": true
      }
    },
    "isCancelBeforeStart": {
      "description": "/** Gets called once after initialised. If you return true, the editor will not be\n     * used and the grid will continue editing. Use this to make a decision on editing\n     * inside the init() function, eg maybe you want to only start editing if the user\n     * hits a numeric key, but not a letter, if the editor is for numbers.\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "isCancelAfterEnd": {
      "description": "/** Gets called once after editing is complete. If your return true, then the new\n     * value will not be used. The editing will have no impact on the record. Use this\n     * if you do not want a new value from your gui, i.e. you want to cancel the editing.\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "focusIn": {
      "description": "/** If doing full line edit, then gets called when focus should be put into the editor\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "focusOut": {
      "description": "/** If doing full line edit, then gets called when focus is leaving the editor\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * This method is called each time the edit component is activated.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "ICellEditorParams": {
    "value": {
      "description": "/** Current value of the cell */",
      "type": { "returnType": "TValue", "optional": false }
    },
    "eventKey": {
      "description": "/** Key value of key that started the edit, eg 'Enter' or 'F2' - non-printable\n     *  characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "charPress": {
      "description": "/** The string that started the edit, eg 'a' if letter 'a' was pressed, or 'A' if\n     *  shift + letter 'a' only printable characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "column": {
      "description": "/** Grid column */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** Column definition */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "node": {
      "description": "/** Row node for the cell */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "data": {
      "description": "/** Row data */",
      "type": { "returnType": "TData", "optional": false }
    },
    "rowIndex": {
      "description": "/** Editing row index */",
      "type": { "returnType": "number", "optional": false }
    },
    "cellStartedEdit": {
      "description": "/** If doing full row edit, this is true if the cell is the one that started the edit\n     *  (eg it is the cell the use double clicked on, or pressed a key on etc). */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "onKeyDown": {
      "description": "/** callback to tell grid a key was pressed - useful to pass control key events (tab,\n     *  arrows etc) back to grid - however you do */",
      "type": {
        "arguments": { "event": "KeyboardEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "stopEditing": {
      "description": "/** Callback to tell grid to stop editing the current cell. Call with input parameter\n     * true to prevent focus from moving to the next cell after editing stops in case the\n     * grid property `enterMovesDownAfterEdit=true` */",
      "type": {
        "arguments": { "suppressNavigateAfterEdit?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "eGridCell": {
      "description": "/** A reference to the DOM element representing the grid cell that your component\n     *  will live inside. Useful if you want to add event listeners or classes at this level.\n     *  This is the DOM element that gets browser focus when selecting cells. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "parseValue": {
      "description": "/** Utility function to parse a value using the column's `colDef.valueParser` */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    },
    "formatValue": {
      "description": "/** Utility function to format a value using the column's `colDef.valueFormatter` */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any", "TValue = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ICellEditorComp": {
    "meta": { "typeParams": ["TData = any"] },
    "getValue": {
      "description": "/** Return the final value - called by the grid once after editing is complete\n     */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "isPopup": {
      "description": "/** Gets called once after initialised. If you return true, the editor will\n     * appear in a popup, so is not constrained to the boundaries of the cell.\n     * This is great if you want to, for example, provide you own custom dropdown list\n     * for selection. Default is false (ie if you don't provide the method).\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "getPopupPosition": {
      "description": "/** Gets called once, only if isPopup() returns true. Return \"over\" if the popup\n     * should cover the cell, or \"under\" if it should be positioned below leaving the\n     * cell value visible. If this method is not present, the default is \"over\".\n     */",
      "type": {
        "arguments": {},
        "returnType": "'over' | 'under' | undefined",
        "optional": true
      }
    },
    "isCancelBeforeStart": {
      "description": "/** Gets called once after initialised. If you return true, the editor will not be\n     * used and the grid will continue editing. Use this to make a decision on editing\n     * inside the init() function, eg maybe you want to only start editing if the user\n     * hits a numeric key, but not a letter, if the editor is for numbers.\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "isCancelAfterEnd": {
      "description": "/** Gets called once after editing is complete. If your return true, then the new\n     * value will not be used. The editing will have no impact on the record. Use this\n     * if you do not want a new value from your gui, i.e. you want to cancel the editing.\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "focusIn": {
      "description": "/** If doing full line edit, then gets called when focus should be put into the editor\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "focusOut": {
      "description": "/** If doing full line edit, then gets called when focus is leaving the editor\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * This method is called each time the edit component is activated.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. */",
      "type": {
        "arguments": { "params": "T" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "ChartGroupsDef": {
    "columnGroup": {
      "type": {
        "returnType": "('column' | 'stackedColumn' | 'normalizedColumn')[]",
        "optional": true
      }
    },
    "barGroup": {
      "type": {
        "returnType": "('bar' | 'stackedBar' | 'normalizedBar')[]",
        "optional": true
      }
    },
    "pieGroup": {
      "type": { "returnType": "('pie' | 'doughnut')[]", "optional": true }
    },
    "lineGroup": { "type": { "returnType": "('line')[]", "optional": true } },
    "scatterGroup": {
      "type": { "returnType": "('scatter' | 'bubble')[]", "optional": true }
    },
    "areaGroup": {
      "type": {
        "returnType": "('area' | 'stackedArea' | 'normalizedArea')[]",
        "optional": true
      }
    },
    "histogramGroup": {
      "type": { "returnType": "('histogram')[]", "optional": true }
    },
    "combinationGroup": {
      "type": {
        "returnType": "('columnLineCombo' | 'areaColumnCombo' | 'customCombo')[]",
        "optional": true
      }
    }
  },
  "ChartToolPanelName": {},
  "ChartSettingsPanel": {
    "chartGroupsDef": {
      "description": "/** Chart groups customisations for which charts are displayed in the settings panel */",
      "type": { "returnType": "ChartGroupsDef", "optional": true }
    }
  },
  "ChartFormatPanelGroup": {},
  "ChartDataPanelGroup": {},
  "ChartPanelGroupDef": {
    "type": {
      "description": "/** The panel group type */",
      "type": { "returnType": "GroupType", "optional": false }
    },
    "isOpen": {
      "description": "/** Whether the panel group is open by default. If not specified, it is closed */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "meta": { "typeParams": ["GroupType"] }
  },
  "ChartFormatPanel": {
    "groups": {
      "description": "/** The format panel group configurations, their order and whether they are shown. If not specified shows all groups */",
      "type": {
        "returnType": "ChartPanelGroupDef<ChartFormatPanelGroup>[]",
        "optional": true
      }
    }
  },
  "ChartDataPanel": {
    "groups": {
      "description": "/** The data panel group configurations, their order and whether they are shown. If not specified shows all groups */",
      "type": {
        "returnType": "ChartPanelGroupDef<ChartDataPanelGroup>[]",
        "optional": true
      }
    }
  },
  "ChartToolPanelsDef": {
    "settingsPanel": {
      "description": "/** Customisations for the settings panel and chart menu items in the Context Menu. */",
      "type": { "returnType": "ChartSettingsPanel", "optional": true }
    },
    "formatPanel": {
      "description": "/** Customisations for the format panel */",
      "type": { "returnType": "ChartFormatPanel", "optional": true }
    },
    "dataPanel": {
      "description": "/** Customisations for the data panel */",
      "type": { "returnType": "ChartDataPanel", "optional": true }
    },
    "panels": {
      "description": "/** The ordered list of panels to show in the chart tool panels. If none specified, all panels are shown */",
      "type": { "returnType": "ChartToolPanelName[]", "optional": true }
    },
    "defaultToolPanel": {
      "description": "/** The panel to open by default when the chart loads. If none specified, the tool panel is hidden by default and the first panel is open when triggered. */",
      "type": { "returnType": "ChartToolPanelName", "optional": true }
    }
  },
  "ChartType": {},
  "CrossFilterChartType": {},
  "ChartToolPanelMenuOptions": {},
  "ChartToolbarMenuItemOptions": {},
  "ChartMenuOptions": {},
  "SeriesChartType": {
    "colId": { "type": { "returnType": "string", "optional": false } },
    "chartType": { "type": { "returnType": "ChartType", "optional": false } },
    "secondaryAxis": { "type": { "returnType": "boolean", "optional": true } }
  },
  "GetChartImageDataUrlParams": {
    "chartId": {
      "description": "/** The id of the created chart. */",
      "type": { "returnType": "string", "optional": false }
    },
    "fileFormat": {
      "description": "/** A string indicating the image format.\n     * The default format type is `image/png`.\n     * Options: `image/png`, `image/jpeg`\n     */",
      "type": { "returnType": "string", "optional": true }
    }
  },
  "ChartDownloadParams": {
    "chartId": {
      "description": "/** The id of the created chart. */",
      "type": { "returnType": "string", "optional": false }
    },
    "fileName": {
      "description": "/** Name of downloaded image file. The chart title will be used by default */",
      "type": { "returnType": "string", "optional": true }
    },
    "fileFormat": {
      "description": "/** A string indicating the image format.\n     * The default format type is `image/png`.\n     * Options: `image/png`, `image/jpeg`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "dimensions": {
      "description": "/** Dimensions of downloaded chart image in pixels. The current chart dimensions will be used if not specified.\n     */",
      "type": {
        "returnType": "{\n        width: number;\n        height: number;\n    }",
        "optional": true
      }
    }
  },
  "CloseChartToolPanelParams": {
    "chartId": {
      "description": "/** The id of the created chart. */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ChartModelType": {},
  "OpenChartToolPanelParams": {
    "chartId": {
      "description": "/** The id of the created chart. */",
      "type": { "returnType": "string", "optional": false }
    },
    "panel": {
      "description": "/** Name of the Chart Tool Panel. The default 'Settings' Tool Panel will be used if not specified.*/",
      "type": { "returnType": "ChartToolPanelName", "optional": true }
    }
  },
  "ChartModel": {
    "version": { "type": { "returnType": "string", "optional": true } },
    "modelType": {
      "type": { "returnType": "ChartModelType", "optional": false }
    },
    "chartId": { "type": { "returnType": "string", "optional": false } },
    "chartType": { "type": { "returnType": "ChartType", "optional": false } },
    "cellRange": {
      "type": { "returnType": "CellRangeParams", "optional": false }
    },
    "chartThemeName": { "type": { "returnType": "string", "optional": true } },
    "chartOptions": {
      "type": { "returnType": "AgChartThemeOverrides", "optional": false }
    },
    "chartPalette": {
      "type": { "returnType": "AgChartThemePalette", "optional": true }
    },
    "suppressChartRanges": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "aggFunc": {
      "type": { "returnType": "string | IAggFunc", "optional": true }
    },
    "unlinkChart": { "type": { "returnType": "boolean", "optional": true } },
    "seriesChartTypes": {
      "type": { "returnType": "SeriesChartType[]", "optional": true }
    }
  },
  "IChartService": {
    "getChartModels": {
      "type": {
        "arguments": {},
        "returnType": "ChartModel[]",
        "optional": false
      }
    },
    "getChartRef": {
      "type": {
        "arguments": { "chartId": "string" },
        "returnType": "ChartRef | undefined",
        "optional": false
      }
    },
    "createRangeChart": {
      "type": {
        "arguments": { "params": "CreateRangeChartParams" },
        "returnType": "ChartRef | undefined",
        "optional": false
      }
    },
    "createCrossFilterChart": {
      "type": {
        "arguments": { "params": "CreateCrossFilterChartParams" },
        "returnType": "ChartRef | undefined",
        "optional": false
      }
    },
    "createChartFromCurrentRange": {
      "type": {
        "arguments": { "chartType": "ChartType" },
        "returnType": "ChartRef | undefined",
        "optional": false
      }
    },
    "createPivotChart": {
      "type": {
        "arguments": { "params": "CreatePivotChartParams" },
        "returnType": "ChartRef | undefined",
        "optional": false
      }
    },
    "restoreChart": {
      "type": {
        "arguments": {
          "model": "ChartModel",
          "chartContainer?": "HTMLElement"
        },
        "returnType": "ChartRef | undefined",
        "optional": false
      }
    },
    "getChartImageDataURL": {
      "type": {
        "arguments": { "params": "GetChartImageDataUrlParams" },
        "returnType": "string | undefined",
        "optional": false
      }
    },
    "downloadChart": {
      "type": {
        "arguments": { "params": "ChartDownloadParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "openChartToolPanel": {
      "type": {
        "arguments": { "params": "OpenChartToolPanelParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "closeChartToolPanel": {
      "type": {
        "arguments": { "chartId": "string" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "CreateChartParams": {
    "chartType": {
      "description": "/** The type of chart to create. */",
      "type": { "returnType": "ChartType", "optional": false }
    },
    "chartThemeName": {
      "description": "/** The default theme to use, either a default option or your own custom theme. */",
      "type": { "returnType": "string", "optional": true }
    },
    "chartContainer": {
      "description": "/** Provide to display the chart outside of the grid in your own container. */",
      "type": { "returnType": "HTMLElement", "optional": true }
    },
    "chartThemeOverrides": {
      "description": "/** Allows specific chart options in the current theme to be overridden. */",
      "type": { "returnType": "AgChartThemeOverrides", "optional": true }
    },
    "unlinkChart": {
      "description": "/** When enabled the chart will be unlinked from the grid after creation, any updates to the data will not be reflected in the chart. */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "ChartParamsCellRange": {},
  "CreateRangeChartParams": {
    "cellRange": {
      "description": "/** The range of cells to be charted. If no rows / rowIndexes are specified all rows will be included. */",
      "type": { "returnType": "ChartParamsCellRange", "optional": false }
    },
    "suppressChartRanges": {
      "description": "/** Suppress highlighting the selected range in the grid. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "aggFunc": {
      "description": "/** The aggregation function that should be applied to all series data. */",
      "type": { "returnType": "string | IAggFunc", "optional": true }
    },
    "seriesChartTypes": {
      "description": "/** The series chart type configurations used in combination charts */",
      "type": { "returnType": "SeriesChartType[]", "optional": true }
    },
    "chartType": {
      "description": "/** The type of chart to create. */",
      "type": { "returnType": "ChartType", "optional": false }
    },
    "chartThemeName": {
      "description": "/** The default theme to use, either a default option or your own custom theme. */",
      "type": { "returnType": "string", "optional": true }
    },
    "chartContainer": {
      "description": "/** Provide to display the chart outside of the grid in your own container. */",
      "type": { "returnType": "HTMLElement", "optional": true }
    },
    "chartThemeOverrides": {
      "description": "/** Allows specific chart options in the current theme to be overridden. */",
      "type": { "returnType": "AgChartThemeOverrides", "optional": true }
    },
    "unlinkChart": {
      "description": "/** When enabled the chart will be unlinked from the grid after creation, any updates to the data will not be reflected in the chart. */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "CreateCrossFilterChartParams": {
    "chartType": {
      "description": "/** The type of cross-filter chart to create. */",
      "type": { "returnType": "CrossFilterChartType", "optional": false }
    },
    "cellRange": {
      "description": "/** The range of cells to be charted. If no rows / rowIndexes are specified all rows will be included. */",
      "type": { "returnType": "ChartParamsCellRange", "optional": false }
    },
    "suppressChartRanges": {
      "description": "/** Suppress highlighting the selected range in the grid. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "aggFunc": {
      "description": "/** The aggregation function that should be applied to all series data. */",
      "type": { "returnType": "string | IAggFunc", "optional": true }
    },
    "chartThemeName": {
      "description": "/** The default theme to use, either a default option or your own custom theme. */",
      "type": { "returnType": "string", "optional": true }
    },
    "chartContainer": {
      "description": "/** Provide to display the chart outside of the grid in your own container. */",
      "type": { "returnType": "HTMLElement", "optional": true }
    },
    "chartThemeOverrides": {
      "description": "/** Allows specific chart options in the current theme to be overridden. */",
      "type": { "returnType": "AgChartThemeOverrides", "optional": true }
    },
    "unlinkChart": {
      "description": "/** When enabled the chart will be unlinked from the grid after creation, any updates to the data will not be reflected in the chart. */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "CreatePivotChartParams": {
    "chartType": {
      "description": "/** The type of chart to create. */",
      "type": { "returnType": "ChartType", "optional": false }
    },
    "chartThemeName": {
      "description": "/** The default theme to use, either a default option or your own custom theme. */",
      "type": { "returnType": "string", "optional": true }
    },
    "chartContainer": {
      "description": "/** Provide to display the chart outside of the grid in your own container. */",
      "type": { "returnType": "HTMLElement", "optional": true }
    },
    "chartThemeOverrides": {
      "description": "/** Allows specific chart options in the current theme to be overridden. */",
      "type": { "returnType": "AgChartThemeOverrides", "optional": true }
    },
    "unlinkChart": {
      "description": "/** When enabled the chart will be unlinked from the grid after creation, any updates to the data will not be reflected in the chart. */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "ClientSideRowModelStep": {},
  "ClientSideRowModelSteps": {},
  "IClientSideRowModel": {
    "onRowGroupOpened": {
      "type": { "arguments": {}, "returnType": "void", "optional": false },
      "meta": { "isEvent": true, "name": "onRowGroupOpened" }
    },
    "rowGroupOpened": {
      "type": { "arguments": {}, "returnType": "void", "optional": false },
      "meta": { "isEvent": true, "name": "onRowGroupOpened" }
    },
    "updateRowData": {
      "type": {
        "arguments": {
          "rowDataTran": "RowDataTransaction<TData>",
          "rowNodeOrder?": "{ [id: string]: number; } | null"
        },
        "returnType": "RowNodeTransaction<TData> | null",
        "optional": false
      }
    },
    "setRowData": {
      "type": {
        "arguments": { "rowData": "any[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "refreshModel": {
      "type": {
        "arguments": {
          "paramsOrStep": "RefreshModelParams | ClientSideRowModelStep | undefined"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "expandOrCollapseAll": {
      "type": {
        "arguments": { "expand": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "forEachLeafNode": {
      "type": {
        "arguments": { "callback": "(node: RowNode, index: number) => void" },
        "returnType": "void",
        "optional": false
      }
    },
    "forEachNodeAfterFilter": {
      "type": {
        "arguments": {
          "callback": "(node: RowNode, index: number) => void",
          "includeFooterNodes?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "forEachNodeAfterFilterAndSort": {
      "type": {
        "arguments": {
          "callback": "(node: RowNode, index: number) => void",
          "includeFooterNodes?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "forEachPivotNode": {
      "type": {
        "arguments": {
          "callback": "(node: RowNode, index: number) => void",
          "includeFooterNodes?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "resetRowHeights": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "onRowHeightChanged": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "onRowHeightChangedDebounced": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "batchUpdateRowData": {
      "type": {
        "arguments": {
          "rowDataTransaction": "RowDataTransaction<TData>",
          "callback?": "(res: RowNodeTransaction<TData>) => void"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "flushAsyncTransactions": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "getRootNode": {
      "type": { "arguments": {}, "returnType": "RowNode", "optional": false }
    },
    "doAggregate": {
      "type": {
        "arguments": { "changedPath?": "ChangedPath" },
        "returnType": "void",
        "optional": false
      }
    },
    "getTopLevelNodes": {
      "type": {
        "arguments": {},
        "returnType": "RowNode[] | null",
        "optional": false
      }
    },
    "ensureRowsAtPixel": {
      "type": {
        "arguments": {
          "rowNode": "RowNode[]",
          "pixel": "number",
          "increment": "number"
        },
        "returnType": "boolean",
        "optional": false
      }
    },
    "highlightRowAtPixel": {
      "type": {
        "arguments": { "rowNode": "RowNode | null", "pixel?": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "getHighlightPosition": {
      "type": {
        "arguments": { "pixel": "number", "rowNode?": "RowNode" },
        "returnType": "RowHighlightPosition",
        "optional": false
      }
    },
    "getLastHighlightedRowNode": {
      "type": {
        "arguments": {},
        "returnType": "RowNode | null",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any"] },
    "getRow": {
      "description": "/** Returns the rowNode at the given index. */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowNode | undefined",
        "optional": false
      }
    },
    "getRowNode": {
      "description": "/** Returns the rowNode for given id. */",
      "type": {
        "arguments": { "id": "string" },
        "returnType": "RowNode | undefined",
        "optional": false
      }
    },
    "getRowCount": {
      "description": "/** Returns the number of rows */",
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getTopLevelRowCount": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getTopLevelRowDisplayedIndex": {
      "type": {
        "arguments": { "topLevelIndex": "number" },
        "returnType": "number",
        "optional": false
      }
    },
    "getRowIndexAtPixel": {
      "description": "/** Returns the row index at the given pixel */",
      "type": {
        "arguments": { "pixel": "number" },
        "returnType": "number",
        "optional": false
      }
    },
    "isRowPresent": {
      "description": "/** Returns true if the provided rowNode is in the list of rows to render */",
      "type": {
        "arguments": { "rowNode": "RowNode" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getRowBounds": {
      "description": "/** Returns row top and bottom for a given row */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowBounds | null",
        "optional": false
      }
    },
    "isEmpty": {
      "description": "/** Returns true if this model has no rows, regardless of model filter. EG if rows present, but filtered\n     * out, this still returns false. If it returns true, then the grid shows the 'no rows' overlay - but we\n     * don't show that overlay if the rows are just filtered out. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "isRowsToRender": {
      "description": "/** Returns true if no rows (either no rows at all, or the rows are filtered out). This is what the grid\n     * uses to know if there are rows to render or not. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getNodesInRangeForSelection": {
      "description": "/** Returns all rows in range that should be selected. If there is a gap in range (non ClientSideRowModel) then\n     *  then no rows should be returned  */",
      "type": {
        "arguments": { "first": "RowNode", "last": "RowNode | null" },
        "returnType": "RowNode[]",
        "optional": false
      }
    },
    "forEachNode": {
      "description": "/** Iterate through each node. What this does depends on the model type. For clientSide, goes through\n     * all nodes. For serverSide, goes through what's loaded in memory. */",
      "type": {
        "arguments": {
          "callback": "(rowNode: RowNode, index: number) => void",
          "includeFooterNodes?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "getType": {
      "description": "/** The base class returns the type. We use this instead of 'instanceof' as the client might provide\n     * their own implementation of the models in the future. */",
      "type": {
        "arguments": {},
        "returnType": "RowModelType",
        "optional": false
      }
    },
    "isLastRowIndexKnown": {
      "description": "/** It tells us if this row model knows about the last row that it can produce. This is used by the\n     * PaginationPanel, if last row is not found, then the 'last' button is disabled and the last page is\n     * not shown. This is always true for ClientSideRowModel. It toggles for InfiniteRowModel.\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "ensureRowHeightsValid": {
      "description": "/** Used by CSRM only - is makes sure there are now estimated row heights within the range. */",
      "type": {
        "arguments": {
          "startPixel": "number",
          "endPixel": "number",
          "startLimitIndex": "number",
          "endLimitIndex": "number"
        },
        "returnType": "boolean",
        "optional": false
      }
    },
    "start": {
      "description": "/** Gets called after grid is initialised. What happens depends on row model. Client Side will take rowData\n     * from gridOptions, the other row models will start calling their datasources. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "RefreshModelParams": {
    "step": {
      "type": { "returnType": "ClientSideRowModelSteps", "optional": false }
    },
    "groupState": { "type": { "returnType": "any", "optional": true } },
    "keepRenderedRows": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "animate": { "type": { "returnType": "boolean", "optional": true } },
    "keepEditingRows": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowNodeTransactions": {
      "type": { "returnType": "RowNodeTransaction<TData>[]", "optional": true }
    },
    "rowNodeOrder": {
      "type": { "returnType": "{ [id: string]: number }", "optional": true }
    },
    "newData": { "type": { "returnType": "boolean", "optional": true } },
    "afterColumnsChanged": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "keepUndoRedoStack": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "meta": { "typeParams": ["TData = any"] }
  },
  "IClipboardCopyParams": {
    "includeHeaders": { "type": { "returnType": "boolean", "optional": true } },
    "includeGroupHeaders": {
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "IClipboardCopyRowsParams": {
    "columnKeys": {
      "type": { "returnType": "(string | Column)[]", "optional": true }
    },
    "includeHeaders": { "type": { "returnType": "boolean", "optional": true } },
    "includeGroupHeaders": {
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "IClipboardService": {
    "pasteFromClipboard": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "copyToClipboard": {
      "type": {
        "arguments": { "params?": "IClipboardCopyParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "cutToClipboard": {
      "type": {
        "arguments": { "params?": "IClipboardCopyParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "copySelectedRowsToClipboard": {
      "type": {
        "arguments": { "params?": "IClipboardCopyRowsParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "copySelectedRangeToClipboard": {
      "type": {
        "arguments": { "params?": "IClipboardCopyParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "copyRangeDown": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "IColumnToolPanel": {
    "expandColumnGroups": {
      "type": {
        "arguments": { "groupIds?": "string[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "collapseColumnGroups": {
      "type": {
        "arguments": { "groupIds?": "string[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "setColumnLayout": {
      "type": {
        "arguments": { "colDefs": "(ColDef | ColGroupDef)[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "syncLayoutWithGrid": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "setPivotModeSectionVisible": {
      "type": {
        "arguments": { "visible": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRowGroupsSectionVisible": {
      "type": {
        "arguments": { "visible": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setValuesSectionVisible": {
      "type": {
        "arguments": { "visible": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setPivotSectionVisible": {
      "type": {
        "arguments": { "visible": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "refresh": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "ColumnVO": {
    "id": { "type": { "returnType": "string", "optional": false } },
    "displayName": { "type": { "returnType": "string", "optional": false } },
    "field": { "type": { "returnType": "string", "optional": true } },
    "aggFunc": { "type": { "returnType": "string", "optional": true } }
  },
  "WithoutGridCommon": {
    "meta": { "typeParams": ["T extends AgGridCommon<any, any>"] }
  },
  "AgGridCommon": {
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    },
    "meta": { "typeParams": ["TData", "TContext"] }
  },
  "IComponent": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. */",
      "type": {
        "arguments": { "params": "T" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    },
    "meta": { "typeParams": ["T"] }
  },
  "IContextMenuFactory": {
    "onContextMenu": {
      "type": {
        "arguments": {
          "mouseEvent": "MouseEvent | null",
          "touchEvent": "TouchEvent | null",
          "rowNode": "RowNode | null",
          "column": "Column | null",
          "value": "any",
          "anchorToElement": "HTMLElement"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "hideActiveMenu": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "ICsvCreator": {
    "getDataAsCsv": {
      "type": {
        "arguments": {
          "params?": "CsvExportParams",
          "skipDefaultParams?": "boolean"
        },
        "returnType": "string",
        "optional": false
      }
    },
    "exportDataAsCsv": {
      "type": {
        "arguments": { "params?": "CsvExportParams" },
        "returnType": "string",
        "optional": false
      }
    }
  },
  "IDatasource": {
    "rowCount": {
      "description": "/** If you know up front how many rows are in the dataset, set it here. Otherwise leave blank. */",
      "type": { "returnType": "number", "optional": true }
    },
    "getRows": {
      "description": "/** Callback the grid calls that you implement to fetch rows from the server. */",
      "type": {
        "arguments": { "params": "IGetRowsParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Optional destroy method, if your datasource has state it needs to clean up. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "IGetRowsParams": {
    "startRow": {
      "description": "/** The first row index to get. */",
      "type": { "returnType": "number", "optional": false }
    },
    "endRow": {
      "description": "/** The first row index to NOT get. */",
      "type": { "returnType": "number", "optional": false }
    },
    "successCallback": {
      "description": "/** Callback to call for the result when successful. */",
      "type": {
        "arguments": { "rowsThisBlock": "any[]", "lastRow?": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "failCallback": {
      "description": "/** Callback to call when the request fails. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "sortModel": {
      "description": "/** If doing server side sorting, contains the sort model */",
      "type": { "returnType": "SortModelItem[]", "optional": false }
    },
    "filterModel": {
      "description": "/** If doing server side filtering, contains the filter model */",
      "type": { "returnType": "any", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "IEventEmitter": {
    "addEventListener": {
      "type": {
        "arguments": {
          "eventType": "string",
          "listener": "EventListener",
          "async?": "boolean",
          "options?": "AddEventListenerOptions"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "removeEventListener": {
      "type": {
        "arguments": {
          "eventType": "string",
          "listener": "EventListener",
          "async?": "boolean",
          "options?": "AddEventListenerOptions"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ExcelStyle": {
    "id": {
      "description": "/** The id of the Excel Style, this should match a CSS cell class. */",
      "type": { "returnType": "string", "optional": false }
    },
    "alignment": {
      "description": "/** Use this property to customise cell alignment properties. */",
      "type": { "returnType": "ExcelAlignment", "optional": true }
    },
    "borders": {
      "description": "/** Use this property to customise cell borders. */",
      "type": { "returnType": "ExcelBorders", "optional": true }
    },
    "dataType": {
      "description": "/** Use this property to specify the type of data being exported. */",
      "type": { "returnType": "ExcelDataType", "optional": true }
    },
    "font": {
      "description": "/** Use this property to customise the font used in the cell. */",
      "type": { "returnType": "ExcelFont", "optional": true }
    },
    "interior": {
      "description": "/** Use this property to customise the cell background. */",
      "type": { "returnType": "ExcelInterior", "optional": true }
    },
    "numberFormat": {
      "description": "/** Use this property to customise the cell value as a formatted number. */",
      "type": { "returnType": "ExcelNumberFormat", "optional": true }
    },
    "protection": {
      "description": "/** Use this property to setup cell protection. */",
      "type": { "returnType": "ExcelProtection", "optional": true }
    },
    "name": {
      "description": "/** @deprecated Legacy property\n     */",
      "type": { "returnType": "string", "optional": true }
    }
  },
  "ExcelAlignment": {
    "horizontal": {
      "description": "/** Use this property to change the cell horizontal alignment.\n     * Default: `Automatic`\n     */",
      "type": {
        "returnType": "'Automatic' | 'Left' | 'Center' | 'Right' | 'Fill' | 'Justify' | 'CenterAcrossSelection' | 'Distributed' | 'JustifyDistributed'",
        "optional": true
      }
    },
    "indent": {
      "description": "/** Use this property to change the level of indentation in the cell.\n     * Default: 0\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "readingOrder": {
      "description": "/** Use this property to change the cell reading order.\n     * Default: `LeftToRight`\n     */",
      "type": {
        "returnType": "'RightToLeft' | 'LeftToRight' | 'Context'",
        "optional": true
      }
    },
    "rotate": {
      "description": "/** The number of degrees between 0 and 359 to rotate the text.\n     * Default: `0`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "shrinkToFit": {
      "description": "/** If set to `true`, the font size of the cell will automatically change to force the text to fit within the cell.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "vertical": {
      "description": "/** Use this property to change the cell vertical alignment.\n     * Default: `Automatic`\n     */",
      "type": {
        "returnType": "'Automatic' | 'Top' | 'Bottom' | 'Center' | 'Justify' | 'Distributed' | 'JustifyDistributed'",
        "optional": true
      }
    },
    "wrapText": {
      "description": "/** If set to `true`, multiline text will be displayed as multiline by Excel.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "verticalText": {
      "description": "/** @deprecated Legacy property\n     */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "ExcelBorders": {
    "borderBottom": {
      "description": "/** Use to set the cell's bottom border. */",
      "type": { "returnType": "ExcelBorder", "optional": true }
    },
    "borderLeft": {
      "description": "/** Use to set the cell's left border. */",
      "type": { "returnType": "ExcelBorder", "optional": true }
    },
    "borderRight": {
      "description": "/** Use to set the cell's right border. */",
      "type": { "returnType": "ExcelBorder", "optional": true }
    },
    "borderTop": {
      "description": "/** Use to set the cell's top border. */",
      "type": { "returnType": "ExcelBorder", "optional": true }
    }
  },
  "ExcelBorder": {
    "color": {
      "description": "/** The color or the border.\n     * Default: `black`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "lineStyle": {
      "description": "/** The style of the border.\n     * Default: `None`\n     */",
      "type": {
        "returnType": "'None' | 'Continuous' | 'Dash' | 'Dot' | 'DashDot' | 'DashDotDot' | 'SlantDashDot' | 'Double'",
        "optional": true
      }
    },
    "weight": {
      "description": "/** The thickness of the border from 0 (thin) to 3 (thick).\n     * Default: `0`\n     */",
      "type": { "returnType": "0 | 1 | 2 | 3", "optional": true }
    }
  },
  "ExcelFont": {
    "bold": {
      "description": "/** Set to `true` to set the cell text to bold.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "color": {
      "description": "/** The color of the cell font.\n     * Default: `#000000`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "family": {
      "description": "/** The family of the font to used in the cell.\n     * Options: `Automatic`,`Roman`,`Swiss`,`Modern`,`Script`,`Decorative`,\n     * Default: `Automatic`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "fontName": {
      "description": "/** The name of the font to be used in the cell.\n     * Default: `Calibri`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "italic": {
      "description": "/** Set to `true` to display the cell font as italic.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "outline": {
      "description": "/** Set to `true` to add a text outline.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "shadow": {
      "description": "/** Set to `true` to add text shadow.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "size": {
      "description": "/** Set this property to used a different font size other than the default.\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "strikeThrough": {
      "description": "/** Set to `true` to add a strikeThrough line.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "underline": {
      "description": "/** Use this property to underline the cell text.     \n     */",
      "type": { "returnType": "'Single' | 'Double'", "optional": true }
    },
    "verticalAlign": {
      "description": "/** Use this property to change the default font alignment. Note: This is different than setting cell vertical alignment. */",
      "type": { "returnType": "'Superscript' | 'Subscript'", "optional": true }
    },
    "charSet": {
      "description": "/** @deprecated Legacy property\n     */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "ExcelInterior": {
    "pattern": {
      "description": "/** Use this property to set background color patterns. */",
      "type": {
        "returnType": "'None' | 'Solid' | 'Gray75' | 'Gray50' | 'Gray25' | 'Gray125' | 'Gray0625' | 'HorzStripe' | 'VertStripe' | 'ReverseDiagStripe' | 'DiagStripe' | 'DiagCross' | 'ThickDiagCross' | 'ThinHorzStripe' | 'ThinVertStripe' | 'ThinReverseDiagStripe' | 'ThinDiagStripe' | 'ThinHorzCross' | 'ThinDiagCross'",
        "optional": false
      }
    },
    "color": {
      "description": "/** The colour to be used as a secondary colour combined with patterns. */",
      "type": { "returnType": "string", "optional": true }
    },
    "patternColor": {
      "description": "/** The pattern color. */",
      "type": { "returnType": "string", "optional": true }
    }
  },
  "ExcelNumberFormat": {
    "format": {
      "description": "/** Use this property to provide a pattern to format a number. (eg. 10000 could become $10,000.00). */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ExcelProtection": {
    "protected": {
      "description": "/** Set to `false` to disable cell protection (locking)\n     * Default: `true`\n     */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "hideFormula": {
      "description": "/** Set to `true` to hide formulas within protected cells.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": false }
    }
  },
  "ExcelWorksheet": {
    "name": { "type": { "returnType": "string", "optional": false } },
    "table": { "type": { "returnType": "ExcelTable", "optional": false } }
  },
  "ExcelTable": {
    "columns": { "type": { "returnType": "ExcelColumn[]", "optional": false } },
    "rows": { "type": { "returnType": "ExcelRow[]", "optional": false } }
  },
  "ExcelColumn": {
    "min": { "type": { "returnType": "number", "optional": true } },
    "max": { "type": { "returnType": "number", "optional": true } },
    "outlineLevel": { "type": { "returnType": "number", "optional": true } },
    "width": { "type": { "returnType": "number", "optional": true } },
    "s": { "type": { "returnType": "number", "optional": true } },
    "hidden": { "type": { "returnType": "boolean", "optional": true } },
    "bestFit": { "type": { "returnType": "boolean", "optional": true } }
  },
  "ExcelRow": {
    "collapsed": {
      "description": "/** Collapsed state. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "hidden": {
      "description": "/** Hidden state. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "height": {
      "description": "/** The height of the row. */",
      "type": { "returnType": "number", "optional": true }
    },
    "outlineLevel": {
      "description": "/** The indentation level if the current row is part of a row group. */",
      "type": { "returnType": "number", "optional": true }
    },
    "cells": {
      "description": "/** An array of ExcelCells. */",
      "type": { "returnType": "ExcelCell[]", "optional": false }
    }
  },
  "ExcelCell": {
    "data": {
      "description": "/** The data that will be added to the cell. */",
      "type": { "returnType": "ExcelData", "optional": true }
    },
    "ref": {
      "description": "/** Cell reference. */",
      "type": { "returnType": "string", "optional": true }
    },
    "collapsibleRanges": {
      "description": "/** Collapsible ranges. */",
      "type": { "returnType": "number[][]", "optional": true }
    },
    "styleId": {
      "description": "/** The ExcelStyle id to be associated with the cell. */",
      "type": { "returnType": "string | string[]", "optional": true }
    },
    "mergeAcross": {
      "description": "/** The number of cells to span across (1 means span 2 columns).\n     * Default: `0`\n     */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "ExcelImagePosition": {
    "row": {
      "description": "/** The row containing this image. This property is set automatically, don't change it unless you know what you are doing. */",
      "type": { "returnType": "number", "optional": true }
    },
    "rowSpan": {
      "description": "/** The amount of rows this image will cover.\n     * Default: `1`\n     *  */",
      "type": { "returnType": "number", "optional": true }
    },
    "column": {
      "description": "/** The column containing this image. This property is set automatically, don't change it unless you know what you are doing. */",
      "type": { "returnType": "number", "optional": true }
    },
    "colSpan": {
      "description": "/** The amount of columns this image will cover.\n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "offsetX": {
      "description": "/** The amount in pixels the image should be offset horizontally.\n     * Default: `0`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "offsetY": {
      "description": "/** The amount in pixels the image should be offset vertically.\n     * Default: `0`\n     */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "ExcelImage": {
    "id": {
      "description": "/** The image `id`. This field is required so the same image doesn't get imported multiple times.\n     */",
      "type": { "returnType": "string", "optional": false }
    },
    "base64": {
      "description": "/** A base64 string that represents the image being imported.\n     */",
      "type": { "returnType": "string", "optional": false }
    },
    "imageType": {
      "description": "/** The type of image being exported. */",
      "type": { "returnType": "'jpg' | 'png' | 'gif'", "optional": false }
    },
    "altText": {
      "description": "/** Alt Text for the image. */",
      "type": { "returnType": "string", "optional": true }
    },
    "fitCell": {
      "description": "/** If set to `true`, the image will cover the whole cell that is being imported to.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "transparency": {
      "description": "/** Set a value between 0 - 100 that will indicate the percentage of transparency of the image.\n     * Default: `0`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "rotation": {
      "description": "/** Set a value between 0 - 359 that will indicate the number of degrees to rotate the image clockwise.\n     * Default: `0`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "recolor": {
      "description": "/** Set this property to select a preset that changes the appearance of the image. */",
      "type": {
        "returnType": "'Grayscale' | 'Sepia' | 'Washout'",
        "optional": true
      }
    },
    "width": {
      "description": "/** The width of the image in pixels. If this value is not selected, `fitCell` will be automatically set to true. */",
      "type": { "returnType": "number", "optional": true }
    },
    "height": {
      "description": "/** The height of the image in pixels. If this value is not selected, `fitCell` will be automatically set to true. */",
      "type": { "returnType": "number", "optional": true }
    },
    "position": {
      "description": "/** Position of the image. */",
      "type": { "returnType": "ExcelImagePosition", "optional": true }
    }
  },
  "ExcelDataType": {},
  "ExcelOOXMLDataType": {},
  "ExcelData": {
    "type": {
      "description": "/** The type of data being in the cell. */",
      "type": {
        "returnType": "ExcelDataType | ExcelOOXMLDataType",
        "optional": false
      }
    },
    "value": {
      "description": "/** The value of the cell. */",
      "type": { "returnType": "string | null", "optional": false }
    }
  },
  "ExcelRelationship": {
    "Id": { "type": { "returnType": "string", "optional": false } },
    "Type": { "type": { "returnType": "string", "optional": false } },
    "Target": { "type": { "returnType": "string", "optional": false } }
  },
  "ExcelContentType": {
    "name": {
      "type": { "returnType": "'Default' | 'Override'", "optional": false }
    },
    "ContentType": { "type": { "returnType": "string", "optional": false } },
    "Extension": { "type": { "returnType": "string", "optional": true } },
    "PartName": { "type": { "returnType": "string", "optional": true } }
  },
  "ExcelXMLTemplate": {
    "getTemplate": {
      "type": {
        "arguments": {
          "styleProperties?": "ExcelStyle | ExcelWorksheet | ExcelColumn | ExcelRow | ExcelCell"
        },
        "returnType": "XmlElement",
        "optional": false
      }
    }
  },
  "ExcelOOXMLTemplate": {
    "getTemplate": {
      "type": {
        "arguments": {
          "config?": "any",
          "idx?": "number",
          "currentSheet?": "number"
        },
        "returnType": "XmlElement",
        "optional": false
      }
    },
    "convertType": {
      "type": {
        "arguments": { "type": "string" },
        "returnType": "string",
        "optional": true
      }
    }
  },
  "ExcelFactoryMode": {},
  "ColumnWidthCallbackParams": {
    "column": { "type": { "returnType": "Column | null", "optional": false } },
    "index": { "type": { "returnType": "number", "optional": false } }
  },
  "RowHeightCallbackParams": {
    "rowIndex": { "type": { "returnType": "number", "optional": false } }
  },
  "ExcelExportParams": {
    "author": {
      "description": "/** The author of the exported file. Default: `\"AG Grid\"` */",
      "type": { "returnType": "string", "optional": true }
    },
    "autoConvertFormulas": {
      "description": "/** If set to `true`, this will try to convert any cell that starts with `=` to a formula, instead of setting the cell value as regular string that starts with `=`.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "columnWidth": {
      "description": "/** Defines the default column width. If no value is present, each column will have value currently set in the application with a min value of 75px. This property can also be supplied a callback function that returns a number.\n     */",
      "type": {
        "returnType": "number | ((params: ColumnWidthCallbackParams) => number)",
        "optional": true
      }
    },
    "exportMode": {
      "description": "/** For backwards compatibility, this property could be set to `xml`, which will export an Excel Spreadsheet compatible with old Office versions (prior to Office 2007). Setting this to `xml` is not recommended as some features will not work in legacy mode.\n     * Default: `xlsx`\n     */",
      "type": { "returnType": "'xlsx' | 'xml'", "optional": true }
    },
    "fontSize": {
      "description": "/** The default value for the font size of the Excel document.\n     * Default: `11`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "headerRowHeight": {
      "description": "/** The height in pixels of header rows. Defaults to Excel default value. This property can also be supplied a callback function that returns a number.\n     */",
      "type": {
        "returnType": "number | ((params: RowHeightCallbackParams) => number)",
        "optional": true
      }
    },
    "rowHeight": {
      "description": "/** The height in pixels of all rows. Defaults to Excel default value. This property can also be supplied a callback function that returns a number.\n     */",
      "type": {
        "returnType": "number | ((params: RowHeightCallbackParams) => number)",
        "optional": true
      }
    },
    "sheetName": {
      "description": "/** The name of the sheet in Excel where the grid will be exported. There is a max limit of 31 characters.\n     * Default: `ag-grid`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "margins": {
      "description": "/** The Excel document page margins. Relevant for printing. */",
      "type": { "returnType": "ExcelSheetMargin", "optional": true }
    },
    "pageSetup": {
      "description": "/** Allows you to setup the page orientation and size. */",
      "type": { "returnType": "ExcelSheetPageSetup", "optional": true }
    },
    "headerFooterConfig": {
      "description": "/** The configuration for header and footers. */",
      "type": { "returnType": "ExcelHeaderFooterConfig", "optional": true }
    },
    "suppressTextAsCDATA": {
      "description": "/** If `true`, text content will be encoded with XML character entities like `&amp;lt;` and `&amp;gt;`. This is only relevant when `exportMode='xml'`.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "mimeType": {
      "description": "/** The mimeType of the Excel file. Note that this defaults to `application/vnd.ms-excel` if exportMode is `xml`.\n     * Default: `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "addImageToCell": {
      "description": "/** Use to export an image for the gridCell in question. */",
      "type": {
        "arguments": {
          "rowIndex": "number",
          "column": "Column",
          "value": "string"
        },
        "returnType": "{ image: ExcelImage; value?: string; } | undefined",
        "optional": true
      }
    },
    "prependContent": {
      "description": "/** Content to put at the top of the exported sheet.\n     */",
      "type": { "returnType": "ExcelRow[]", "optional": true }
    },
    "appendContent": {
      "description": "/** Content to put at the bottom of the exported sheet.\n     */",
      "type": { "returnType": "ExcelRow[]", "optional": true }
    },
    "customHeader": {
      "description": "/** @deprecated Use prependContent\n     */",
      "type": { "returnType": "ExcelRow[]", "optional": true }
    },
    "customFooter": {
      "description": "/** @deprecated Use appendContent\n     */",
      "type": { "returnType": "ExcelRow[]", "optional": true }
    },
    "getCustomContentBelowRow": {
      "description": "/** A callback function to return content to be inserted below a row in the export. */",
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "ExcelRow[] | undefined",
        "optional": true
      }
    },
    "allColumns": {
      "description": "/** If `true`, all columns will be exported in the order they appear in the columnDefs.\n     * When `false` only the columns currently being displayed will be exported.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "columnKeys": {
      "description": "/** Provide a list (an array) of column keys or Column objects if you want to export specific columns.\n     */",
      "type": { "returnType": "(string | Column)[]", "optional": true }
    },
    "rowPositions": {
      "description": "/** Row node positions. */",
      "type": { "returnType": "RowPosition[]", "optional": true }
    },
    "fileName": {
      "description": "/** String to use as the file name.\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "exportedRows": {
      "description": "/** Determines whether rows are exported before being filtered and sorted.\n     * Default: `filteredAndSorted`\n     */",
      "type": { "returnType": "'all' | 'filteredAndSorted'", "optional": true }
    },
    "onlySelected": {
      "description": "/** Export only selected rows.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "onlySelectedAllPages": {
      "description": "/** Only export selected rows including other pages (only makes sense when using pagination).\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipColumnGroupHeaders": {
      "description": "/** Set to `true` to exclude header column groups.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipColumnHeaders": {
      "description": "/** Set to `true` if you don't want to export column headers.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipRowGroups": {
      "description": "/** Set to `true` to skip row group headers if grouping rows. Only relevant when grouping rows.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipPinnedTop": {
      "description": "/** Set to `true` to suppress exporting rows pinned to the top of the grid.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipPinnedBottom": {
      "description": "/** Set to `true` to suppress exporting rows pinned to the bottom of the grid.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "shouldRowBeSkipped": {
      "description": "/** A callback function that will be invoked once per row in the grid. Return true to omit the row from the export.\n     */",
      "type": {
        "arguments": { "params": "ShouldRowBeSkippedParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "processCellCallback": {
      "description": "/** A callback function invoked once per cell in the grid. Return a string value to be displayed in the export. For example this is useful for formatting date values.\n     */",
      "type": {
        "arguments": { "params": "ProcessCellForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processHeaderCallback": {
      "description": "/** A callback function invoked once per column. Return a string to be displayed in the column header.\n     */",
      "type": {
        "arguments": { "params": "ProcessHeaderForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processGroupHeaderCallback": {
      "description": "/** A callback function invoked once per column group. Return a `string` to be displayed in the column group header.\n     * Note that column groups are exported by default, this option will not work with `skipColumnGroupHeaders=true`.\n     */",
      "type": {
        "arguments": { "params": "ProcessGroupHeaderForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processRowGroupCallback": {
      "description": "/** A callback function invoked once per row group. Return a `string` to be displayed in the group cell.\n     */",
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "columnGroups": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipGroups": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipHeader": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "ExcelExportMultipleSheetParams": {
    "author": {
      "description": "/** The author of the exported file.\n     * Default: `AG Grid`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "data": {
      "description": "/** Array of strings containing the raw data for Excel workbook sheets.\n     * This property is only used when exporting to multiple sheets using `api.exportMultipleSheetsAsExcel()` and the data for each sheet is obtained by calling `api.getSheetDataForExcel()`.\n     */",
      "type": { "returnType": "string[]", "optional": false }
    },
    "fileName": {
      "description": "/** String to use as the file name.\n     * Default: `export.xlsx`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "fontSize": {
      "description": "/** The default value for the font size of the Excel document.\n     * Default: `11`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "mimeType": {
      "description": "/** The mimeType of the Excel file.\n     * Default: `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`\n     */",
      "type": { "returnType": "string", "optional": true }
    }
  },
  "ExcelHeaderFooterConfig": {
    "all": {
      "description": "/** The configuration for header and footer on every page. */",
      "type": { "returnType": "ExcelHeaderFooter", "optional": true }
    },
    "first": {
      "description": "/** The configuration for header and footer on the first page only. */",
      "type": { "returnType": "ExcelHeaderFooter", "optional": true }
    },
    "even": {
      "description": "/** The configuration for header and footer on even numbered pages only. */",
      "type": { "returnType": "ExcelHeaderFooter", "optional": true }
    }
  },
  "ExcelHeaderFooter": {
    "header": {
      "description": "/** An array of maximum 3 items (`Left`, `Center`, `Right`), containing header configurations. */",
      "type": { "returnType": "ExcelHeaderFooterContent[]", "optional": true }
    },
    "footer": {
      "description": "/** An array of maximum 3 items (`Left`, `Center`, `Right`), containing footer configurations. */",
      "type": { "returnType": "ExcelHeaderFooterContent[]", "optional": true }
    }
  },
  "ExcelHeaderFooterContent": {
    "value": {
      "description": "/** The value of the text to be included in the header. */",
      "type": { "returnType": "string", "optional": false }
    },
    "position": {
      "description": "/** Configures where the text should be added: `Left`, `Center` or `Right`.\n     * Default: `Left`\n     */",
      "type": { "returnType": "'Left' | 'Center' | 'Right'", "optional": true }
    },
    "font": {
      "description": "/** The font style of the header/footer value. */",
      "type": { "returnType": "ExcelFont", "optional": true }
    }
  },
  "IExcelCreator": {
    "exportDataAsExcel": {
      "type": {
        "arguments": { "params?": "ExcelExportParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "getDataAsExcel": {
      "type": {
        "arguments": { "params?": "ExcelExportParams" },
        "returnType": "Blob | string | undefined",
        "optional": false
      }
    },
    "getSheetDataForExcel": {
      "type": {
        "arguments": { "params?": "ExcelExportParams" },
        "returnType": "string",
        "optional": false
      }
    },
    "getMultipleSheetsAsExcel": {
      "type": {
        "arguments": { "params": "ExcelExportMultipleSheetParams" },
        "returnType": "Blob | undefined",
        "optional": false
      }
    },
    "exportMultipleSheetsAsExcel": {
      "type": {
        "arguments": { "params": "ExcelExportMultipleSheetParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "setFactoryMode": {
      "description": "/** private methods */",
      "type": {
        "arguments": {
          "factoryMode": "ExcelFactoryMode",
          "exportMode": "'xml' | 'xlsx'"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "getFactoryMode": {
      "type": {
        "arguments": { "exportMode": "'xml' | 'xlsx'" },
        "returnType": "ExcelFactoryMode",
        "optional": false
      }
    }
  },
  "ExcelSheetMargin": {
    "top": {
      "description": "/** The sheet top margin.\n     * Default: `0.75`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "right": {
      "description": "/** The sheet right margin.\n     * Default: `0.7`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "bottom": {
      "description": "/** The sheet bottom margin.\n     * Default: `0.75`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "left": {
      "description": "/** The sheet left margin.\n     * Default: `0.7`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "header": {
      "description": "/** The sheet header margin.\n     * Default: `0.3`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "footer": {
      "description": "/** The sheet footer margin.\n     * Default: `0.3`\n     */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "ExcelSheetPageSetup": {
    "orientation": {
      "description": "/** Use this property to change the print orientation.\n     * Default: `Portrait`\n     */",
      "type": { "returnType": "'Portrait' | 'Landscape'", "optional": true }
    },
    "pageSize": {
      "description": "/** Use this property to set the sheet size.\n     * Default: `Letter`\n     */",
      "type": {
        "returnType": "'Letter' | 'Letter Small' | 'Tabloid' | 'Ledger' | 'Legal' | 'Statement' | 'Executive' | 'A3' | 'A4' | 'A4 Small' | 'A5' | 'A6' | 'B4' | 'B5' | 'Folio' | 'Envelope' | 'Envelope DL' | 'Envelope C5' | 'Envelope B5' | 'Envelope C3' | 'Envelope C4' | 'Envelope C6' | 'Envelope Monarch' | 'Japanese Postcard' | 'Japanese Double Postcard'",
        "optional": true
      }
    }
  },
  "IFilterType": {},
  "IFloatingFilterType": {},
  "IFilterDef": {
    "filter": {
      "description": "/** Filter component to use for this column.\n     * - Set to `true` to use the default filter.\n     * - Set to the name of a provided filter: `set`, `number`, `text`, `date`.\n     * - Set to a `IFilterComp`.\n     */",
      "type": { "returnType": "any", "optional": true }
    },
    "filterFramework": {
      "description": "/** @deprecated Provided a custom framework filter to use for this column. As of v27, you can use filter instead for Framework Components.  */",
      "type": { "returnType": "any", "optional": true }
    },
    "filterParams": {
      "description": "/** Params to be passed to the filter component specified in `filter` or `filterFramework`. */",
      "type": { "returnType": "any", "optional": true }
    },
    "floatingFilterComponent": {
      "description": "/** The custom component to be used for rendering the floating filter.\n     * If none is specified the default AG Grid is used.\n     */",
      "type": { "returnType": "any", "optional": true }
    },
    "floatingFilterComponentFramework": {
      "description": "/** @deprecated Floating filter framework component to use for this column. As of v27, you can use floatingFilterComponent instead for Framework Components. */",
      "type": { "returnType": "any", "optional": true }
    },
    "floatingFilterComponentParams": {
      "description": "/** Params to be passed to `floatingFilterComponent` or `floatingFilterComponentFramework`. */",
      "type": { "returnType": "any", "optional": true }
    }
  },
  "IFilter": {
    "isFilterActive": {
      "description": "/** Returns `true` if the filter is currently active, otherwise `false`. \n     * If active then 1) the grid will show the filter icon in the column header \n     * and 2) the filter will be included in the filtering of the data.\n    */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "doesFilterPass": {
      "description": "/** The grid will ask each active filter, in turn, whether each row in the grid passes. If any\n     * filter fails, then the row will be excluded from the final set. The method is provided a\n     * params object with attributes node (the rodNode the grid creates that wraps the data) and data\n     * (the data object that you provided to the grid for that row).\n     */",
      "type": {
        "arguments": { "params": "IDoesFilterPassParams" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getModel": {
      "description": "/** Returns a model representing the current state of the filter, or `null` if the filter is\n     * not active. The grid calls `getModel()` on all active filters when `gridApi.getFilterModel()` is called.\n     */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "setModel": {
      "description": "/** Sets the state of the filter using the supplied model. Providing `null` as the model will\n     * de-activate the filter.\n     */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "void | AgPromise<void>",
        "optional": false
      }
    },
    "onNewRowsLoaded": {
      "description": "/** Gets called when new rows are inserted into the grid. If the filter needs to change its\n     state after rows are loaded, it can do it here. For example the set filters uses this\n     to update the list of available values to select from (e.g. 'Ireland', 'UK' etc for\n     Country filter). To get the list of available values from within this method from the\n    Client Side Row Model, use `gridApi.forEachLeafNode(callback)`.\n    */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "onAnyFilterChanged": {
      "description": "/** Called whenever any filter is changed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getModelAsString": {
      "description": "/** Optional method used by AG Grid when rendering floating filters and there isn't a floating filter\n     * associated for this filter, this will happen if you create a custom filter and NOT a custom floating\n     * filter.\n     */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "string",
        "optional": true
      }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "afterGuiDetached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been removed from the screen.\n     * If a parent popup is opened and closed (e.g. for filters), this method is called each time the component is hidden.\n     * This is useful for any logic to reset the UI state back to the model before the component is reopened.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "ProvidedFilterModel": {
    "filterType": { "type": { "returnType": "string", "optional": true } }
  },
  "IFilterComp": {
    "meta": { "typeParams": ["TData = any"] },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. */",
      "type": {
        "arguments": { "params": "IFilterParams<TData>" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    },
    "isFilterActive": {
      "description": "/** Returns `true` if the filter is currently active, otherwise `false`. \n     * If active then 1) the grid will show the filter icon in the column header \n     * and 2) the filter will be included in the filtering of the data.\n    */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "doesFilterPass": {
      "description": "/** The grid will ask each active filter, in turn, whether each row in the grid passes. If any\n     * filter fails, then the row will be excluded from the final set. The method is provided a\n     * params object with attributes node (the rodNode the grid creates that wraps the data) and data\n     * (the data object that you provided to the grid for that row).\n     */",
      "type": {
        "arguments": { "params": "IDoesFilterPassParams" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getModel": {
      "description": "/** Returns a model representing the current state of the filter, or `null` if the filter is\n     * not active. The grid calls `getModel()` on all active filters when `gridApi.getFilterModel()` is called.\n     */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "setModel": {
      "description": "/** Sets the state of the filter using the supplied model. Providing `null` as the model will\n     * de-activate the filter.\n     */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "void | AgPromise<void>",
        "optional": false
      }
    },
    "onNewRowsLoaded": {
      "description": "/** Gets called when new rows are inserted into the grid. If the filter needs to change its\n     state after rows are loaded, it can do it here. For example the set filters uses this\n     to update the list of available values to select from (e.g. 'Ireland', 'UK' etc for\n     Country filter). To get the list of available values from within this method from the\n    Client Side Row Model, use `gridApi.forEachLeafNode(callback)`.\n    */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "onAnyFilterChanged": {
      "description": "/** Called whenever any filter is changed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getModelAsString": {
      "description": "/** Optional method used by AG Grid when rendering floating filters and there isn't a floating filter\n     * associated for this filter, this will happen if you create a custom filter and NOT a custom floating\n     * filter.\n     */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "string",
        "optional": true
      }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "afterGuiDetached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been removed from the screen.\n     * If a parent popup is opened and closed (e.g. for filters), this method is called each time the component is hidden.\n     * This is useful for any logic to reset the UI state back to the model before the component is reopened.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "IDoesFilterPassParams": {
    "node": {
      "description": "/** The row node in question. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "data": {
      "description": "/** The data part of the row node in question. */",
      "type": { "returnType": "TData", "optional": false }
    },
    "meta": { "typeParams": ["TData = any"] }
  },
  "IFilterOptionDef": {
    "displayKey": {
      "description": "/** A unique key that does not clash with the built-in filter keys. */",
      "type": { "returnType": "string", "optional": false }
    },
    "displayName": {
      "description": "/** Display name for the filter. Can be replaced by a locale-specific value using a `localeTextFunc`. */",
      "type": { "returnType": "string", "optional": false }
    },
    "predicate": {
      "description": "/** Custom filter logic that returns a boolean based on the `filterValues` and `cellValue`. */",
      "type": {
        "arguments": { "filterValues": "any[]", "cellValue": "any" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "numberOfInputs": {
      "description": "/** Number of inputs to display for this option. Defaults to `1` if unspecified. */",
      "type": { "returnType": "0 | 1 | 2", "optional": true }
    },
    "test": {
      "description": "/** @deprecated v26.2 use `predicate` instead. */",
      "type": {
        "arguments": { "filterValue": "any", "cellValue": "any" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "hideFilterInput": {
      "description": "/** @deprecated v26.2 use `numberOfInputs: 0` instead. */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "IFilterParams": {
    "column": {
      "description": "/** The column this filter is for. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** The column definition for the column. */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "rowModel": {
      "description": "/** The row model, helpful for looking up data values if needed.\n     * If the filter needs to know which rows are\n     * a) in the table,\n     * b) currently visible (i.e. not already filtered),\n     * c) which groups,\n     * d) what order - all of this can be read from the rowModel.\n     */",
      "type": { "returnType": "IRowModel", "optional": false }
    },
    "filterChangedCallback": {
      "description": "/** A function callback to be called when the filter changes. The\n     * grid will then respond by filtering the grid data. The callback\n     * takes one optional parameter which, if included, will get merged\n     * to the FilterChangedEvent object (useful for passing additional\n     * information to anyone listening to this event, however such extra\n     * attributes are not used by the grid).\n     */",
      "type": {
        "arguments": { "additionalEventAttributes?": "any" },
        "returnType": "void",
        "optional": false
      }
    },
    "filterModifiedCallback": {
      "description": "/** A function callback, to be optionally called, when the filter UI changes.\n     * The grid will respond with emitting a FilterModifiedEvent.\n     * Apart from emitting the event, the grid takes no further action.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "valueGetter": {
      "description": "/** A function callback for the filter to get cell values from provided row data. Called with a\n     * `ValueGetterParams` to get the value for this filter's column for the provided row data.\n     *\n     * The callback takes care of selecting the right column definition and deciding whether to use\n     * the column `valueGetter` or raw field etc.\n     */",
      "type": { "returnType": "ValueGetterFunc<TData>", "optional": false }
    },
    "doesRowPassOtherFilter": {
      "description": "/** A function callback, call with a node to be told whether the node passes all filters except the current filter.\n     * This is useful if you want to only present to the user values that this filter can filter given the status of the other filters.\n     * The set filter uses this to remove from the list,\n     * items that are no longer available due to the state of other filters (like Excel type filtering).\n     */",
      "type": {
        "arguments": { "rowNode": "IRowNode<TData>" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "IFiltersToolPanel": {
    "setFilterLayout": {
      "type": {
        "arguments": { "colDefs": "ColDef[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "expandFilterGroups": {
      "type": {
        "arguments": { "groupIds?": "string[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "collapseFilterGroups": {
      "type": {
        "arguments": { "groupIds?": "string[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "expandFilters": {
      "type": {
        "arguments": { "colIds?": "string[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "collapseFilters": {
      "type": {
        "arguments": { "colIds?": "string[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "syncLayoutWithGrid": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "refresh": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "IFrameworkOverrides": {
    "setTimeout": {
      "description": "/** Because Angular uses Zones, you should not use setTimeout or setInterval (as it'll keep angular constantly doing dirty checks etc\n     * So to get around this, we allow the framework to specify how to execute setTimeout. The default is to just call the browser setTimeout().\n     */",
      "type": {
        "arguments": { "action": "any", "timeout?": "any" },
        "returnType": "void",
        "optional": false
      }
    },
    "setInterval": {
      "type": {
        "arguments": { "action": "any", "interval?": "any" },
        "returnType": "AgPromise<number>",
        "optional": false
      }
    },
    "addEventListener": {
      "description": "/** Again because Angular uses Zones, we allow adding some events outside of Zone JS so that we do not kick off\n     * the Angular change detection. We do this for some events ONLY, and not all events, just events that get fired\n     * a lot (eg mouse move), but we need to make sure in AG Grid that we do NOT call any grid callbacks while processing\n     * these events, as we will be outside of ZoneJS and hence Angular2 Change Detection won't work. However it's fine\n     * for our code to result in AG Grid events (and Angular application action on these) as these go through\n     * Event Emitter's.\n     *\n     * This was done by Niall and Sean. The problematic events are mouseover, mouseout, mouseenter and mouseleave.\n     */",
      "type": {
        "arguments": {
          "element": "HTMLElement",
          "type": "string",
          "listener": "EventListenerOrEventListenerObject",
          "options?": "boolean | AddEventListenerOptions"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "dispatchEvent": {
      "type": {
        "arguments": {
          "eventType": "string",
          "listener": "() => {}",
          "global": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "frameworkComponent": {
      "type": {
        "arguments": { "name": "string", "components?": "any" },
        "returnType": "any",
        "optional": false
      }
    },
    "isFrameworkComponent": {
      "type": {
        "arguments": { "comp": "any" },
        "returnType": "boolean",
        "optional": false
      }
    }
  },
  "IHeaderColumn": {
    "getUniqueId": {
      "type": { "arguments": {}, "returnType": "string", "optional": false }
    },
    "getActualWidth": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getMinWidth": {
      "type": {
        "arguments": {},
        "returnType": "number | null | undefined",
        "optional": false
      }
    },
    "getLeft": {
      "type": {
        "arguments": {},
        "returnType": "number | null",
        "optional": false
      }
    },
    "getOldLeft": {
      "type": {
        "arguments": {},
        "returnType": "number | null",
        "optional": false
      }
    },
    "getDefinition": {
      "type": {
        "arguments": {},
        "returnType": "AbstractColDef | null",
        "optional": false
      }
    },
    "getColumnGroupShow": {
      "type": {
        "arguments": {},
        "returnType": "ColumnGroupShowType | undefined",
        "optional": false
      }
    },
    "getParent": {
      "type": {
        "arguments": {},
        "returnType": "IHeaderColumn",
        "optional": false
      }
    },
    "isResizable": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "setParent": {
      "type": {
        "arguments": { "parent": "ColumnGroup | null" },
        "returnType": "void",
        "optional": false
      }
    },
    "isEmptyGroup": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "isMoving": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getPinned": {
      "type": {
        "arguments": {},
        "returnType": "ColumnPinnedType",
        "optional": false
      }
    },
    "addEventListener": {
      "type": {
        "arguments": {
          "eventType": "string",
          "listener": "EventListener",
          "async?": "boolean",
          "options?": "AddEventListenerOptions"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "removeEventListener": {
      "type": {
        "arguments": {
          "eventType": "string",
          "listener": "EventListener",
          "async?": "boolean",
          "options?": "AddEventListenerOptions"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "IImmutableService": {
    "setRowData": {
      "type": {
        "arguments": { "data": "any[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "isActive": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    }
  },
  "IInfiniteRowModel": {
    "setDatasource": {
      "type": {
        "arguments": { "datasource": "IDatasource | undefined" },
        "returnType": "void",
        "optional": false
      }
    },
    "refreshCache": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "purgeCache": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "setRowCount": {
      "type": {
        "arguments": { "rowCount": "number", "maxRowFound?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "getRow": {
      "description": "/** Returns the rowNode at the given index. */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowNode | undefined",
        "optional": false
      }
    },
    "getRowNode": {
      "description": "/** Returns the rowNode for given id. */",
      "type": {
        "arguments": { "id": "string" },
        "returnType": "RowNode | undefined",
        "optional": false
      }
    },
    "getRowCount": {
      "description": "/** Returns the number of rows */",
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getTopLevelRowCount": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getTopLevelRowDisplayedIndex": {
      "type": {
        "arguments": { "topLevelIndex": "number" },
        "returnType": "number",
        "optional": false
      }
    },
    "getRowIndexAtPixel": {
      "description": "/** Returns the row index at the given pixel */",
      "type": {
        "arguments": { "pixel": "number" },
        "returnType": "number",
        "optional": false
      }
    },
    "isRowPresent": {
      "description": "/** Returns true if the provided rowNode is in the list of rows to render */",
      "type": {
        "arguments": { "rowNode": "RowNode" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getRowBounds": {
      "description": "/** Returns row top and bottom for a given row */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowBounds | null",
        "optional": false
      }
    },
    "isEmpty": {
      "description": "/** Returns true if this model has no rows, regardless of model filter. EG if rows present, but filtered\n     * out, this still returns false. If it returns true, then the grid shows the 'no rows' overlay - but we\n     * don't show that overlay if the rows are just filtered out. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "isRowsToRender": {
      "description": "/** Returns true if no rows (either no rows at all, or the rows are filtered out). This is what the grid\n     * uses to know if there are rows to render or not. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getNodesInRangeForSelection": {
      "description": "/** Returns all rows in range that should be selected. If there is a gap in range (non ClientSideRowModel) then\n     *  then no rows should be returned  */",
      "type": {
        "arguments": { "first": "RowNode", "last": "RowNode | null" },
        "returnType": "RowNode[]",
        "optional": false
      }
    },
    "forEachNode": {
      "description": "/** Iterate through each node. What this does depends on the model type. For clientSide, goes through\n     * all nodes. For serverSide, goes through what's loaded in memory. */",
      "type": {
        "arguments": {
          "callback": "(rowNode: RowNode, index: number) => void",
          "includeFooterNodes?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "getType": {
      "description": "/** The base class returns the type. We use this instead of 'instanceof' as the client might provide\n     * their own implementation of the models in the future. */",
      "type": {
        "arguments": {},
        "returnType": "RowModelType",
        "optional": false
      }
    },
    "isLastRowIndexKnown": {
      "description": "/** It tells us if this row model knows about the last row that it can produce. This is used by the\n     * PaginationPanel, if last row is not found, then the 'last' button is disabled and the last page is\n     * not shown. This is always true for ClientSideRowModel. It toggles for InfiniteRowModel.\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "ensureRowHeightsValid": {
      "description": "/** Used by CSRM only - is makes sure there are now estimated row heights within the range. */",
      "type": {
        "arguments": {
          "startPixel": "number",
          "endPixel": "number",
          "startLimitIndex": "number",
          "endLimitIndex": "number"
        },
        "returnType": "boolean",
        "optional": false
      }
    },
    "start": {
      "description": "/** Gets called after grid is initialised. What happens depends on row model. Client Side will take rowData\n     * from gridOptions, the other row models will start calling their datasources. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "IMenuFactory": {
    "showMenuAfterButtonClick": {
      "type": {
        "arguments": {
          "column": "Column | null",
          "eventSource": "HTMLElement",
          "containerType": "ContainerType",
          "defaultTab?": "string",
          "restrictToTabs?": "string[]"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "showMenuAfterMouseEvent": {
      "type": {
        "arguments": {
          "column": "Column",
          "mouseEvent": "MouseEvent | Touch",
          "defaultTab?": "string",
          "restrictToTabs?": "string[]"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "isMenuEnabled": {
      "type": {
        "arguments": { "column": "Column" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "hideActiveMenu": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "ModuleValidationValidResult": {},
  "ModuleValidationInvalidResult": {},
  "ModuleValidationResult": {},
  "Module": {
    "version": { "type": { "returnType": "string", "optional": false } },
    "validate": {
      "description": "/** Validation run when registering the module\n     * \n     * @return Whether the module is valid or not. If not, a message explaining why it is not valid\n     */",
      "type": {
        "arguments": {},
        "returnType": "ModuleValidationResult",
        "optional": true
      }
    },
    "moduleName": { "type": { "returnType": "string", "optional": false } },
    "beans": { "type": { "returnType": "any[]", "optional": true } },
    "agStackComponents": {
      "type": { "returnType": "ComponentMeta[]", "optional": true }
    },
    "controllers": {
      "type": { "returnType": "ControllerMeta[]", "optional": true }
    },
    "userComponents": {
      "type": {
        "returnType": "{componentName: string, componentClass: any}[]",
        "optional": true
      }
    },
    "rowModel": { "type": { "returnType": "RowModelType", "optional": true } },
    "dependantModules": {
      "type": { "returnType": "Module[]", "optional": true }
    }
  },
  "IMultiFilter": {
    "getChildFilterInstance": {
      "description": "/** @returns the child filter instance at the given index. */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "IFilter | undefined",
        "optional": false
      }
    },
    "applyModel": {
      "description": "/** Applies the model shown in the UI (so that `getModel()` will now return what was in the UI\n     * when `applyModel()` was called).\n     * @param source The source of the method call. Default 'api'.\n     */",
      "type": {
        "arguments": { "source?": "'api' | 'ui' | 'rowDataUpdated'" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getModelFromUi": {
      "description": "/** Returns the filter model from the UI. If changes have been made to the UI but not yet\n     * applied, this model will reflect those changes.\n     */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "isFilterActive": {
      "description": "/** Returns `true` if the filter is currently active, otherwise `false`. \n     * If active then 1) the grid will show the filter icon in the column header \n     * and 2) the filter will be included in the filtering of the data.\n    */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "doesFilterPass": {
      "description": "/** The grid will ask each active filter, in turn, whether each row in the grid passes. If any\n     * filter fails, then the row will be excluded from the final set. The method is provided a\n     * params object with attributes node (the rodNode the grid creates that wraps the data) and data\n     * (the data object that you provided to the grid for that row).\n     */",
      "type": {
        "arguments": { "params": "IDoesFilterPassParams" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getModel": {
      "description": "/** Returns a model representing the current state of the filter, or `null` if the filter is\n     * not active. The grid calls `getModel()` on all active filters when `gridApi.getFilterModel()` is called.\n     */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "setModel": {
      "description": "/** Sets the state of the filter using the supplied model. Providing `null` as the model will\n     * de-activate the filter.\n     */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "void | AgPromise<void>",
        "optional": false
      }
    },
    "onNewRowsLoaded": {
      "description": "/** Gets called when new rows are inserted into the grid. If the filter needs to change its\n     state after rows are loaded, it can do it here. For example the set filters uses this\n     to update the list of available values to select from (e.g. 'Ireland', 'UK' etc for\n     Country filter). To get the list of available values from within this method from the\n    Client Side Row Model, use `gridApi.forEachLeafNode(callback)`.\n    */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "onAnyFilterChanged": {
      "description": "/** Called whenever any filter is changed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getModelAsString": {
      "description": "/** Optional method used by AG Grid when rendering floating filters and there isn't a floating filter\n     * associated for this filter, this will happen if you create a custom filter and NOT a custom floating\n     * filter.\n     */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "string",
        "optional": true
      }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "afterGuiDetached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been removed from the screen.\n     * If a parent popup is opened and closed (e.g. for filters), this method is called each time the component is hidden.\n     * This is useful for any logic to reset the UI state back to the model before the component is reopened.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "IMultiFilterDef": {
    "display": {
      "description": "/** Configures how the filter is shown in the Multi Filter.\n     * Default: `inline`\n     */",
      "type": {
        "returnType": "'inline' | 'accordion' | 'subMenu'",
        "optional": true
      }
    },
    "title": {
      "description": "/** The title to be used when a filter is displayed inside a sub-menu or accordion. */",
      "type": { "returnType": "string", "optional": true }
    },
    "filter": {
      "description": "/** Child filter component to use inside the Multi Filter. */",
      "type": { "returnType": "IFilterType", "optional": true }
    },
    "filterFramework": {
      "description": "/** Child filter component to use inside the Multi Filter. */",
      "type": { "returnType": "any", "optional": true }
    },
    "filterParams": {
      "description": "/** Custom parameters to be passed to the child filter component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "floatingFilterComponent": {
      "description": "/** Floating filter component to use for the child filter. */",
      "type": { "returnType": "IFloatingFilterType", "optional": true }
    },
    "floatingFilterComponentFramework": {
      "description": "/** Floating framework filter component to use for the child filter. */",
      "type": { "returnType": "any", "optional": true }
    },
    "floatingFilterComponentParams": {
      "description": "/** Custom parameters to be passed to the floating filter component. */",
      "type": { "returnType": "any", "optional": true }
    }
  },
  "MultiFilterParams": { "meta": { "typeParams": ["TData = any"] } },
  "IMultiFilterParams": {
    "filters": {
      "description": "/** An array of filter definition objects. */",
      "type": { "returnType": "IMultiFilterDef[]", "optional": true }
    },
    "readOnly": {
      "description": "/** If true, all UI inputs managed by this filter are for display only, and the filter can only\n     * be affected by API calls. Does NOT affect child filters, they need to be individually\n     * configured with `readOnly` where applicable.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "IMultiFilterModel": {
    "filterType": {
      "description": "/** Multi filter type.  */",
      "type": { "returnType": "'multi'", "optional": true }
    },
    "filterModels": {
      "description": "/** Child filter models in the same order as the filters are specified in `filterParams`.\n     */",
      "type": { "returnType": "any[] | null", "optional": false }
    }
  },
  "IMultiFilterComp": {
    "isFilterActive": {
      "description": "/** Returns `true` if the filter is currently active, otherwise `false`. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getModel": {
      "description": "/** Returns a model representing the current state of the filter, or `null` if the filter is not active. */",
      "type": {
        "arguments": {},
        "returnType": "ProvidedFilterModel | null",
        "optional": false
      }
    },
    "setModel": {
      "description": "/** Sets the state of the child filters using the supplied models. Providing `null` will\n     * de-activate all child filters.\n     * \n     * **Note:** if you are providing values asynchronously to a child Set Filter,\n     * you need to wait for these changes to be applied before performing any further actions by\n     * waiting on the returned grid promise, e.g.\n     * `filter.setModel([null, { values: ['a', 'b'] }]).then(function() { gridApi.onFilterChanged(); });`\n     */",
      "type": {
        "arguments": { "model": "IMultiFilterModel | null" },
        "returnType": "void | AgPromise<void>",
        "optional": false
      }
    },
    "getChildFilterInstance": {
      "description": "/** Returns the child filter instance at the specified index or `undefined` for an invalid index.  */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "IFilterComp | undefined",
        "optional": false
      }
    }
  },
  "IPopupComponent": {
    "isPopup": {
      "description": "/** Gets called once after initialised. If you return true, the component will appear in a popup, and it will be\n     *  constrained to the boundaries of the popupParent. This is great if you want to, for example, provide you own\n     * custom dropdown list for selection. Default is false (ie if you don't provide the method). */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "focusIn": {
      "description": "/** Called when focus is within the component */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "focusOut": {
      "description": "/** Called when focus is leaving the component */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "meta": { "typeParams": ["T"] },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. */",
      "type": {
        "arguments": { "params": "T" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "IProvidedColumn": {
    "isVisible": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getInstanceId": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getColumnGroupShow": {
      "type": {
        "arguments": {},
        "returnType": "ColumnGroupShowType | undefined",
        "optional": false
      }
    },
    "getId": {
      "type": { "arguments": {}, "returnType": "string", "optional": false }
    },
    "setOriginalParent": {
      "type": {
        "arguments": { "originalParent": "ProvidedColumnGroup | null" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "IRangeService": {
    "isEmpty": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "removeAllCellRanges": {
      "type": {
        "arguments": { "silent?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "getCellRangeCount": {
      "type": {
        "arguments": { "cell": "CellPosition" },
        "returnType": "number",
        "optional": false
      }
    },
    "isCellInAnyRange": {
      "type": {
        "arguments": { "cell": "CellPosition" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "isCellInSpecificRange": {
      "type": {
        "arguments": { "cell": "CellPosition", "range": "CellRange" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "isBottomRightCell": {
      "type": {
        "arguments": { "cellRange": "CellRange", "cell": "CellPosition" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "isContiguousRange": {
      "type": {
        "arguments": { "cellRange": "CellRange" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "isMoreThanOneCell": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "areAllRangesAbleToMerge": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "onDragStart": {
      "type": {
        "arguments": { "mouseEvent": "MouseEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "onDragStop": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "onDragging": {
      "type": {
        "arguments": { "mouseEvent": "MouseEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "getCellRanges": {
      "type": {
        "arguments": {},
        "returnType": "CellRange[]",
        "optional": false
      }
    },
    "setRangeToCell": {
      "type": {
        "arguments": { "cell": "CellPosition", "appendRange?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "intersectLastRange": {
      "type": {
        "arguments": { "fromMouseClick?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setCellRange": {
      "type": {
        "arguments": { "params": "CellRangeParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "addCellRange": {
      "type": {
        "arguments": { "params": "CellRangeParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "extendLatestRangeInDirection": {
      "type": {
        "arguments": { "event": "KeyboardEvent" },
        "returnType": "CellPosition | undefined",
        "optional": false
      }
    },
    "extendLatestRangeToCell": {
      "type": {
        "arguments": { "cell": "CellPosition" },
        "returnType": "void",
        "optional": false
      }
    },
    "updateRangeEnd": {
      "type": {
        "arguments": {
          "cellRange": "CellRange",
          "cellPosition": "CellPosition",
          "silent?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "getRangeStartRow": {
      "type": {
        "arguments": { "cellRange": "CellRange" },
        "returnType": "RowPosition",
        "optional": false
      }
    },
    "getRangeEndRow": {
      "type": {
        "arguments": { "cellRange": "CellRange" },
        "returnType": "RowPosition",
        "optional": false
      }
    },
    "createCellRangeFromCellRangeParams": {
      "type": {
        "arguments": { "params": "CellRangeParams" },
        "returnType": "CellRange | undefined",
        "optional": false
      }
    },
    "setCellRanges": {
      "type": {
        "arguments": { "cellRanges": "CellRange[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "clearCellRangeCellValues": {
      "type": {
        "arguments": { "cellRanges?": "CellRange[]", "source?": "string" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ISelectionHandle": {
    "getGui": {
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "getType": {
      "type": {
        "arguments": {},
        "returnType": "SelectionHandleType",
        "optional": false
      }
    },
    "refresh": {
      "type": {
        "arguments": { "cellCtrl": "CellCtrl" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ISelectionHandleFactory": {
    "createSelectionHandle": {
      "type": {
        "arguments": { "type": "SelectionHandleType" },
        "returnType": "ISelectionHandle",
        "optional": false
      }
    }
  },
  "SelectionHandleType": {},
  "CellRangeType": {},
  "CellRange": {
    "id": { "type": { "returnType": "string", "optional": true } },
    "type": { "type": { "returnType": "CellRangeType", "optional": true } },
    "startRow": {
      "description": "/** The start row of the range */",
      "type": { "returnType": "RowPosition", "optional": true }
    },
    "endRow": {
      "description": "/** The end row of the range */",
      "type": { "returnType": "RowPosition", "optional": true }
    },
    "columns": {
      "description": "/** The columns in the range */",
      "type": { "returnType": "Column[]", "optional": false }
    },
    "startColumn": {
      "description": "/** The start column for the range */",
      "type": { "returnType": "Column", "optional": false }
    }
  },
  "CellRangeParams": {
    "rowStartIndex": {
      "description": "/** Start row index */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowStartPinned": {
      "description": "/** Pinned state of start row. Either 'top', 'bottom' or null */",
      "type": { "returnType": "RowPinnedType", "optional": true }
    },
    "rowEndIndex": {
      "description": "/** End row index */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowEndPinned": {
      "description": "/** Pinned state of end row. Either 'top', 'bottom' or null */",
      "type": { "returnType": "RowPinnedType", "optional": true }
    },
    "columnStart": {
      "description": "/** Starting column for range */",
      "type": { "returnType": "string | Column", "optional": true }
    },
    "columnEnd": {
      "description": "/** End column for range */",
      "type": { "returnType": "string | Column", "optional": true }
    },
    "columns": {
      "description": "/** Specify Columns to include instead of using `columnStart` and `columnEnd` */",
      "type": { "returnType": "(string | Column)[]", "optional": true }
    }
  },
  "RangeSelection": {
    "start": { "type": { "returnType": "CellPosition", "optional": false } },
    "end": { "type": { "returnType": "CellPosition", "optional": false } },
    "columns": {
      "type": { "returnType": "Column[] | null", "optional": false }
    }
  },
  "AddRangeSelectionParams": {
    "rowStart": { "type": { "returnType": "number", "optional": false } },
    "floatingStart": { "type": { "returnType": "string", "optional": false } },
    "rowEnd": { "type": { "returnType": "number", "optional": false } },
    "floatingEnd": { "type": { "returnType": "string", "optional": false } },
    "columnStart": {
      "type": { "returnType": "string | Column", "optional": false }
    },
    "columnEnd": {
      "type": { "returnType": "string | Column", "optional": false }
    }
  },
  "CellValue": {},
  "IRichCellEditorParams": {
    "values": {
      "description": "/** The list of values to be selected from. */",
      "type": { "returnType": "CellValue[]", "optional": false }
    },
    "cellHeight": {
      "description": "/** The row height, in pixels, of each value. */",
      "type": { "returnType": "number", "optional": false }
    },
    "cellRenderer": {
      "description": "/** The cell renderer to use to render each value. Cell renderers are useful for rendering rich HTML values, or when processing complex data. */",
      "type": { "returnType": "any", "optional": false }
    },
    "searchDebounceDelay": {
      "description": "/** The value in `ms` for the fuzzy search debounce delay. Default: `300` */",
      "type": { "returnType": "number", "optional": true }
    },
    "formatValue": {
      "description": "/** A callback function that allows you to change the displayed value for simple data. */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    },
    "value": {
      "description": "/** Current value of the cell */",
      "type": { "returnType": "TValue", "optional": false }
    },
    "eventKey": {
      "description": "/** Key value of key that started the edit, eg 'Enter' or 'F2' - non-printable\n     *  characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "charPress": {
      "description": "/** The string that started the edit, eg 'a' if letter 'a' was pressed, or 'A' if\n     *  shift + letter 'a' only printable characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "column": {
      "description": "/** Grid column */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** Column definition */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "node": {
      "description": "/** Row node for the cell */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "data": {
      "description": "/** Row data */",
      "type": { "returnType": "TData", "optional": false }
    },
    "rowIndex": {
      "description": "/** Editing row index */",
      "type": { "returnType": "number", "optional": false }
    },
    "cellStartedEdit": {
      "description": "/** If doing full row edit, this is true if the cell is the one that started the edit\n     *  (eg it is the cell the use double clicked on, or pressed a key on etc). */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "onKeyDown": {
      "description": "/** callback to tell grid a key was pressed - useful to pass control key events (tab,\n     *  arrows etc) back to grid - however you do */",
      "type": {
        "arguments": { "event": "KeyboardEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "stopEditing": {
      "description": "/** Callback to tell grid to stop editing the current cell. Call with input parameter\n     * true to prevent focus from moving to the next cell after editing stops in case the\n     * grid property `enterMovesDownAfterEdit=true` */",
      "type": {
        "arguments": { "suppressNavigateAfterEdit?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "eGridCell": {
      "description": "/** A reference to the DOM element representing the grid cell that your component\n     *  will live inside. Useful if you want to add event listeners or classes at this level.\n     *  This is the DOM element that gets browser focus when selecting cells. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "parseValue": {
      "description": "/** Utility function to parse a value using the column's `colDef.valueParser` */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any", "TValue = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "RowBounds": {
    "rowTop": { "type": { "returnType": "number", "optional": false } },
    "rowHeight": { "type": { "returnType": "number", "optional": false } },
    "rowIndex": { "type": { "returnType": "number", "optional": true } }
  },
  "RowModelType": {},
  "IRowModel": {
    "getRow": {
      "description": "/** Returns the rowNode at the given index. */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowNode | undefined",
        "optional": false
      }
    },
    "getRowNode": {
      "description": "/** Returns the rowNode for given id. */",
      "type": {
        "arguments": { "id": "string" },
        "returnType": "RowNode | undefined",
        "optional": false
      }
    },
    "getRowCount": {
      "description": "/** Returns the number of rows */",
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getTopLevelRowCount": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getTopLevelRowDisplayedIndex": {
      "type": {
        "arguments": { "topLevelIndex": "number" },
        "returnType": "number",
        "optional": false
      }
    },
    "getRowIndexAtPixel": {
      "description": "/** Returns the row index at the given pixel */",
      "type": {
        "arguments": { "pixel": "number" },
        "returnType": "number",
        "optional": false
      }
    },
    "isRowPresent": {
      "description": "/** Returns true if the provided rowNode is in the list of rows to render */",
      "type": {
        "arguments": { "rowNode": "RowNode" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getRowBounds": {
      "description": "/** Returns row top and bottom for a given row */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowBounds | null",
        "optional": false
      }
    },
    "isEmpty": {
      "description": "/** Returns true if this model has no rows, regardless of model filter. EG if rows present, but filtered\n     * out, this still returns false. If it returns true, then the grid shows the 'no rows' overlay - but we\n     * don't show that overlay if the rows are just filtered out. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "isRowsToRender": {
      "description": "/** Returns true if no rows (either no rows at all, or the rows are filtered out). This is what the grid\n     * uses to know if there are rows to render or not. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getNodesInRangeForSelection": {
      "description": "/** Returns all rows in range that should be selected. If there is a gap in range (non ClientSideRowModel) then\n     *  then no rows should be returned  */",
      "type": {
        "arguments": { "first": "RowNode", "last": "RowNode | null" },
        "returnType": "RowNode[]",
        "optional": false
      }
    },
    "forEachNode": {
      "description": "/** Iterate through each node. What this does depends on the model type. For clientSide, goes through\n     * all nodes. For serverSide, goes through what's loaded in memory. */",
      "type": {
        "arguments": {
          "callback": "(rowNode: RowNode, index: number) => void",
          "includeFooterNodes?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "getType": {
      "description": "/** The base class returns the type. We use this instead of 'instanceof' as the client might provide\n     * their own implementation of the models in the future. */",
      "type": {
        "arguments": {},
        "returnType": "RowModelType",
        "optional": false
      }
    },
    "isLastRowIndexKnown": {
      "description": "/** It tells us if this row model knows about the last row that it can produce. This is used by the\n     * PaginationPanel, if last row is not found, then the 'last' button is disabled and the last page is\n     * not shown. This is always true for ClientSideRowModel. It toggles for InfiniteRowModel.\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "ensureRowHeightsValid": {
      "description": "/** Used by CSRM only - is makes sure there are now estimated row heights within the range. */",
      "type": {
        "arguments": {
          "startPixel": "number",
          "endPixel": "number",
          "startLimitIndex": "number",
          "endLimitIndex": "number"
        },
        "returnType": "boolean",
        "optional": false
      }
    },
    "start": {
      "description": "/** Gets called after grid is initialised. What happens depends on row model. Client Side will take rowData\n     * from gridOptions, the other row models will start calling their datasources. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "RowNodeEventType": {},
  "SetSelectedParams": {
    "newValue": { "type": { "returnType": "boolean", "optional": false } },
    "clearSelection": { "type": { "returnType": "boolean", "optional": true } },
    "suppressFinishActions": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "rangeSelect": { "type": { "returnType": "boolean", "optional": true } },
    "groupSelectsFiltered": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "source": {
      "type": { "returnType": "SelectionEventSourceType", "optional": false }
    }
  },
  "RowNodeEvent": {
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "RowNodeEventType", "optional": false }
    },
    "node": { "type": { "returnType": "IRowNode<TData>", "optional": false } },
    "meta": { "typeParams": ["TData = any"] }
  },
  "DataChangedEvent": {
    "oldData": {
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "newData": {
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "update": { "type": { "returnType": "boolean", "optional": false } },
    "meta": { "typeParams": ["TData = any"] },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "RowNodeEventType", "optional": false }
    },
    "node": { "type": { "returnType": "IRowNode<TData>", "optional": false } }
  },
  "CellChangedEvent": {
    "column": { "type": { "returnType": "Column", "optional": false } },
    "newValue": {
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "oldValue": {
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "meta": { "typeParams": ["TData = any"] },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "RowNodeEventType", "optional": false }
    },
    "node": { "type": { "returnType": "IRowNode<TData>", "optional": false } }
  },
  "RowHighlightPosition": {},
  "RowPinnedType": {},
  "BaseRowNode": {
    "id": {
      "description": "/** Unique ID for the node. Either provided by the application, or generated by the grid if not. */",
      "type": { "returnType": "string | undefined", "optional": false }
    },
    "data": {
      "description": "/** The data as provided by the application.\n     * Can be `undefined` when using row grouping or during grid initialisation.\n     */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "displayed": {
      "description": "/** This will be `true` if it has a rowIndex assigned, otherwise `false`.\n     */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either `'top'` or `'bottom'` if row pinned, otherwise `undefined` or `null`. */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "selectable": {
      "description": "/** Is this row selectable. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "rowHeight": {
      "description": "/** The height, in pixels, of this row. */",
      "type": { "returnType": "number | null | undefined", "optional": false }
    },
    "rowTop": {
      "description": "/** The row top position in pixels. */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "group": {
      "description": "/** `true` if this node is a group node (i.e. it has children) */",
      "type": { "returnType": "boolean | undefined", "optional": false }
    },
    "firstChild": {
      "description": "/** `true` if this is the first child in this group. Changes when data is sorted. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "lastChild": {
      "description": "/** `true` if this is the last child in this group. Changes when data is sorted. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "childIndex": {
      "description": "/** Index of this row with respect to its parent when grouping. Changes when data is sorted. */",
      "type": { "returnType": "number", "optional": false }
    },
    "level": {
      "description": "/** How many levels this node is from the top when grouping. */",
      "type": { "returnType": "number", "optional": false }
    },
    "uiLevel": {
      "description": "/** How many levels this node is from the top when grouping in the UI (only different to `parent` when `groupRemoveSingleChildren=true`).*/",
      "type": { "returnType": "number", "optional": false }
    },
    "parent": {
      "description": "/** The parent node to this node, or empty if top level. */",
      "type": { "returnType": "IRowNode<TData> | null", "optional": false }
    },
    "stub": {
      "description": "/** Used by server-side row model. `true` if this row node is a stub. A stub is a placeholder row with loading icon while waiting from row to be loaded. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "failedLoad": {
      "description": "/** Used by server side row model, `true` if this row node failed a load. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "rowIndex": {
      "description": "/** The current row index. If the row is filtered out or in a collapsed group, this value will be `null`. */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "quickFilterAggregateText": {
      "description": "/** If using quick filter, stores a string representation of the row for searching against. */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "master": {
      "description": "/** `true` if this row is a master row, part of master / detail (ie row can be expanded to show detail). */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "detail": {
      "description": "/** `true` if this row is a detail row, part of master / detail (ie child row of an expanded master row). */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "meta": { "typeParams": ["TData = any"] }
  },
  "GroupRowNode": {
    "field": {
      "description": "/** The field we are grouping on from our row data. */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "key": {
      "description": "/** The key value for this group. */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "groupData": {
      "description": "/** If using row grouping, contains the group values for this group. */",
      "type": {
        "returnType": "{ [key: string]: any | null; } | null",
        "optional": false
      }
    },
    "aggData": {
      "description": "/** If using row grouping and aggregation, contains the aggregation data. */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowGroupColumn": {
      "description": "/** The row group column used for this group. */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "rowGroupIndex": {
      "description": "/** If doing in-memory (client-side) grouping, this is the index of the group column this cell is for.\n     * This will always be the same as the level, unless we are collapsing groups, i.e. `groupRemoveSingleChildren=true`.\n    */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "expanded": {
      "description": "/** `true` if group is expanded, otherwise `false`. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "leafGroup": {
      "description": "/** `true` if this node is a group and the group is the bottom level in the tree. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "allLeafChildren": {
      "description": "/** All lowest level nodes beneath this node, no groups. */",
      "type": { "returnType": "IRowNode<TData>[]", "optional": false }
    },
    "allChildrenCount": {
      "description": "/** Number of children and grand children. */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "childrenAfterGroup": {
      "description": "/** Children of this group. If multi levels of grouping, shows only immediate children. */",
      "type": { "returnType": "IRowNode<TData>[] | null", "optional": false }
    },
    "childrenAfterSort": {
      "description": "/** Sorted children of this group. */",
      "type": { "returnType": "IRowNode<TData>[] | null", "optional": false }
    },
    "childrenAfterFilter": {
      "description": "/** Filtered children of this group. */",
      "type": { "returnType": "IRowNode<TData>[] | null", "optional": false }
    },
    "footer": {
      "description": "/** `true` if row is a footer. Footers have `group = true` and `footer = true`. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "sibling": {
      "description": "/** If using footers, reference to the footer node for this group. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "meta": { "typeParams": ["TData = any"] }
  },
  "IRowNode": {
    "setSelected": {
      "description": "/** Select (or deselect) the node.\n     * @param newValue -`true` for selection, `false` for deselection.\n     * @param clearSelection - If selecting, then passing `true` will select the node exclusively (i.e. NOT do multi select). If doing deselection, `clearSelection` has no impact. Default: `false`\n     * @param suppressFinishActions - Pass `true` to prevent the `selectionChanged` from being fired. Note that the `rowSelected` event will still be fired. Default: `false`\n     * @param source - Source property that will appear in the `selectionChanged` event. Default: `'api'`\n     */",
      "type": {
        "arguments": {
          "newValue": "boolean",
          "clearSelection?": "boolean",
          "suppressFinishActions?": "boolean",
          "source?": "SelectionEventSourceType"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "isSelected": {
      "description": "/** Returns:\n     * - `true` if node is selected.\n     * - `false` if the node isn't selected.\n     * - `undefined` if it's partially selected (group where not all children are selected). \n     */",
      "type": {
        "arguments": {},
        "returnType": "boolean | undefined",
        "optional": false
      }
    },
    "isRowPinned": {
      "description": "/** Returns:\n     * - `true` if node is either pinned to the `top` or `bottom`.\n     * - `false` if the node isn't pinned.\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "isExpandable": {
      "description": "/** Returns:\n    * - `true` if the node can be expanded, i.e it is a group or master row.\n    * - `false` if the node cannot be expanded.\n    */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "setExpanded": {
      "description": "/** Set the expanded state of this rowNode. Pass `true` to expand and `false` to collapse.\n     */",
      "type": {
        "arguments": {
          "expanded": "boolean",
          "e?": "MouseEvent | KeyboardEvent"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "isFullWidthCell": {
      "description": "/** Returns:\n     * - `true` if the node is a full width cell.\n     * - `false` if the node is not a full width cell.\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "isHovered": {
      "description": "/** Returns:\n     * - `true` if the node is currently hovered.\n     * - `false` if the node is not hovered.\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "addEventListener": {
      "description": "/** Add an event listener. */",
      "type": {
        "arguments": {
          "eventType": "RowNodeEventType",
          "listener": "Function"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "removeEventListener": {
      "description": "/** Remove event listener. */",
      "type": {
        "arguments": {
          "eventType": "RowNodeEventType",
          "listener": "Function"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "resetQuickFilterAggregateText": {
      "description": "/** The first time `quickFilter` runs, the grid creates a one-off string representation of the row.\n     * This string is then used for the quick filter instead of hitting each column separately.\n     * When you edit, using grid editing, this string gets cleared down.\n     * However if you edit without using grid editing, you will need to clear this string down for the row to be updated with the new values.\n     * Otherwise new values will not work with the `quickFilter`.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "depthFirstSearch": {
      "description": "/** Perform a depth-first search of this node and its children. */",
      "type": {
        "arguments": { "callback": "(rowNode: IRowNode<TData>) => void" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRowHeight": {
      "description": "/** Sets the row height.\n     * Call if you want to change the height initially assigned to the row.\n     * After calling, you must call `api.onRowHeightChanged()` so the grid knows it needs to work out the placement of the rows.\n     * @param rowHeight - new height of the row\n     * @param estimated - is this an estimated height. Default: `false`\n     */",
      "type": {
        "arguments": {
          "rowHeight": "number | undefined | null",
          "estimated?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "setData": {
      "description": "/** Replaces the data on the `rowNode`. When this method is called, the grid will refresh the entire rendered row if it is displayed.\n     */",
      "type": {
        "arguments": { "data": "TData" },
        "returnType": "void",
        "optional": false
      }
    },
    "updateData": {
      "description": "/** Updates the data on the `rowNode`. When this method is called, the grid will refresh the entire rendered row if it is displayed.\n     */",
      "type": {
        "arguments": { "data": "TData" },
        "returnType": "void",
        "optional": false
      }
    },
    "setDataValue": {
      "description": "/** Replaces the value on the `rowNode` for the specified column. When complete,\n     * the grid will refresh the rendered cell on the required row only.\n     * **Note**: This method on fires `onCellEditRequest` when the Grid is on **Read Only** mode.\n     *\n     * @param colKey The column where the value should be updated\n     * @param newValue The new value\n     * @param eventSource The source of the event\n     * @returns `True` if the value was changed, otherwise `False`.\n     */",
      "type": {
        "arguments": {
          "colKey": "string | Column",
          "newValue": "any",
          "eventSource?": "string"
        },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getRoute": {
      "description": "/** Returns the route of the row node. If the Row Node is a group, it returns the route to that Row Node.\n     * If the Row Node is not a group, it returns `undefined`.\n     */",
      "type": {
        "arguments": {},
        "returnType": "string[] | undefined",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any"] },
    "id": {
      "description": "/** Unique ID for the node. Either provided by the application, or generated by the grid if not. */",
      "type": { "returnType": "string | undefined", "optional": false }
    },
    "data": {
      "description": "/** The data as provided by the application.\n     * Can be `undefined` when using row grouping or during grid initialisation.\n     */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "displayed": {
      "description": "/** This will be `true` if it has a rowIndex assigned, otherwise `false`.\n     */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either `'top'` or `'bottom'` if row pinned, otherwise `undefined` or `null`. */",
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "selectable": {
      "description": "/** Is this row selectable. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "rowHeight": {
      "description": "/** The height, in pixels, of this row. */",
      "type": { "returnType": "number | null | undefined", "optional": false }
    },
    "rowTop": {
      "description": "/** The row top position in pixels. */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "group": {
      "description": "/** `true` if this node is a group node (i.e. it has children) */",
      "type": { "returnType": "boolean | undefined", "optional": false }
    },
    "firstChild": {
      "description": "/** `true` if this is the first child in this group. Changes when data is sorted. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "lastChild": {
      "description": "/** `true` if this is the last child in this group. Changes when data is sorted. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "childIndex": {
      "description": "/** Index of this row with respect to its parent when grouping. Changes when data is sorted. */",
      "type": { "returnType": "number", "optional": false }
    },
    "level": {
      "description": "/** How many levels this node is from the top when grouping. */",
      "type": { "returnType": "number", "optional": false }
    },
    "uiLevel": {
      "description": "/** How many levels this node is from the top when grouping in the UI (only different to `parent` when `groupRemoveSingleChildren=true`).*/",
      "type": { "returnType": "number", "optional": false }
    },
    "parent": {
      "description": "/** The parent node to this node, or empty if top level. */",
      "type": { "returnType": "IRowNode<TData> | null", "optional": false }
    },
    "stub": {
      "description": "/** Used by server-side row model. `true` if this row node is a stub. A stub is a placeholder row with loading icon while waiting from row to be loaded. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "failedLoad": {
      "description": "/** Used by server side row model, `true` if this row node failed a load. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "rowIndex": {
      "description": "/** The current row index. If the row is filtered out or in a collapsed group, this value will be `null`. */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "quickFilterAggregateText": {
      "description": "/** If using quick filter, stores a string representation of the row for searching against. */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "master": {
      "description": "/** `true` if this row is a master row, part of master / detail (ie row can be expanded to show detail). */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "detail": {
      "description": "/** `true` if this row is a detail row, part of master / detail (ie child row of an expanded master row). */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "field": {
      "description": "/** The field we are grouping on from our row data. */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "key": {
      "description": "/** The key value for this group. */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "groupData": {
      "description": "/** If using row grouping, contains the group values for this group. */",
      "type": {
        "returnType": "{ [key: string]: any | null; } | null",
        "optional": false
      }
    },
    "aggData": {
      "description": "/** If using row grouping and aggregation, contains the aggregation data. */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowGroupColumn": {
      "description": "/** The row group column used for this group. */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "rowGroupIndex": {
      "description": "/** If doing in-memory (client-side) grouping, this is the index of the group column this cell is for.\n     * This will always be the same as the level, unless we are collapsing groups, i.e. `groupRemoveSingleChildren=true`.\n    */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "expanded": {
      "description": "/** `true` if group is expanded, otherwise `false`. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "leafGroup": {
      "description": "/** `true` if this node is a group and the group is the bottom level in the tree. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "allLeafChildren": {
      "description": "/** All lowest level nodes beneath this node, no groups. */",
      "type": { "returnType": "IRowNode<TData>[]", "optional": false }
    },
    "allChildrenCount": {
      "description": "/** Number of children and grand children. */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "childrenAfterGroup": {
      "description": "/** Children of this group. If multi levels of grouping, shows only immediate children. */",
      "type": { "returnType": "IRowNode<TData>[] | null", "optional": false }
    },
    "childrenAfterSort": {
      "description": "/** Sorted children of this group. */",
      "type": { "returnType": "IRowNode<TData>[] | null", "optional": false }
    },
    "childrenAfterFilter": {
      "description": "/** Filtered children of this group. */",
      "type": { "returnType": "IRowNode<TData>[] | null", "optional": false }
    },
    "footer": {
      "description": "/** `true` if row is a footer. Footers have `group = true` and `footer = true`. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "sibling": {
      "description": "/** If using footers, reference to the footer node for this group. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    }
  },
  "StageExecuteParams": {
    "rowNode": {
      "type": { "returnType": "RowNode<TData>", "optional": false }
    },
    "rowNodeTransaction": {
      "type": {
        "returnType": "RowNodeTransaction<TData> | null",
        "optional": true
      }
    },
    "rowNodeTransactions": {
      "type": {
        "returnType": "RowNodeTransaction<TData>[] | null",
        "optional": true
      }
    },
    "rowNodeOrder": {
      "type": { "returnType": "{[id: string]: number}", "optional": true }
    },
    "changedPath": {
      "type": { "returnType": "ChangedPath", "optional": true }
    },
    "afterColumnsChanged": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "meta": { "typeParams": ["TData = any"] }
  },
  "IRowNodeStage": {
    "execute": {
      "type": {
        "arguments": { "params": "StageExecuteParams<TData>" },
        "returnType": "any",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any"] }
  },
  "ISelectionService": {
    "getServerSideSelectionState": {
      "type": {
        "arguments": {},
        "returnType": "IServerSideSelectionState | IServerSideGroupSelectionState | null",
        "optional": false
      }
    },
    "setServerSideSelectionState": {
      "type": {
        "arguments": {
          "state": "IServerSideSelectionState | IServerSideGroupSelectionState"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "getSelectedNodes": {
      "type": {
        "arguments": {},
        "returnType": "RowNode<any>[]",
        "optional": false
      }
    },
    "getSelectedRows": {
      "type": { "arguments": {}, "returnType": "any[]", "optional": false }
    },
    "getSelectionCount": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "setNodeSelected": {
      "type": {
        "arguments": { "params": "ISetNodeSelectedParams" },
        "returnType": "number",
        "optional": false
      }
    },
    "filterFromSelection": {
      "type": {
        "arguments": { "predicate": "(node: RowNode) => boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "updateGroupsFromChildrenSelections": {
      "type": {
        "arguments": {
          "source": "SelectionEventSourceType",
          "changedPath?": "ChangedPath"
        },
        "returnType": "boolean",
        "optional": false
      }
    },
    "syncInRowNode": {
      "type": {
        "arguments": { "rowNode": "RowNode", "oldNode": "RowNode | null" },
        "returnType": "void",
        "optional": false
      }
    },
    "reset": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "getBestCostNodeSelection": {
      "type": {
        "arguments": {},
        "returnType": "RowNode[] | undefined",
        "optional": false
      }
    },
    "isEmpty": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getSelectAllState": {
      "description": "/** @param justFiltered whether to just include nodes which have passed the filter\n     * @param justCurrentPage whether to just include nodes on the current page\n     * @returns all nodes including unselectable nodes which are the target of this selection attempt\n     */",
      "type": {
        "arguments": {
          "justFiltered?": "boolean",
          "justCurrentPage?": "boolean"
        },
        "returnType": "boolean | null",
        "optional": false
      }
    },
    "selectAllRowNodes": {
      "type": {
        "arguments": {
          "params": "{ source: SelectionEventSourceType; justFiltered?: boolean; justCurrentPage?: boolean; }"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "deselectAllRowNodes": {
      "type": {
        "arguments": {
          "params": "{ source: SelectionEventSourceType; justFiltered?: boolean; justCurrentPage?: boolean; }"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ISetNodeSelectedParams": {
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "newValue": { "type": { "returnType": "boolean", "optional": false } },
    "clearSelection": { "type": { "returnType": "boolean", "optional": true } },
    "suppressFinishActions": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "rangeSelect": { "type": { "returnType": "boolean", "optional": true } },
    "groupSelectsFiltered": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "source": {
      "type": { "returnType": "SelectionEventSourceType", "optional": false }
    },
    "event": { "type": { "returnType": "Event", "optional": true } }
  },
  "IServerSideGetRowsRequest": {
    "startRow": {
      "description": "/** First row requested or undefined for all rows. */",
      "type": { "returnType": "number | undefined", "optional": false }
    },
    "endRow": {
      "description": "/** Index after the last row required row or undefined for all rows. */",
      "type": { "returnType": "number | undefined", "optional": false }
    },
    "rowGroupCols": {
      "description": "/** Columns that are currently row grouped.  */",
      "type": { "returnType": "ColumnVO[]", "optional": false }
    },
    "valueCols": {
      "description": "/** Columns that have aggregations on them.  */",
      "type": { "returnType": "ColumnVO[]", "optional": false }
    },
    "pivotCols": {
      "description": "/** Columns that have pivot on them.  */",
      "type": { "returnType": "ColumnVO[]", "optional": false }
    },
    "pivotMode": {
      "description": "/** Defines if pivot mode is on or off.  */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "groupKeys": {
      "description": "/** What groups the user is viewing.  */",
      "type": { "returnType": "string[]", "optional": false }
    },
    "filterModel": {
      "description": "/** If filtering, what the filter model is.  */",
      "type": { "returnType": "any", "optional": false }
    },
    "sortModel": {
      "description": "/** If sorting, what the sort model is.  */",
      "type": { "returnType": "SortModelItem[]", "optional": false }
    }
  },
  "IServerSideGetRowsParams": {
    "request": {
      "description": "/** Details for the request. A simple object that can be converted to JSON.\n     */",
      "type": { "returnType": "IServerSideGetRowsRequest", "optional": false }
    },
    "parentNode": {
      "description": "/** The parent row node. The RootNode (level -1) if request is top level.\n     * This is NOT part fo the request as it cannot be serialised to JSON (a rowNode has methods).\n     */",
      "type": { "returnType": "IRowNode", "optional": false }
    },
    "successCallback": {
      "description": "/** @deprecated Use `success` method instead and return result as a `LoadSuccessParams` object.\n     */",
      "type": {
        "arguments": { "rowsThisPage": "any[]", "lastRow": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "success": {
      "description": "/** Success callback, pass the rows back to the grid that were requested.\n     */",
      "type": {
        "arguments": { "params": "LoadSuccessParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "failCallback": {
      "description": "/** @deprecated Use `fail` instead.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "fail": {
      "description": "/** Fail callback, tell the grid the call failed so it can adjust it's state.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "IServerSideDatasource": {
    "getRows": {
      "description": "/** Grid calls `getRows` when it requires more rows as specified in the params.\n     * Params object contains callbacks for responding to the request.\n     */",
      "type": {
        "arguments": { "params": "IServerSideGetRowsParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Optional method, if your datasource has state it needs to clean up. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "IServerSideRowModel": {
    "refreshStore": {
      "type": {
        "arguments": { "params?": "RefreshServerSideParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "onRowHeightChanged": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "onRowHeightChangedDebounced": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "getStoreState": {
      "type": {
        "arguments": {},
        "returnType": "ServerSideGroupLevelState[]",
        "optional": false
      }
    },
    "retryLoads": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "expandAll": {
      "type": {
        "arguments": { "value": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setDatasource": {
      "type": {
        "arguments": { "datasource": "IServerSideDatasource" },
        "returnType": "void",
        "optional": false
      }
    },
    "forEachNodeAfterFilterAndSort": {
      "type": {
        "arguments": { "callback": "(node: IRowNode, index: number) => void" },
        "returnType": "void",
        "optional": false
      }
    },
    "resetRootStore": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "getBlockStates": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "setRowCount": {
      "type": {
        "arguments": {
          "rowCount": "number",
          "isLastRowIndexKnown?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "getRow": {
      "description": "/** Returns the rowNode at the given index. */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowNode | undefined",
        "optional": false
      }
    },
    "getRowNode": {
      "description": "/** Returns the rowNode for given id. */",
      "type": {
        "arguments": { "id": "string" },
        "returnType": "RowNode | undefined",
        "optional": false
      }
    },
    "getRowCount": {
      "description": "/** Returns the number of rows */",
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getTopLevelRowCount": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getTopLevelRowDisplayedIndex": {
      "type": {
        "arguments": { "topLevelIndex": "number" },
        "returnType": "number",
        "optional": false
      }
    },
    "getRowIndexAtPixel": {
      "description": "/** Returns the row index at the given pixel */",
      "type": {
        "arguments": { "pixel": "number" },
        "returnType": "number",
        "optional": false
      }
    },
    "isRowPresent": {
      "description": "/** Returns true if the provided rowNode is in the list of rows to render */",
      "type": {
        "arguments": { "rowNode": "RowNode" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getRowBounds": {
      "description": "/** Returns row top and bottom for a given row */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowBounds | null",
        "optional": false
      }
    },
    "isEmpty": {
      "description": "/** Returns true if this model has no rows, regardless of model filter. EG if rows present, but filtered\n     * out, this still returns false. If it returns true, then the grid shows the 'no rows' overlay - but we\n     * don't show that overlay if the rows are just filtered out. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "isRowsToRender": {
      "description": "/** Returns true if no rows (either no rows at all, or the rows are filtered out). This is what the grid\n     * uses to know if there are rows to render or not. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getNodesInRangeForSelection": {
      "description": "/** Returns all rows in range that should be selected. If there is a gap in range (non ClientSideRowModel) then\n     *  then no rows should be returned  */",
      "type": {
        "arguments": { "first": "RowNode", "last": "RowNode | null" },
        "returnType": "RowNode[]",
        "optional": false
      }
    },
    "forEachNode": {
      "description": "/** Iterate through each node. What this does depends on the model type. For clientSide, goes through\n     * all nodes. For serverSide, goes through what's loaded in memory. */",
      "type": {
        "arguments": {
          "callback": "(rowNode: RowNode, index: number) => void",
          "includeFooterNodes?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "getType": {
      "description": "/** The base class returns the type. We use this instead of 'instanceof' as the client might provide\n     * their own implementation of the models in the future. */",
      "type": {
        "arguments": {},
        "returnType": "RowModelType",
        "optional": false
      }
    },
    "isLastRowIndexKnown": {
      "description": "/** It tells us if this row model knows about the last row that it can produce. This is used by the\n     * PaginationPanel, if last row is not found, then the 'last' button is disabled and the last page is\n     * not shown. This is always true for ClientSideRowModel. It toggles for InfiniteRowModel.\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "ensureRowHeightsValid": {
      "description": "/** Used by CSRM only - is makes sure there are now estimated row heights within the range. */",
      "type": {
        "arguments": {
          "startPixel": "number",
          "endPixel": "number",
          "startLimitIndex": "number",
          "endLimitIndex": "number"
        },
        "returnType": "boolean",
        "optional": false
      }
    },
    "start": {
      "description": "/** Gets called after grid is initialised. What happens depends on row model. Client Side will take rowData\n     * from gridOptions, the other row models will start calling their datasources. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "IServerSideTransactionManager": {
    "applyTransaction": {
      "type": {
        "arguments": { "transaction": "ServerSideTransaction" },
        "returnType": "ServerSideTransactionResult | undefined",
        "optional": false
      }
    },
    "applyTransactionAsync": {
      "type": {
        "arguments": {
          "transaction": "ServerSideTransaction",
          "callback?": "(res: ServerSideTransactionResult) => void"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "flushAsyncTransactions": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "RefreshServerSideParams": {
    "route": {
      "description": "/** List of group keys, pointing to the level to refresh.\n     * For example, to purge two levels down under 'Canada'and then '2002', pass in the string array ['Canada','2002'].\n     * If no route is passed, or an empty array, then the top level is refreshed.\n     */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "purge": {
      "description": "/** If true, then all rows at the level getting refreshed are immediately destroyed and 'loading' rows will appear.\n     * If false, then all rows at the level getting refreshed are kept until rows are loaded (no 'loading' rows appear).\n     */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "RefreshStoreParams": {
    "route": {
      "description": "/** List of group keys, pointing to the level to refresh.\n     * For example, to purge two levels down under 'Canada'and then '2002', pass in the string array ['Canada','2002'].\n     * If no route is passed, or an empty array, then the top level is refreshed.\n     */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "purge": {
      "description": "/** If true, then all rows at the level getting refreshed are immediately destroyed and 'loading' rows will appear.\n     * If false, then all rows at the level getting refreshed are kept until rows are loaded (no 'loading' rows appear).\n     */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "IServerSideSelectionState": {
    "selectAll": { "type": { "returnType": "boolean", "optional": false } },
    "toggledNodes": { "type": { "returnType": "string[]", "optional": false } }
  },
  "IServerSideGroupSelectionState": {
    "nodeId": { "type": { "returnType": "string", "optional": true } },
    "selectAllChildren": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "toggledNodes": {
      "type": {
        "returnType": "IServerSideGroupSelectionState[]",
        "optional": true
      }
    }
  },
  "IServerSideStore": {
    "clearDisplayIndexes": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "getDisplayIndexEnd": {
      "type": {
        "arguments": {},
        "returnType": "number | undefined",
        "optional": false
      }
    },
    "isDisplayIndexInStore": {
      "type": {
        "arguments": { "displayIndex": "number" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "setDisplayIndexes": {
      "type": {
        "arguments": {
          "displayIndexSeq": "NumberSequence",
          "nextRowTop": "{ value: number; }"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "forEachStoreDeep": {
      "type": {
        "arguments": {
          "callback": "(rowNode: IServerSideStore, index: number) => void",
          "sequence?": "NumberSequence"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "forEachNodeDeep": {
      "type": {
        "arguments": {
          "callback": "(rowNode: IRowNode, index: number) => void",
          "sequence?": "NumberSequence"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "forEachNodeDeepAfterFilterAndSort": {
      "type": {
        "arguments": {
          "callback": "(rowNode: IRowNode, index: number) => void",
          "sequence?": "NumberSequence"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "retryLoads": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "getRowUsingDisplayIndex": {
      "type": {
        "arguments": {
          "displayRowIndex": "number",
          "dontCreateBlock?": "boolean"
        },
        "returnType": "IRowNode | undefined",
        "optional": false
      }
    },
    "getRowBounds": {
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowBounds | null",
        "optional": false
      }
    },
    "isPixelInRange": {
      "type": {
        "arguments": { "pixel": "number" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getRowIndexAtPixel": {
      "type": {
        "arguments": { "pixel": "number" },
        "returnType": "number | null",
        "optional": false
      }
    },
    "getChildStore": {
      "type": {
        "arguments": { "keys": "string[]" },
        "returnType": "IServerSideStore | null",
        "optional": false
      }
    },
    "refreshAfterSort": {
      "type": {
        "arguments": { "params": "StoreRefreshAfterParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "refreshAfterFilter": {
      "type": {
        "arguments": { "params": "StoreRefreshAfterParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "applyTransaction": {
      "type": {
        "arguments": { "transaction": "ServerSideTransaction" },
        "returnType": "ServerSideTransactionResult",
        "optional": false
      }
    },
    "refreshStore": {
      "type": {
        "arguments": { "purge": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "getRowCount": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getTopLevelRowDisplayedIndex": {
      "type": {
        "arguments": { "topLevelIndex": "number" },
        "returnType": "number",
        "optional": false
      }
    },
    "isLastRowIndexKnown": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getRowNodesInRange": {
      "type": {
        "arguments": { "firstInRange": "IRowNode", "lastInRange": "IRowNode" },
        "returnType": "IRowNode[]",
        "optional": false
      }
    },
    "addStoreStates": {
      "type": {
        "arguments": { "result": "ServerSideGroupLevelState[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "getStoreBounds": {
      "type": {
        "arguments": {},
        "returnType": "{ topPx: number, heightPx: number }",
        "optional": false
      }
    }
  },
  "StoreRefreshAfterParams": {
    "valueColChanged": {
      "type": { "returnType": "boolean", "optional": false }
    },
    "secondaryColChanged": {
      "type": { "returnType": "boolean", "optional": false }
    },
    "changedColumns": {
      "type": { "returnType": "string[]", "optional": false }
    }
  },
  "ServerSideGroupLevelState": {
    "suppressInfiniteScroll": {
      "description": "/** True if suppressing infinite scrolling and loading all the data at the current level */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "route": {
      "description": "/** The route that identifies this level. */",
      "type": { "returnType": "string[]", "optional": false }
    },
    "rowCount": {
      "description": "/** How many rows the level has. This includes 'loading rows'. */",
      "type": { "returnType": "number", "optional": false }
    },
    "lastRowIndexKnown": {
      "description": "/** Infinite Scroll only.\n     * Whether the last row index is know.\n     * */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "info": {
      "description": "/** Any extra info provided to the level, when data was loaded. */",
      "type": { "returnType": "any", "optional": true }
    },
    "maxBlocksInCache": {
      "description": "/**Infinite Scroll only.\n     * Max blocks allowed in the infinite cache.\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "cacheBlockSize": {
      "description": "/** Infinite Scroll only.\n     * The size (number of rows) of each infinite cache block.\n     */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "ServerSideGroupState": {
    "suppressInfiniteScroll": {
      "description": "/** True if suppressing infinite scrolling and loading all the data at the current level */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "route": {
      "description": "/** The route that identifies this level. */",
      "type": { "returnType": "string[]", "optional": false }
    },
    "rowCount": {
      "description": "/** How many rows the level has. This includes 'loading rows'. */",
      "type": { "returnType": "number", "optional": false }
    },
    "lastRowIndexKnown": {
      "description": "/** Infinite Scroll only.\n     * Whether the last row index is know.\n     * */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "info": {
      "description": "/** Any extra info provided to the level, when data was loaded. */",
      "type": { "returnType": "any", "optional": true }
    },
    "maxBlocksInCache": {
      "description": "/**Infinite Scroll only.\n     * Max blocks allowed in the infinite cache.\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "cacheBlockSize": {
      "description": "/** Infinite Scroll only.\n     * The size (number of rows) of each infinite cache block.\n     */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "SetFilterModelValue": {},
  "SetFilterModel": {
    "filterType": { "type": { "returnType": "'set'", "optional": true } },
    "values": {
      "type": { "returnType": "SetFilterModelValue", "optional": false }
    }
  },
  "ISetFilter": {
    "getModel": {
      "description": "/** Returns a model representing the current state of the filter, or `null` if the filter is\n     * not active.\n     */",
      "type": {
        "arguments": {},
        "returnType": "SetFilterModel | null",
        "optional": false
      }
    },
    "setModel": {
      "description": "/** Sets the state of the filter using the supplied model. Providing `null` as the model will\n     * de-activate the filter.\n     * \n     * **Note:** if you are [providing values asynchronously](/filter-set-filter-list/#asynchronous-values)\n     * to the Set Filter, you need to wait for these changes to be applied before performing any further\n     * actions by waiting on the returned grid promise, e.g. \n     * `filter.setModel({ values: ['a', 'b'] }).then(function() { gridApi.onFilterChanged(); });`\n     */",
      "type": {
        "arguments": { "model": "SetFilterModel | null" },
        "returnType": "void | AgPromise<void>",
        "optional": false
      }
    },
    "getValues": {
      "description": "/** @deprecated As of v29 use `getFilterValues` to get the values in the Set Filter\n     * (e.g. complex objects if provided), or `getFilterKeys` to get the string keys\n     * \n     * Returns the full list of unique keys used by the Set Filter.\n     */",
      "type": {
        "arguments": {},
        "returnType": "SetFilterModelValue",
        "optional": false
      }
    },
    "getFilterKeys": {
      "description": "/** Returns the full list of unique keys used by the Set Filter. */",
      "type": {
        "arguments": {},
        "returnType": "SetFilterModelValue",
        "optional": false
      }
    },
    "getFilterValues": {
      "description": "/** Returns the full list of unique values used by the Set Filter. */",
      "type": {
        "arguments": {},
        "returnType": "(V | null)[]",
        "optional": false
      }
    },
    "setFilterValues": {
      "description": "/** Sets the values used in the Set Filter on the fly. */",
      "type": {
        "arguments": { "values": "(V | null)[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "refreshFilterValues": {
      "description": "/** Refreshes the values shown in the filter from the original source. For example, if a\n     * callback was provided, the callback will be executed again and the filter will refresh using\n     * the values returned.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "resetFilterValues": {
      "description": "/** Resets the Set Filter to use values from the grid, rather than any values that have been\n     * provided directly.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "getMiniFilter": {
      "description": "/** Returns the current mini-filter text. */",
      "type": {
        "arguments": {},
        "returnType": "string | null",
        "optional": false
      }
    },
    "setMiniFilter": {
      "description": "/** Sets the text in the Mini Filter at the top of the filter (the 'quick search' in the popup). */",
      "type": {
        "arguments": { "newMiniFilter": "string | null" },
        "returnType": "void",
        "optional": false
      }
    },
    "getModelFromUi": {
      "description": "/** Returns the current UI state (potentially un-applied). */",
      "type": {
        "arguments": {},
        "returnType": "SetFilterModel | null",
        "optional": false
      }
    },
    "meta": { "typeParams": ["V = string"] },
    "applyModel": {
      "description": "/** Applies the model shown in the UI (so that `getModel()` will now return what was in the UI\n     * when `applyModel()` was called).\n     * @param source The source of the method call. Default 'api'.\n     */",
      "type": {
        "arguments": { "source?": "'api' | 'ui' | 'rowDataUpdated'" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "isFilterActive": {
      "description": "/** Returns `true` if the filter is currently active, otherwise `false`. \n     * If active then 1) the grid will show the filter icon in the column header \n     * and 2) the filter will be included in the filtering of the data.\n    */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "doesFilterPass": {
      "description": "/** The grid will ask each active filter, in turn, whether each row in the grid passes. If any\n     * filter fails, then the row will be excluded from the final set. The method is provided a\n     * params object with attributes node (the rodNode the grid creates that wraps the data) and data\n     * (the data object that you provided to the grid for that row).\n     */",
      "type": {
        "arguments": { "params": "IDoesFilterPassParams" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "onNewRowsLoaded": {
      "description": "/** Gets called when new rows are inserted into the grid. If the filter needs to change its\n     state after rows are loaded, it can do it here. For example the set filters uses this\n     to update the list of available values to select from (e.g. 'Ireland', 'UK' etc for\n     Country filter). To get the list of available values from within this method from the\n    Client Side Row Model, use `gridApi.forEachLeafNode(callback)`.\n    */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "onAnyFilterChanged": {
      "description": "/** Called whenever any filter is changed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getModelAsString": {
      "description": "/** Optional method used by AG Grid when rendering floating filters and there isn't a floating filter\n     * associated for this filter, this will happen if you create a custom filter and NOT a custom floating\n     * filter.\n     */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "string",
        "optional": true
      }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "afterGuiDetached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been removed from the screen.\n     * If a parent popup is opened and closed (e.g. for filters), this method is called each time the component is hidden.\n     * This is useful for any logic to reset the UI state back to the model before the component is reopened.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "SetFilterValuesFuncParams": {
    "success": {
      "description": "/** The function to call with the values to load into the filter once they are ready. */",
      "type": {
        "arguments": { "values": "(V | null)[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "colDef": {
      "description": "/** The column definition from which the set filter is invoked. */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "column": {
      "description": "/** Column from which the set filter is invoked. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "api": { "type": { "returnType": "GridApi<TData>", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "V = string"] }
  },
  "SetFilterValuesFunc": {
    "meta": { "typeParams": ["TData = any", "V = string"] }
  },
  "SetFilterValues": {
    "meta": { "typeParams": ["TData = any", "V = string"] }
  },
  "SetFilterParams": {
    "meta": { "typeParams": ["TData = any", "V = string"] }
  },
  "ISetFilterParams": {
    "values": {
      "description": "/** The values to display in the Filter List. If this is not set, the filter will takes its\n     * values from what is loaded in the table.\n     */",
      "type": { "returnType": "SetFilterValues<TData, V>", "optional": true }
    },
    "refreshValuesOnOpen": {
      "description": "/** Refresh the values every time the Set filter is opened.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "cellHeight": {
      "description": "/** The height of values in the Filter List in pixels. */",
      "type": { "returnType": "number", "optional": true }
    },
    "suppressSorting": {
      "description": "/** If `true`, the Set Filter values will not be sorted. Use this if you are providing your own\n     * values and don't want them sorted as you are providing in the order you want.\n     * \n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "cellRenderer": {
      "description": "/** Similar to the Cell Renderer for the grid. Setting it separately here allows for the value to\n     * be rendered differently in the filter.\n     */",
      "type": { "returnType": "any", "optional": true }
    },
    "cellRendererFramework": {
      "description": "/** @deprecated as of v27, use cellRenderer for Framework components also\n     * Similar to the Cell Renderer Comp for the grid. Setting it separately here allows for the value to\n     * be rendered differently in the filter.\n     */",
      "type": { "returnType": "any", "optional": true }
    },
    "suppressMiniFilter": {
      "description": "/** Set to `true` to hide the Mini Filter.\n     * \n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "applyMiniFilterWhileTyping": {
      "description": "/** Set to `true` to apply the Set Filter immediately when the user is typing in the Mini Filter.\n     * \n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressSelectAll": {
      "description": "/** Set to `true` to remove the Select All checkbox.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "defaultToNothingSelected": {
      "description": "/** By default, when the Set Filter is opened all values are shown selected. Set this to `true`\n     * to instead show all values as de-selected by default.\n     * \n     * This does not work when `excelMode` is enabled.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "comparator": {
      "description": "/** Comparator for sorting. If not provided, the Column Definition comparator is used. If Column\n     * Definition comparator is also not provided, the default (grid provided) comparator is used.\n     */",
      "type": {
        "arguments": { "a": "V | null", "b": "V | null" },
        "returnType": "number",
        "optional": true
      }
    },
    "textFormatter": {
      "description": "/** If specified, this formats the text before applying the Mini Filter compare logic, useful for\n     * instance to substitute accented characters.\n     */",
      "type": {
        "arguments": { "from": "string" },
        "returnType": "string",
        "optional": true
      }
    },
    "valueFormatter": {
      "description": "/** If specified, this formats the value before it is displayed in the Filter List.\n     * If a Key Creator is provided (see `keyCreator`), this must also be provided,\n     * unless `convertValuesToStrings` is `true`\n     */",
      "type": {
        "arguments": { "params": "ValueFormatterParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "keyCreator": {
      "description": "/** Function to return a string key for a value. This is required when the filter values are complex objects,\n     * or when `treeList = true` and the column is a group column with Tree Data or Grouping enabled.\n     * If not provided, the Column Definition Key Creator is used.\n     */",
      "type": {
        "arguments": { "params": "KeyCreatorParams<TData>" },
        "returnType": "string",
        "optional": true
      }
    },
    "showTooltips": {
      "description": "/** If `true`, hovering over a value in the Set Filter will show a tooltip containing the full,\n     * untruncated value.\n     * \n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "caseSensitive": {
      "description": "/** If `true`, enables case-sensitivity in the SetFilter Mini-Filter and Filter List.\n     * Default: `false`.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "excelMode": {
      "description": "/** Changes the behaviour of the Set Filter to match that of Excel's AutoFilter.\n     */",
      "type": { "returnType": "'mac' | 'windows'", "optional": true }
    },
    "convertValuesToStrings": {
      "description": "/** @deprecated As of v29 the Filter Model and Filter List will accept and return complex objects,\n     * as well as maintaining the type of primitives (e.g. number, boolean) when not used as keys.\n     * \n     * If this option is set to `true`, values will instead be converted to strings within the Filter Model and Filter List.\n     * Complex objects will be converted via the Key Creator, and primitive types will be converted directly to strings.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "treeList": {
      "description": "/** If `true`, the Set Filter List will be displayed in a tree format. If enabled, one of the following must be true:\n     * \n     * - A `treeListPathGetter` is provided to get the tree path for the column values.\n     * - The column values are of type `Date`, in which case the tree will be year -> month -> day.\n     * - Tree Data mode is enabled and the column is the group column. The Filter List will match the tree structure. A Key Creator must be supplied.\n     * - Grouping is enabled and the column is the group column. The Filter List will match the group structure. A Key Creator must be supplied.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "treeListPathGetter": {
      "description": "/** Requires `treeList = true`. If provided, this gets the tree path to display in the Set Filter List based on the column values.\n     */",
      "type": {
        "arguments": { "value": "V | null" },
        "returnType": "string[] | null",
        "optional": true
      }
    },
    "treeListFormatter": {
      "description": "/** Requires `treeList = true`. If specified, this formats the tree values before they are displayed in the Filter List.\n     * @param pathKey - The key for the current node in the tree.\n     * @param level - The level of the current node in the tree (starting at 0).\n     * @param parentPathKeys - The keys of the parent nodes up until the current node (exclusive).\n     * This will be an empty array if the node is at the root level.\n     */",
      "type": {
        "arguments": {
          "pathKey": "string | null",
          "level": "number",
          "parentPathKeys": "(string | null)[]"
        },
        "returnType": "string",
        "optional": true
      }
    },
    "meta": { "typeParams": ["TData = any", "V = string"] },
    "buttons": {
      "description": "/** Specifies the buttons to be shown in the filter, in the order they should be displayed in.\n     * The options are:\n     *\n     *  - `'apply'`: If the Apply button is present, the filter is only applied after the user hits the Apply button.\n     *  - `'clear'`: The Clear button will clear the (form) details of the filter without removing any active filters on the column.\n     *  - `'reset'`: The Reset button will clear the details of the filter and any active filters on that column.\n     *  - `'cancel'`: The Cancel button will discard any changes that have been made to the filter in the UI, restoring the applied model.\n     */",
      "type": { "returnType": "FilterButtonType[]", "optional": true }
    },
    "closeOnApply": {
      "description": "/** If the Apply button is present, the filter popup will be closed immediately when the Apply\n     * or Reset button is clicked if this is set to `true`.\n     *\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debounceMs": {
      "description": "/** Overrides the default debounce time in milliseconds for the filter. Defaults are:\n     * - `TextFilter` and `NumberFilter`: 500ms. (These filters have text field inputs, so a short delay before the input is formatted and the filtering applied is usually appropriate).\n     * - `DateFilter` and `SetFilter`: 0ms\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "readOnly": {
      "description": "/** If set to `true`, disables controls in the filter to mutate its state. Normally this would\n     * be used in conjunction with the Filter API.\n     *\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "ISetFilterTreeListTooltipParams": {
    "level": {
      "description": "/** Level of the tree (starting at 0). */",
      "type": { "returnType": "number", "optional": false }
    },
    "location": {
      "description": "/** What part of the application is showing the tooltip, e.g. 'cell', 'header', 'menuItem' etc */",
      "type": { "returnType": "string", "optional": false }
    },
    "value": {
      "description": "/** The value to be rendered by the tooltip. */",
      "type": { "returnType": "TValue", "optional": true }
    },
    "valueFormatted": {
      "description": "/** The formatted value to be rendered by the tooltip. */",
      "type": { "returnType": "string | null", "optional": true }
    },
    "colDef": {
      "description": "/** Column / ColumnGroup definition. */",
      "type": {
        "returnType": "ColDef<TData> | ColGroupDef<TData> | null",
        "optional": true
      }
    },
    "column": {
      "description": "/** Column / ColumnGroup */",
      "type": { "returnType": "Column | ColumnGroup", "optional": true }
    },
    "rowIndex": {
      "description": "/** The index of the row containing the cell rendering the tooltip. */",
      "type": { "returnType": "number", "optional": true }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": true }
    },
    "data": {
      "description": "/** Data for the row node in question. */",
      "type": { "returnType": "TData", "optional": true }
    },
    "meta": { "typeParams": ["TData = any", "TValue = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ISideBar": {
    "refresh": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "setDisplayed": {
      "type": {
        "arguments": { "show": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setSideBarPosition": {
      "type": {
        "arguments": { "position?": "'left' | 'right'" },
        "returnType": "void",
        "optional": false
      }
    },
    "isToolPanelShowing": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "openToolPanel": {
      "type": {
        "arguments": {
          "key": "string",
          "source?": "'sideBarButtonClicked' | 'sideBarInitializing' | 'api'"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "getToolPanelInstance": {
      "type": {
        "arguments": { "key": "string" },
        "returnType": "IToolPanel | undefined",
        "optional": false
      }
    },
    "close": {
      "type": {
        "arguments": {
          "source?": "'sideBarButtonClicked' | 'sideBarInitializing' | 'api'"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "openedItem": {
      "type": {
        "arguments": {},
        "returnType": "string | null",
        "optional": false
      }
    },
    "isDisplayed": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getDef": {
      "type": {
        "arguments": {},
        "returnType": "SideBarDef | undefined",
        "optional": false
      }
    }
  },
  "ToolPanelDef": {
    "id": {
      "description": "/** The unique ID for this panel. Used in the API and elsewhere to refer to the panel. */",
      "type": { "returnType": "string", "optional": false }
    },
    "labelKey": {
      "description": "/** The key used for localisation for displaying the label. The label is displayed in the tab button. */",
      "type": { "returnType": "string", "optional": false }
    },
    "labelDefault": {
      "description": "/** The default label if `labelKey` is missing or does not map to valid text through localisation. */",
      "type": { "returnType": "string", "optional": false }
    },
    "minWidth": {
      "description": "/** The min width of the tool panel. Default: `100` */",
      "type": { "returnType": "number", "optional": true }
    },
    "maxWidth": {
      "description": "/** The max width of the tool panel. Default: `undefined` */",
      "type": { "returnType": "number", "optional": true }
    },
    "width": {
      "description": "/** The initial width of the tool panel. Default: `$side-bar-panel-width (theme variable)` */",
      "type": { "returnType": "number", "optional": true }
    },
    "iconKey": {
      "description": "/** The key of the icon to be used as a graphical aid beside the label in the side bar. */",
      "type": { "returnType": "string", "optional": false }
    },
    "toolPanel": {
      "description": "/** The tool panel component to use as the panel.\n     * The provided panels use components `agColumnsToolPanel` and `agFiltersToolPanel`.\n     * To provide your own custom panel component, you reference it here.\n     */",
      "type": { "returnType": "any", "optional": true }
    },
    "toolPanelFramework": {
      "description": "/** @deprecated Same as `toolPanel` but for framework specific components. As of v27, use toolPanel instead for Framework components */",
      "type": { "returnType": "any", "optional": true }
    },
    "toolPanelParams": {
      "description": "/** Customise the parameters provided to the `toolPanel` component. */",
      "type": { "returnType": "any", "optional": true }
    }
  },
  "SideBarDef": {
    "toolPanels": {
      "description": "/** A list of all the panels to place in the side bar. The panels will be displayed in the provided order from top to bottom.\n     */",
      "type": { "returnType": "(ToolPanelDef | string)[]", "optional": true }
    },
    "defaultToolPanel": {
      "description": "/** The panel (identified by ID) to open by default. If none specified, the side bar is initially displayed closed. */",
      "type": { "returnType": "string", "optional": true }
    },
    "hiddenByDefault": {
      "description": "/** To hide the side bar by default, set this to `true`. If left undefined the side bar will be shown. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "position": {
      "description": "/** Sets the side bar position relative to the grid. */",
      "type": { "returnType": "'left' | 'right'", "optional": true }
    }
  },
  "ISparklineCellRendererParams": {
    "sparklineOptions": {
      "type": { "returnType": "SparklineOptions", "optional": true }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "value": {
      "description": "/** Value to be rendered. */",
      "type": { "returnType": "TValue", "optional": false }
    },
    "valueFormatted": {
      "description": "/** Formatted value to be rendered. */",
      "type": { "returnType": "string | null | undefined", "optional": false }
    },
    "fullWidth": {
      "description": "/** True if this is a full width row. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pinned": {
      "description": "/** Pinned state of the cell. */",
      "type": { "returnType": "\"left\" | \"right\" | null", "optional": true }
    },
    "data": {
      "description": "/** The row's data. Data property can be `undefined` when row grouping or loading infinite row models. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The current index of the row (this changes after filter and sort). */",
      "type": { "returnType": "number", "optional": false }
    },
    "colDef": {
      "description": "/** The cell's column definition. */",
      "type": { "returnType": "ColDef", "optional": true }
    },
    "column": {
      "description": "/** The cell's column. */",
      "type": { "returnType": "Column", "optional": true }
    },
    "eGridCell": {
      "description": "/** The grid's cell, a DOM div element. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "eParentOfValue": {
      "description": "/** The parent DOM item for the cell renderer, same as eGridCell unless using checkbox selection. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "getValue": {
      "description": "/** Convenience function to get most recent up to date value. */",
      "type": { "arguments": {}, "returnType": "any", "optional": true }
    },
    "setValue": {
      "description": "/** Convenience function to set the value. */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "void",
        "optional": true
      }
    },
    "formatValue": {
      "description": "/** Convenience function to format a value using the column's formatter. */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": true
      }
    },
    "refreshCell": {
      "description": "/** Convenience function to refresh the cell. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "registerRowDragger": {
      "description": "/** registerRowDragger:\n     * @param rowDraggerElement The HTMLElement to be used as Row Dragger\n     * @param dragStartPixels The amount of pixels required to start the drag (Default: 4)\n     * @param value The value to be displayed while dragging. Note: Only relevant with Full Width Rows.\n     * @param suppressVisibilityChange Set to `true` to prevent the Grid from hiding the Row Dragger when it is disabled.\n     */",
      "type": {
        "arguments": {
          "rowDraggerElement": "HTMLElement",
          "dragStartPixels?": "number",
          "value?": "string",
          "suppressVisibilityChange?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "SparklineOptions": {},
  "BaseSparklineOptions": {
    "xKey": {
      "description": "/** The key to use to retrieve X values from the data. This will only be used if the data array contains objects with key-value pairs.\n     * Default: `'x'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "yKey": {
      "description": "/** The key to use to retrieve Y values from the data. This will only be used if the data array contains objects with key-value pairs.\n     * Default: `'y'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "padding": {
      "description": "/** Configuration for the padding in pixels shown around the sparklines. */",
      "type": { "returnType": "PaddingOptions", "optional": true }
    },
    "axis": {
      "description": "/** The options for the axis line in the sparklines. */",
      "type": { "returnType": "SparklineAxisOptions", "optional": true }
    },
    "highlightStyle": {
      "description": "/** The configuration for the highlighting used when the items are hovered over. */",
      "type": { "returnType": "HighlightStyleOptions", "optional": true }
    },
    "tooltip": {
      "description": "/** Configuration for the tooltips. */",
      "type": { "returnType": "SparklineTooltipOptions", "optional": true }
    }
  },
  "LineSparklineOptions": {
    "type": {
      "description": "/** The type of sparklines to create, in this case it would be `'line'`. */",
      "type": { "returnType": "'line'", "optional": true }
    },
    "line": {
      "description": "/** The configuration for the line. */",
      "type": { "returnType": "SparklineLineOptions", "optional": true }
    },
    "marker": {
      "description": "/** The configuration for the marker styles. */",
      "type": { "returnType": "SparklineMarkerOptions", "optional": true }
    },
    "crosshairs": {
      "description": "/** The configuration for the crosshairs. */",
      "type": { "returnType": "SparklineCrosshairsOptions", "optional": true }
    },
    "xKey": {
      "description": "/** The key to use to retrieve X values from the data. This will only be used if the data array contains objects with key-value pairs.\n     * Default: `'x'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "yKey": {
      "description": "/** The key to use to retrieve Y values from the data. This will only be used if the data array contains objects with key-value pairs.\n     * Default: `'y'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "padding": {
      "description": "/** Configuration for the padding in pixels shown around the sparklines. */",
      "type": { "returnType": "PaddingOptions", "optional": true }
    },
    "axis": {
      "description": "/** The options for the axis line in the sparklines. */",
      "type": { "returnType": "SparklineAxisOptions", "optional": true }
    },
    "highlightStyle": {
      "description": "/** The configuration for the highlighting used when the items are hovered over. */",
      "type": { "returnType": "HighlightStyleOptions", "optional": true }
    },
    "tooltip": {
      "description": "/** Configuration for the tooltips. */",
      "type": { "returnType": "SparklineTooltipOptions", "optional": true }
    }
  },
  "AreaSparklineOptions": {
    "type": {
      "description": "/** The type of sparklines to create, in this case it would be `'area'`. */",
      "type": { "returnType": "'area'", "optional": true }
    },
    "fill": {
      "description": "/** The CSS colour value for the fill of the area.\n     * Default: `'rgba(124, 181, 236, 0.25)'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "line": {
      "description": "/** The configuration for the line. */",
      "type": { "returnType": "SparklineLineOptions", "optional": true }
    },
    "marker": {
      "description": "/** The configuration for the marker styles. */",
      "type": { "returnType": "SparklineMarkerOptions", "optional": true }
    },
    "crosshairs": {
      "description": "/** The configuration for the crosshairs. */",
      "type": { "returnType": "SparklineCrosshairsOptions", "optional": true }
    },
    "xKey": {
      "description": "/** The key to use to retrieve X values from the data. This will only be used if the data array contains objects with key-value pairs.\n     * Default: `'x'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "yKey": {
      "description": "/** The key to use to retrieve Y values from the data. This will only be used if the data array contains objects with key-value pairs.\n     * Default: `'y'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "padding": {
      "description": "/** Configuration for the padding in pixels shown around the sparklines. */",
      "type": { "returnType": "PaddingOptions", "optional": true }
    },
    "axis": {
      "description": "/** The options for the axis line in the sparklines. */",
      "type": { "returnType": "SparklineAxisOptions", "optional": true }
    },
    "highlightStyle": {
      "description": "/** The configuration for the highlighting used when the items are hovered over. */",
      "type": { "returnType": "HighlightStyleOptions", "optional": true }
    },
    "tooltip": {
      "description": "/** Configuration for the tooltips. */",
      "type": { "returnType": "SparklineTooltipOptions", "optional": true }
    }
  },
  "ColumnSparklineOptions": {
    "type": {
      "description": "/** The type of sparklines to create, in this case it would be `'column'`. */",
      "type": { "returnType": "'column'", "optional": true }
    },
    "fill": {
      "description": "/** The CSS colour value for the fill of the columns.\n     * Default: `'rgb(124, 181, 236)'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the columns.\n     * Default: `'silver'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the columns.\n     * Default: `0`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "paddingInner": {
      "description": "/** The size of the gap between the columns as a proportion, between 0 and 1. This value is a fraction of the “step”, which is the interval between the start of a band and the start of the next band.\n     * Default: `0.1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "paddingOuter": {
      "description": "/** The padding on the outside i.e. left and right of the first and last columns, to leave some room for the axis. In association with `paddingInner`, this value can be between 0 and 1.\n     * Default: `0.2`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "valueAxisDomain": {
      "description": "/** User override for the automatically determined domain (based on data min and max values). Only applied to `number` axes.\n     * Used to interpolate the numeric pixel values corresponding to each data value.\n     */",
      "type": { "returnType": "[number, number]", "optional": true }
    },
    "formatter": {
      "description": "/** A callback function to return format styles of type ColumnFormat, based on the data represented by individual columns. */",
      "type": { "returnType": "SparklineColumnFormatter", "optional": true }
    },
    "label": {
      "description": "/** Configuration for the labels. */",
      "type": { "returnType": "SparklineLabelOptions", "optional": true }
    },
    "xKey": {
      "description": "/** The key to use to retrieve X values from the data. This will only be used if the data array contains objects with key-value pairs.\n     * Default: `'x'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "yKey": {
      "description": "/** The key to use to retrieve Y values from the data. This will only be used if the data array contains objects with key-value pairs.\n     * Default: `'y'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "padding": {
      "description": "/** Configuration for the padding in pixels shown around the sparklines. */",
      "type": { "returnType": "PaddingOptions", "optional": true }
    },
    "axis": {
      "description": "/** The options for the axis line in the sparklines. */",
      "type": { "returnType": "SparklineAxisOptions", "optional": true }
    },
    "highlightStyle": {
      "description": "/** The configuration for the highlighting used when the items are hovered over. */",
      "type": { "returnType": "HighlightStyleOptions", "optional": true }
    },
    "tooltip": {
      "description": "/** Configuration for the tooltips. */",
      "type": { "returnType": "SparklineTooltipOptions", "optional": true }
    }
  },
  "BarSparklineOptions": {
    "type": {
      "description": "/** The type of sparklines to create, in this case it would be `'bar'`. */",
      "type": { "returnType": "'bar'", "optional": true }
    },
    "fill": {
      "description": "/** The CSS colour value for the fill of the bars.\n     * Default: `'rgb(124, 181, 236)'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the bars.\n     * Default `'silver'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the bars.\n     * Default: `0`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "paddingInner": {
      "description": "/** The size of the gap between the bars as a proportion, between 0 and 1. This value is a fraction of the “step”, which is the interval between the start of a band and the start of the next band.\n     * Default: `0.1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "paddingOuter": {
      "description": "/** The padding on the outside i.e. left and right of the first and last bars, to leave some room for the axis. In association with `paddingInner`, this value can be between 0 and 1.\n     * Default: `0.2`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "valueAxisDomain": {
      "description": "/** User override for the automatically determined domain (based on data min and max values). Only applied to `number` axes.\n     * Used to interpolate the numeric pixel values corresponding to each data value.\n     */",
      "type": { "returnType": "[number, number]", "optional": true }
    },
    "formatter": {
      "description": "/** A callback function to return format styles of type BarFormat, based on the data represented by individual bars. */",
      "type": { "returnType": "SparklineBarFormatter", "optional": true }
    },
    "label": {
      "description": "/** Configuration for the labels. */",
      "type": { "returnType": "SparklineLabelOptions", "optional": true }
    },
    "xKey": {
      "description": "/** The key to use to retrieve X values from the data. This will only be used if the data array contains objects with key-value pairs.\n     * Default: `'x'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "yKey": {
      "description": "/** The key to use to retrieve Y values from the data. This will only be used if the data array contains objects with key-value pairs.\n     * Default: `'y'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "padding": {
      "description": "/** Configuration for the padding in pixels shown around the sparklines. */",
      "type": { "returnType": "PaddingOptions", "optional": true }
    },
    "axis": {
      "description": "/** The options for the axis line in the sparklines. */",
      "type": { "returnType": "SparklineAxisOptions", "optional": true }
    },
    "highlightStyle": {
      "description": "/** The configuration for the highlighting used when the items are hovered over. */",
      "type": { "returnType": "HighlightStyleOptions", "optional": true }
    },
    "tooltip": {
      "description": "/** Configuration for the tooltips. */",
      "type": { "returnType": "SparklineTooltipOptions", "optional": true }
    }
  },
  "SparklineLabelOptions": {
    "enabled": {
      "description": "/** Set to true to enable labels.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "fontSize": {
      "description": "/** Set size of the font.\n     * Default: `8`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "fontFamily": {
      "description": "/** Specify the font for the label text.\n     * Default: `Verdana, sans-serif`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "fontStyle": {
      "description": "/** Specify the font style for the label text. */",
      "type": {
        "returnType": "'normal' | 'italic' | 'oblique'",
        "optional": true
      }
    },
    "fontWeight": {
      "description": "/** Set how thick or thin characters in label text should be displayed. */",
      "type": {
        "returnType": "'normal' | 'bold' | 'bolder' | 'lighter' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'",
        "optional": true
      }
    },
    "color": {
      "description": "/** Set the color of the label text. The color can be specified by a color name, a HEX or an RGB value.\n     * Default: `rgba(70, 70, 70, 1)`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "formatter": {
      "description": "/** A callback function to return the text to be displayed as the label, based on the value represented by the column or bar.\n     * By default the values are simply stringified. */",
      "type": {
        "arguments": { "params": "LabelFormatterParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "placement": {
      "description": "/** Where to render labels relative to the segments.\n    * Default: `insideEnd`\n    * */",
      "type": { "returnType": "BarColumnLabelPlacement", "optional": true }
    }
  },
  "LabelFormatterParams": {
    "value": {
      "description": "/** The Y value of the data point. */",
      "type": { "returnType": "number | undefined", "optional": false }
    }
  },
  "BarColumnLabelPlacement": {},
  "PaddingOptions": {
    "top": {
      "description": "/** The number of pixels of padding at the top of the sparkline area.\n     * Default: `3`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "right": {
      "description": "/** The number of pixels of padding at the right of the sparkline area.\n     * Default: `3`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "bottom": {
      "description": "/** The number of pixels of padding at the bottom of the sparkline area.\n     * Default: `3`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "left": {
      "description": "/** The number of pixels of padding at the left of the sparkline area.\n     * Default: `3`\n     */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "SparklineAxisOptions": {
    "type": {
      "description": "/** The type of axis used to plot the data.\n     * Default: `'category'`\n     */",
      "type": { "returnType": "AxisType", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the axis line.\n     * Default: `'rgb(204, 214, 235)'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the axis line.\n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "AxisType": {},
  "SparklineTooltipOptions": {
    "enabled": {
      "description": "/** Set to false to disable tooltips. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "container": {
      "description": "/** The element to place the tooltip into. This can be used to confine the tooltip to a specific area which may be outside of the sparkline grid cell. */",
      "type": { "returnType": "HTMLElement", "optional": true }
    },
    "xOffset": {
      "description": "/** The horizontal distance in pixels between the cursor and the top left corner of the tooltip.\n     * Default: `10`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "yOffset": {
      "description": "/** The vertical distance in pixels between the cursor and the top left corner of the tooltip.\n     * Default: `0`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "renderer": {
      "description": "/** A callback function used to create the content for the tooltips. This function should return an object or a HTML string used to render the tooltip. */",
      "type": { "returnType": "SparklineTooltipRenderer", "optional": true }
    }
  },
  "SparklineTooltipRenderer": {},
  "TooltipRendererResult": {
    "enabled": {
      "description": "/** Set to false to disable individual tooltip. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "content": {
      "description": "/** The content to display in each tooltip. */",
      "type": { "returnType": "string", "optional": true }
    },
    "title": {
      "description": "/** The title of the tooltip. */",
      "type": { "returnType": "string", "optional": true }
    },
    "color": {
      "description": "/** The CSS color for the title text. */",
      "type": { "returnType": "string", "optional": true }
    },
    "backgroundColor": {
      "description": "/** The CSS color for the background of the tooltip title. */",
      "type": { "returnType": "string", "optional": true }
    },
    "opacity": {
      "description": "/** The opacity of the background for the tooltip title. */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "TooltipRendererParams": {
    "context": {
      "description": "/** The grid context, includes row data, giving access to data from other columns in the same row. */",
      "type": { "returnType": "any", "optional": true }
    },
    "datum": {
      "description": "/** The raw datum associated with the point. */",
      "type": { "returnType": "any", "optional": false }
    },
    "xValue": {
      "description": "/** The X value of the data point. */",
      "type": { "returnType": "any", "optional": false }
    },
    "yValue": {
      "description": "/** The Y value of the data point. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "SparklineLineOptions": {
    "stroke": {
      "description": "/** The CSS colour value for the line.\n     *  Default: `'rgb(124, 181, 236)'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the line.\n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "HighlightStyleOptions": {
    "size": {
      "description": "/** The width in pixels of the markers when hovered over. This is only for the Line and Area sparklines as Column and Bar sparklines do not have markers.\n     * Default: `6`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "fill": {
      "description": "/** The fill colour of the markers, columns or bars when hovered over. Use `undefined` for no highlight fill.\n     * Default: `'yellow'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the markers, columns or bars when hovered over. Use `undefined` for no highlight stroke.\n     * Default: `'silver'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the markers, columns or bars when hovered over.\n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "SparklineCrosshairsOptions": {
    "xLine": {
      "type": { "returnType": "CrosshairLineOptions", "optional": true }
    },
    "yLine": {
      "type": { "returnType": "CrosshairLineOptions", "optional": true }
    }
  },
  "CrosshairLineOptions": {
    "enabled": {
      "description": "/** Set to true to show crosshair line.\n     * Default: false\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the crosshair line.\n     * Default: `rgba(0,0,0, 0.54)`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the crosshair line.\n     * Default: 1\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "lineDash": {
      "description": "/** Defines how the crosshair stroke is rendered. This can be one of the lineDash style options.\n     * The default is `solid`, this renders a solid stroke with no gaps.\n     */",
      "type": {
        "returnType": "'dash' | 'dashDot' | 'dashDotDot' | 'dot' | 'longDash' | 'longDashDot' | 'longDashDotDot' | 'shortDash' | 'shortDashDot' | 'shortDashDotDot' | 'shortDot' | 'solid'",
        "optional": true
      }
    },
    "lineCap": {
      "description": "/** The shape used to draw the end points of the crosshair line.\n     * The options include `butt` (the ends of the line are squared off at the endpoints), `round` (the ends of the line are rounded) and `square` (the ends of the line are squared off by adding a box with width equal to the line's strokeWidth and height equal to half the line's strokeWidth).\n     * Default: `butt`\n     */",
      "type": { "returnType": "'round' | 'square' | 'butt'", "optional": true }
    }
  },
  "SparklineColumnFormatter": {},
  "SparklineBarFormatter": {},
  "ColumnFormatterParams": {
    "datum": {
      "description": "/** The raw data associated with the specific column. */",
      "type": { "returnType": "any", "optional": false }
    },
    "xValue": {
      "description": "/** The X value of the data point. */",
      "type": { "returnType": "any", "optional": false }
    },
    "yValue": {
      "description": "/** The Y value of the data point. */",
      "type": { "returnType": "any", "optional": false }
    },
    "width": {
      "description": "/** The width of the column in pixels. */",
      "type": { "returnType": "number", "optional": false }
    },
    "height": {
      "description": "/** The height of the column in pixels. */",
      "type": { "returnType": "number", "optional": false }
    },
    "min": {
      "description": "/** Whether or not the column is a minimum point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "max": {
      "description": "/** Whether or not the column is a maximum point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "first": {
      "description": "/** Whether or not the column represents the first data point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "last": {
      "description": "/** Whether or not the column represents the last data point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "fill": {
      "description": "/** The CSS colour value for the fill of the individual column. */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the individual column. */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the individual column. */",
      "type": { "returnType": "number", "optional": false }
    },
    "highlighted": {
      "description": "/** Whether or not the column is highlighted. */",
      "type": { "returnType": "boolean", "optional": false }
    }
  },
  "ColumnFormat": {
    "fill": {
      "description": "/** The CSS colour value for the fill of the individual column. */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the individual column. */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the individual column.*/",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "BarFormatterParams": {
    "datum": {
      "description": "/** The raw data associated with the specific bar. */",
      "type": { "returnType": "any", "optional": false }
    },
    "xValue": {
      "description": "/** The X value of the data point. */",
      "type": { "returnType": "any", "optional": false }
    },
    "yValue": {
      "description": "/** The Y value of the data point. */",
      "type": { "returnType": "any", "optional": false }
    },
    "width": {
      "description": "/** The width of the bar in pixels. */",
      "type": { "returnType": "number", "optional": false }
    },
    "height": {
      "description": "/** The height of the bar in pixels. */",
      "type": { "returnType": "number", "optional": false }
    },
    "min": {
      "description": "/** Whether or not the bar is a minimum point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "max": {
      "description": "/** Whether or not the bar is a maximum point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "first": {
      "description": "/** Whether or not the bar represents the first data point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "last": {
      "description": "/** Whether or not the bar represents the last data point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "fill": {
      "description": "/** The CSS colour value for the fill of the individual bar. */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the individual bar. */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the individual bar. */",
      "type": { "returnType": "number", "optional": false }
    },
    "highlighted": {
      "description": "/** Whether or not the bar is highlighted. */",
      "type": { "returnType": "boolean", "optional": false }
    }
  },
  "BarFormat": {
    "fill": {
      "description": "/** The CSS colour value for the fill of the individual bar. */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the individual bar. */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the individual bar.*/",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "SparklineMarkerOptions": {
    "enabled": {
      "description": "/** By default this is set to `true` whilst marker size is set to `0`, which means the markers are present but not visible.\n     * Default: `true`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "shape": {
      "description": "/** The shape of the markers.\n     * Default: `'circle'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "size": {
      "description": "/** The width in pixels of markers. By default this is `0`, increase the size to make markers visible.\n     * Default: `0`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "fill": {
      "description": "/** The CSS colour value for the fill of the markers.\n     * Default: `'rgb(124, 181, 236)'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the markers.\n     * Default: `'rgb(124, 181, 236)'`\n     */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the markers.\n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "formatter": {
      "description": "/** A callback function to return format styles for individual markers. */",
      "type": { "returnType": "SparklineMarkerFormatter", "optional": true }
    }
  },
  "SparklineMarkerFormatter": {},
  "MarkerFormatterParams": {
    "datum": {
      "description": "/** The raw data associated with the specific marker. */",
      "type": { "returnType": "any", "optional": false }
    },
    "xValue": {
      "description": "/** The X value of the data point. */",
      "type": { "returnType": "any", "optional": false }
    },
    "yValue": {
      "description": "/** The Y value of the data point. */",
      "type": { "returnType": "any", "optional": false }
    },
    "min": {
      "description": "/** Whether or not the marker is a minimum point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "max": {
      "description": "/** Whether or not the marker is a maximum point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "first": {
      "description": "/** Whether or not the marker represents the first data point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "last": {
      "description": "/** Whether or not the marker represents the last data point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "fill": {
      "description": "/** The CSS colour value for the fill of the individual marker. */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the individual marker. */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the individual marker. */",
      "type": { "returnType": "number", "optional": false }
    },
    "size": {
      "description": "/** The width in pixels of the individual marker. */",
      "type": { "returnType": "number", "optional": false }
    },
    "highlighted": {
      "description": "/** Whether or not the marker is highlighted. */",
      "type": { "returnType": "boolean", "optional": false }
    }
  },
  "MarkerFormat": {
    "enabled": {
      "description": "/** Set to false to make marker invisible. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "size": {
      "description": "/** The width in pixels of the individual marker. */",
      "type": { "returnType": "number", "optional": true }
    },
    "fill": {
      "description": "/** The CSS colour value for the fill of the individual marker. */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the individual marker. */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the individual marker.*/",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "IStatusBarService": {
    "registerStatusPanel": {
      "type": {
        "arguments": { "key": "string", "component": "IStatusPanelComp" },
        "returnType": "void",
        "optional": false
      }
    },
    "getStatusPanel": {
      "type": {
        "arguments": { "key": "string" },
        "returnType": "IStatusPanelComp",
        "optional": false
      }
    }
  },
  "StatusPanelDef": {
    "statusPanel": { "type": { "returnType": "any", "optional": true } },
    "statusPanelFramework": {
      "description": "/** @deprecated As of v27, you can use statusPanel instead for Framework Components.  */",
      "type": { "returnType": "any", "optional": true }
    },
    "align": { "type": { "returnType": "string", "optional": true } },
    "key": { "type": { "returnType": "string", "optional": true } },
    "statusPanelParams": { "type": { "returnType": "any", "optional": true } }
  },
  "IStatusPanelParams": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "IStatusPanel": {},
  "IStatusPanelComp": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. */",
      "type": {
        "arguments": { "params": "IStatusPanelParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "IToolPanelParams": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "IToolPanel": {
    "refresh": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "IToolPanelComp": {
    "refresh": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. */",
      "type": {
        "arguments": { "params": "IToolPanelParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "ToolPanelColumnCompParams": {
    "suppressColumnMove": {
      "description": "/** Suppress Column Move */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressRowGroups": {
      "description": "/** Suppress Row Groups section */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressValues": {
      "description": "/** Suppress Values section */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressPivots": {
      "description": "/** Suppress Column Labels (Pivot) section */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressPivotMode": {
      "description": "/** Suppress Pivot Mode selection */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressColumnFilter": {
      "description": "/** Suppress Column Filter section */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressColumnSelectAll": {
      "description": "/** Suppress Select / Un-select all widget */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressColumnExpandAll": {
      "description": "/** Suppress Expand / Collapse all widget */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "contractColumnSelection": {
      "description": "/** By default, column groups start expanded. Pass `true` to default to contracted groups */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressSyncLayoutWithGrid": {
      "description": "/** Suppress updating the layout of columns as they are rearranged in the grid */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "IPrimaryColsPanel": {
    "getGui": {
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "init": {
      "type": {
        "arguments": {
          "allowDragging": "boolean",
          "params": "ToolPanelColumnCompParams",
          "eventType": "ColumnEventType"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "onExpandAll": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "onCollapseAll": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "expandGroups": {
      "type": {
        "arguments": { "groupIds?": "string[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "collapseGroups": {
      "type": {
        "arguments": { "groupIds?": "string[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "setColumnLayout": {
      "type": {
        "arguments": { "colDefs": "(ColDef | ColGroupDef)[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "syncLayoutWithGrid": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "IViewportDatasource": {
    "init": {
      "description": "/** Gets called exactly once before viewPort is used. Passes methods to be used to tell viewPort of data loads / changes. */",
      "type": {
        "arguments": { "params": "IViewportDatasourceParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "setViewportRange": {
      "description": "/** Tell the viewport what the scroll position of the grid is, so it knows what rows it has to get. */",
      "type": {
        "arguments": { "firstRow": "number", "lastRow": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once when viewPort is no longer used. If you need to do any cleanup, do it here. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "IViewportDatasourceParams": {
    "setRowCount": {
      "description": "/** Datasource calls this method when the total row count changes. This in turn sets the height of the grids vertical scroll. */",
      "type": {
        "arguments": { "count": "number", "keepRenderedRows?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRowData": {
      "description": "/** Datasource calls this when new data arrives. The grid then updates the provided rows. The rows are mapped [rowIndex]=>rowData].*/",
      "type": {
        "arguments": { "rowData": "{ [key: number]: any; }" },
        "returnType": "void",
        "optional": false
      }
    },
    "getRow": {
      "description": "/** Datasource calls this when it wants a row node - typically used when it wants to update the row node. */",
      "type": {
        "arguments": { "rowIndex": "number" },
        "returnType": "IRowNode",
        "optional": false
      }
    }
  },
  "XmlElement": {
    "name": { "type": { "returnType": "string", "optional": false } },
    "properties": {
      "type": { "returnType": "XmlAttributes", "optional": true }
    },
    "children": { "type": { "returnType": "XmlElement[]", "optional": true } },
    "textNode": { "type": { "returnType": "string | null", "optional": true } }
  },
  "HeaderElement": {
    "version": { "type": { "returnType": "string", "optional": true } },
    "standalone": { "type": { "returnType": "string", "optional": true } },
    "encoding": { "type": { "returnType": "string", "optional": true } }
  },
  "XmlAttributes": {
    "prefixedAttributes": {
      "type": { "returnType": "PrefixedXmlAttributes[]", "optional": true }
    },
    "rawMap": { "type": { "returnType": "any", "optional": true } }
  },
  "PrefixedXmlAttributes": {
    "prefix": { "type": { "returnType": "string", "optional": false } },
    "map": { "type": { "returnType": "any", "optional": false } }
  },
  "IDetailCellRenderer": {
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "addOrRemoveDetailGridCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setDetailGrid": {
      "type": {
        "arguments": { "gridOptions": "GridOptions<TData>" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRowData": {
      "type": {
        "arguments": { "rowData": "TData[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "getGui": {
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any"] }
  },
  "IDetailCellRendererParams": {
    "detailGridOptions": {
      "description": "/** Provide Grid Options to use for the Detail Grid.\n     */",
      "type": { "returnType": "GridOptions<TDetail>", "optional": false }
    },
    "getDetailRowData": {
      "description": "/** A function that provides what rows to display in the Detail Grid. */",
      "type": {
        "returnType": "GetDetailRowData<TData, TDetail>",
        "optional": false
      }
    },
    "refreshStrategy": {
      "description": "/** Defines how to refresh the Detail Grids as data is changing in the Master Grid. */",
      "type": {
        "returnType": "'rows' | 'everything' | 'nothing'",
        "optional": false
      }
    },
    "template": {
      "description": "/** Allows changing the template used around the Detail Grid. */",
      "type": {
        "returnType": "string | TemplateFunc<TData>",
        "optional": false
      }
    },
    "agGridReact": { "type": { "returnType": "any", "optional": false } },
    "frameworkComponentWrapper": {
      "type": { "returnType": "any", "optional": false }
    },
    "pinned": {
      "type": {
        "returnType": "\"left\" | \"right\" | null | undefined",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any", "TDetail = any"] },
    "value": {
      "description": "/** Value to be rendered. */",
      "type": { "returnType": "TValue", "optional": false }
    },
    "valueFormatted": {
      "description": "/** Formatted value to be rendered. */",
      "type": { "returnType": "string | null | undefined", "optional": false }
    },
    "fullWidth": {
      "description": "/** True if this is a full width row. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "data": {
      "description": "/** The row's data. Data property can be `undefined` when row grouping or loading infinite row models. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The current index of the row (this changes after filter and sort). */",
      "type": { "returnType": "number", "optional": false }
    },
    "colDef": {
      "description": "/** The cell's column definition. */",
      "type": { "returnType": "ColDef", "optional": true }
    },
    "column": {
      "description": "/** The cell's column. */",
      "type": { "returnType": "Column", "optional": true }
    },
    "eGridCell": {
      "description": "/** The grid's cell, a DOM div element. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "eParentOfValue": {
      "description": "/** The parent DOM item for the cell renderer, same as eGridCell unless using checkbox selection. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "getValue": {
      "description": "/** Convenience function to get most recent up to date value. */",
      "type": { "arguments": {}, "returnType": "any", "optional": true }
    },
    "setValue": {
      "description": "/** Convenience function to set the value. */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "void",
        "optional": true
      }
    },
    "formatValue": {
      "description": "/** Convenience function to format a value using the column's formatter. */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": true
      }
    },
    "refreshCell": {
      "description": "/** Convenience function to refresh the cell. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "registerRowDragger": {
      "description": "/** registerRowDragger:\n     * @param rowDraggerElement The HTMLElement to be used as Row Dragger\n     * @param dragStartPixels The amount of pixels required to start the drag (Default: 4)\n     * @param value The value to be displayed while dragging. Note: Only relevant with Full Width Rows.\n     * @param suppressVisibilityChange Set to `true` to prevent the Grid from hiding the Row Dragger when it is disabled.\n     */",
      "type": {
        "arguments": {
          "rowDraggerElement": "HTMLElement",
          "dragStartPixels?": "number",
          "value?": "string",
          "suppressVisibilityChange?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "GetDetailRowData": {
    "meta": { "typeParams": ["TData = any", "TDetail = any"] }
  },
  "GetDetailRowDataParams": {
    "node": {
      "description": "/** Row node for the details request. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "data": {
      "description": "/** Data for the current row. */",
      "type": { "returnType": "TData", "optional": false }
    },
    "successCallback": {
      "description": "/** Success callback: pass the rows back for the grid request.  */",
      "type": {
        "arguments": { "rowData": "TDetail[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any", "TDetail = any"] }
  },
  "TemplateFunc": { "meta": { "typeParams": ["TData = any"] } },
  "IDetailCellRendererCtrl": {
    "init": {
      "type": {
        "arguments": {
          "comp": "IDetailCellRenderer",
          "params": "IDetailCellRendererParams"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "registerDetailWithMaster": {
      "type": {
        "arguments": { "api": "GridApi", "columnApi": "ColumnApi" },
        "returnType": "void",
        "optional": false
      }
    },
    "refresh": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    }
  },
  "RowDataTransaction": {
    "addIndex": {
      "description": "/** Index to add rows */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "add": {
      "description": "/** Rows to add */",
      "type": { "returnType": "TData[] | null", "optional": true }
    },
    "remove": {
      "description": "/** Rows to remove */",
      "type": { "returnType": "TData[] | null", "optional": true }
    },
    "update": {
      "description": "/** Rows to update */",
      "type": { "returnType": "TData[] | null", "optional": true }
    },
    "meta": { "typeParams": ["TData = any"] }
  },
  "RowNodeTransaction": {
    "add": {
      "description": "/** Row nodes added */",
      "type": { "returnType": "IRowNode<TData>[]", "optional": false }
    },
    "remove": {
      "description": "/** Row nodes removed */",
      "type": { "returnType": "IRowNode<TData>[]", "optional": false }
    },
    "update": {
      "description": "/** Row nodes updated */",
      "type": { "returnType": "IRowNode<TData>[]", "optional": false }
    },
    "meta": { "typeParams": ["TData = any"] }
  },
  "ServerSideTransaction": {
    "route": {
      "description": "/** The Row Store to apply the transaction to, ie what group level.\n     * eg ['Ireland','2002'] to update the child store found after expanding Ireland and 2002 groups.\n     * Passing in blank to empty applies the transaction to the top level.\n     */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "addIndex": {
      "description": "/** Index position to add at. If missing, rows will be added to the end. */",
      "type": { "returnType": "number", "optional": true }
    },
    "add": {
      "description": "/** Rows to add */",
      "type": { "returnType": "any[]", "optional": true }
    },
    "remove": {
      "description": "/** Rows to remove */",
      "type": { "returnType": "any[]", "optional": true }
    },
    "update": {
      "description": "/** Rows to update */",
      "type": { "returnType": "any[]", "optional": true }
    }
  },
  "ServerSideTransactionResult": {
    "status": {
      "description": "/** The status of applying the transaction. */",
      "type": {
        "returnType": "ServerSideTransactionResultStatus",
        "optional": false
      }
    },
    "add": {
      "description": "/** If rows were added, the newly created Row Nodes for those rows. */",
      "type": { "returnType": "IRowNode[]", "optional": true }
    },
    "remove": {
      "description": "/** If rows were removed, the deleted Row Nodes. */",
      "type": { "returnType": "IRowNode[]", "optional": true }
    },
    "update": {
      "description": "/** If rows were updated, the updated Row Nodes. */",
      "type": { "returnType": "IRowNode[]", "optional": true }
    }
  },
  "ServerSideTransactionResultStatus": {},
  "TabbedLayoutParams": {
    "items": { "type": { "returnType": "TabbedItem[]", "optional": false } },
    "cssClass": { "type": { "returnType": "string", "optional": true } },
    "keepScrollPosition": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "onItemClicked": { "type": { "returnType": "Function", "optional": true } },
    "onActiveItemClicked": {
      "type": { "returnType": "Function", "optional": true }
    }
  },
  "TabbedItem": {
    "title": { "type": { "returnType": "Element", "optional": false } },
    "titleLabel": { "type": { "returnType": "string", "optional": false } },
    "bodyPromise": {
      "type": { "returnType": "AgPromise<HTMLElement>", "optional": false }
    },
    "name": { "type": { "returnType": "string", "optional": false } },
    "getScrollableContainer": {
      "type": { "arguments": {}, "returnType": "HTMLElement", "optional": true }
    },
    "afterAttachedCallback": {
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "afterDetachedCallback": {
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "TabbedItemWrapper": {
    "tabbedItem": { "type": { "returnType": "TabbedItem", "optional": false } },
    "eHeaderButton": {
      "type": { "returnType": "HTMLElement", "optional": false }
    }
  },
  "TaskItem": {
    "task": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "index": { "type": { "returnType": "number", "optional": false } },
    "createOrder": { "type": { "returnType": "number", "optional": false } }
  },
  "TaskList": {
    "list": { "type": { "returnType": "TaskItem[]", "optional": false } },
    "sorted": { "type": { "returnType": "boolean", "optional": false } }
  },
  "SimpleHttpRequestParams": {
    "url": { "type": { "returnType": "string", "optional": false } }
  },
  "ModuleNames": {},
  "GridOptionKey": {},
  "AnyGridOptions": {},
  "KeysLike": { "meta": { "typeParams": ["U"] } },
  "CallbackKeys": {},
  "FunctionKeys": {},
  "ICellComp": {
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setUserStyles": {
      "type": {
        "arguments": { "styles": "CellStyle" },
        "returnType": "void",
        "optional": false
      }
    },
    "getFocusableElement": {
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "setTabIndex": {
      "type": {
        "arguments": { "tabIndex": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRole": {
      "type": {
        "arguments": { "role": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setColId": {
      "type": {
        "arguments": { "colId": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setTitle": {
      "type": {
        "arguments": { "title": "string | undefined" },
        "returnType": "void",
        "optional": false
      }
    },
    "setIncludeSelection": {
      "type": {
        "arguments": { "include": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setIncludeRowDrag": {
      "type": {
        "arguments": { "include": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setIncludeDndSource": {
      "type": {
        "arguments": { "include": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "getCellEditor": {
      "type": {
        "arguments": {},
        "returnType": "ICellEditor | null",
        "optional": false
      }
    },
    "getCellRenderer": {
      "type": {
        "arguments": {},
        "returnType": "ICellRenderer | null",
        "optional": false
      }
    },
    "getParentOfValue": {
      "type": {
        "arguments": {},
        "returnType": "HTMLElement | null",
        "optional": false
      }
    },
    "setRenderDetails": {
      "type": {
        "arguments": {
          "compDetails": "UserCompDetails | undefined",
          "valueToDisplay": "any",
          "forceNewCellRendererInstance": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "setEditDetails": {
      "type": {
        "arguments": {
          "compDetails?": "UserCompDetails",
          "popup?": "boolean",
          "position?": "'over' | 'under'"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ILargeTextEditorParams": {
    "maxLength": {
      "description": "/** Max number of characters to allow. Default: `200` */",
      "type": { "returnType": "number", "optional": false }
    },
    "rows": {
      "description": "/** Number of character rows to display. Default: `10` */",
      "type": { "returnType": "number", "optional": false }
    },
    "cols": {
      "description": "/** Number of character columns to display. Default: `60` */",
      "type": { "returnType": "number", "optional": false }
    },
    "value": {
      "description": "/** Current value of the cell */",
      "type": { "returnType": "TValue", "optional": false }
    },
    "eventKey": {
      "description": "/** Key value of key that started the edit, eg 'Enter' or 'F2' - non-printable\n     *  characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "charPress": {
      "description": "/** The string that started the edit, eg 'a' if letter 'a' was pressed, or 'A' if\n     *  shift + letter 'a' only printable characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "column": {
      "description": "/** Grid column */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** Column definition */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "node": {
      "description": "/** Row node for the cell */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "data": {
      "description": "/** Row data */",
      "type": { "returnType": "TData", "optional": false }
    },
    "rowIndex": {
      "description": "/** Editing row index */",
      "type": { "returnType": "number", "optional": false }
    },
    "cellStartedEdit": {
      "description": "/** If doing full row edit, this is true if the cell is the one that started the edit\n     *  (eg it is the cell the use double clicked on, or pressed a key on etc). */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "onKeyDown": {
      "description": "/** callback to tell grid a key was pressed - useful to pass control key events (tab,\n     *  arrows etc) back to grid - however you do */",
      "type": {
        "arguments": { "event": "KeyboardEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "stopEditing": {
      "description": "/** Callback to tell grid to stop editing the current cell. Call with input parameter\n     * true to prevent focus from moving to the next cell after editing stops in case the\n     * grid property `enterMovesDownAfterEdit=true` */",
      "type": {
        "arguments": { "suppressNavigateAfterEdit?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "eGridCell": {
      "description": "/** A reference to the DOM element representing the grid cell that your component\n     *  will live inside. Useful if you want to add event listeners or classes at this level.\n     *  This is the DOM element that gets browser focus when selecting cells. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "parseValue": {
      "description": "/** Utility function to parse a value using the column's `colDef.valueParser` */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    },
    "formatValue": {
      "description": "/** Utility function to format a value using the column's `colDef.valueFormatter` */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any", "TValue = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ISelectCellEditorParams": {
    "values": {
      "description": "/** List of values to display */",
      "type": { "returnType": "any[]", "optional": false }
    },
    "value": {
      "description": "/** Current value of the cell */",
      "type": { "returnType": "TValue", "optional": false }
    },
    "eventKey": {
      "description": "/** Key value of key that started the edit, eg 'Enter' or 'F2' - non-printable\n     *  characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "charPress": {
      "description": "/** The string that started the edit, eg 'a' if letter 'a' was pressed, or 'A' if\n     *  shift + letter 'a' only printable characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "column": {
      "description": "/** Grid column */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** Column definition */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "node": {
      "description": "/** Row node for the cell */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "data": {
      "description": "/** Row data */",
      "type": { "returnType": "TData", "optional": false }
    },
    "rowIndex": {
      "description": "/** Editing row index */",
      "type": { "returnType": "number", "optional": false }
    },
    "cellStartedEdit": {
      "description": "/** If doing full row edit, this is true if the cell is the one that started the edit\n     *  (eg it is the cell the use double clicked on, or pressed a key on etc). */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "onKeyDown": {
      "description": "/** callback to tell grid a key was pressed - useful to pass control key events (tab,\n     *  arrows etc) back to grid - however you do */",
      "type": {
        "arguments": { "event": "KeyboardEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "stopEditing": {
      "description": "/** Callback to tell grid to stop editing the current cell. Call with input parameter\n     * true to prevent focus from moving to the next cell after editing stops in case the\n     * grid property `enterMovesDownAfterEdit=true` */",
      "type": {
        "arguments": { "suppressNavigateAfterEdit?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "eGridCell": {
      "description": "/** A reference to the DOM element representing the grid cell that your component\n     *  will live inside. Useful if you want to add event listeners or classes at this level.\n     *  This is the DOM element that gets browser focus when selecting cells. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "parseValue": {
      "description": "/** Utility function to parse a value using the column's `colDef.valueParser` */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    },
    "formatValue": {
      "description": "/** Utility function to format a value using the column's `colDef.valueFormatter` */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any", "TValue = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ITextCellEditorParams": {
    "useFormatter": {
      "description": "/** If `true`, the editor will use the provided `colDef.valueFormatter` to format the value displayed in the editor. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "maxLength": {
      "description": "/** Max number of characters to allow. Default: `524288` */",
      "type": { "returnType": "number", "optional": true }
    },
    "value": {
      "description": "/** Current value of the cell */",
      "type": { "returnType": "TValue", "optional": false }
    },
    "eventKey": {
      "description": "/** Key value of key that started the edit, eg 'Enter' or 'F2' - non-printable\n     *  characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "charPress": {
      "description": "/** The string that started the edit, eg 'a' if letter 'a' was pressed, or 'A' if\n     *  shift + letter 'a' only printable characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "column": {
      "description": "/** Grid column */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** Column definition */",
      "type": { "returnType": "ColDef<TData>", "optional": false }
    },
    "node": {
      "description": "/** Row node for the cell */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "data": {
      "description": "/** Row data */",
      "type": { "returnType": "TData", "optional": false }
    },
    "rowIndex": {
      "description": "/** Editing row index */",
      "type": { "returnType": "number", "optional": false }
    },
    "cellStartedEdit": {
      "description": "/** If doing full row edit, this is true if the cell is the one that started the edit\n     *  (eg it is the cell the use double clicked on, or pressed a key on etc). */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "onKeyDown": {
      "description": "/** callback to tell grid a key was pressed - useful to pass control key events (tab,\n     *  arrows etc) back to grid - however you do */",
      "type": {
        "arguments": { "event": "KeyboardEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "stopEditing": {
      "description": "/** Callback to tell grid to stop editing the current cell. Call with input parameter\n     * true to prevent focus from moving to the next cell after editing stops in case the\n     * grid property `enterMovesDownAfterEdit=true` */",
      "type": {
        "arguments": { "suppressNavigateAfterEdit?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "eGridCell": {
      "description": "/** A reference to the DOM element representing the grid cell that your component\n     *  will live inside. Useful if you want to add event listeners or classes at this level.\n     *  This is the DOM element that gets browser focus when selecting cells. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "parseValue": {
      "description": "/** Utility function to parse a value using the column's `colDef.valueParser` */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    },
    "formatValue": {
      "description": "/** Utility function to format a value using the column's `colDef.valueFormatter` */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any", "TValue = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "IGroupCellRenderer": {
    "setInnerRenderer": {
      "type": {
        "arguments": {
          "compDetails": "UserCompDetails | undefined",
          "valueToDisplay": "any"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "setChildCount": {
      "type": {
        "arguments": { "count": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setCheckboxVisible": {
      "type": {
        "arguments": { "value": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setExpandedDisplayed": {
      "type": {
        "arguments": { "value": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setContractedDisplayed": {
      "type": {
        "arguments": { "value": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "FooterValueGetterFunc": {},
  "GroupCheckboxSelectionCallbackParams": {
    "meta": { "typeParams": ["TData = any", "TValue = any"] }
  },
  "GroupCheckboxSelectionCallback": {
    "meta": { "typeParams": ["TData = any", "TValue = any"] }
  },
  "IGroupCellRendererParams": {
    "suppressPadding": {
      "description": "/** Set to `true` to not include any padding (indentation) in the child rows. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressDoubleClickExpand": {
      "description": "/** Set to `true` to suppress expand on double click. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressEnterExpand": {
      "description": "/** Set to `true` to suppress expand on <kbd>Enter</kbd> */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "footerValueGetter": {
      "description": "/** The value getter for the footer text. Can be a function or expression. */",
      "type": {
        "returnType": "string | FooterValueGetterFunc",
        "optional": true
      }
    },
    "suppressCount": {
      "description": "/** If `true`, count is not displayed beside the name. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "checkbox": {
      "description": "/** \n     * Set to `true`, or a function that returns `true`, if a checkbox should be included.\n     */",
      "type": {
        "returnType": "boolean | GroupCheckboxSelectionCallback<TData, TValue>",
        "optional": true
      }
    },
    "innerRenderer": {
      "description": "/** The renderer to use for inside the cell (after grouping functions are added) */",
      "type": { "returnType": "any", "optional": true }
    },
    "innerRendererFramework": {
      "description": "/** @deprecated as of v27, use innerRenderer for Framework components\n     * Same as `innerRenderer` but for a framework component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "innerRendererParams": {
      "description": "/** Additional params to customise to the `innerRenderer`. */",
      "type": { "returnType": "any", "optional": true }
    },
    "innerRendererSelector": {
      "description": "/** Callback to enable different innerRenderers to be used based of value of params. */",
      "type": { "returnType": "CellRendererSelectorFunc", "optional": true }
    },
    "meta": { "typeParams": ["TData = any", "TValue = any"] }
  },
  "IGroupCellRendererFullRowParams": {
    "pinned": {
      "description": "/** Only when in fullWidth, this gives whether the comp is pinned or not.\n     * If not doing fullWidth, then this is not provided, as pinned can be got from the column.\n     */",
      "type": { "returnType": "\"left\" | \"right\" | null", "optional": true }
    },
    "fullWidth": {
      "description": "/** 'true' if comp is showing full width. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "rowDrag": { "type": { "returnType": "boolean", "optional": true } }
  },
  "GroupCellRendererParams": {
    "meta": { "typeParams": ["TData = any", "TValue = any"] }
  },
  "ICellRendererParams": {
    "value": {
      "description": "/** Value to be rendered. */",
      "type": { "returnType": "TValue", "optional": false }
    },
    "valueFormatted": {
      "description": "/** Formatted value to be rendered. */",
      "type": { "returnType": "string | null | undefined", "optional": false }
    },
    "fullWidth": {
      "description": "/** True if this is a full width row. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pinned": {
      "description": "/** Pinned state of the cell. */",
      "type": { "returnType": "\"left\" | \"right\" | null", "optional": true }
    },
    "data": {
      "description": "/** The row's data. Data property can be `undefined` when row grouping or loading infinite row models. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The current index of the row (this changes after filter and sort). */",
      "type": { "returnType": "number", "optional": false }
    },
    "colDef": {
      "description": "/** The cell's column definition. */",
      "type": { "returnType": "ColDef", "optional": true }
    },
    "column": {
      "description": "/** The cell's column. */",
      "type": { "returnType": "Column", "optional": true }
    },
    "eGridCell": {
      "description": "/** The grid's cell, a DOM div element. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "eParentOfValue": {
      "description": "/** The parent DOM item for the cell renderer, same as eGridCell unless using checkbox selection. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "getValue": {
      "description": "/** Convenience function to get most recent up to date value. */",
      "type": { "arguments": {}, "returnType": "any", "optional": true }
    },
    "setValue": {
      "description": "/** Convenience function to set the value. */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "void",
        "optional": true
      }
    },
    "formatValue": {
      "description": "/** Convenience function to format a value using the column's formatter. */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": true
      }
    },
    "refreshCell": {
      "description": "/** Convenience function to refresh the cell. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "registerRowDragger": {
      "description": "/** registerRowDragger:\n     * @param rowDraggerElement The HTMLElement to be used as Row Dragger\n     * @param dragStartPixels The amount of pixels required to start the drag (Default: 4)\n     * @param value The value to be displayed while dragging. Note: Only relevant with Full Width Rows.\n     * @param suppressVisibilityChange Set to `true` to prevent the Grid from hiding the Row Dragger when it is disabled.\n     */",
      "type": {
        "arguments": {
          "rowDraggerElement": "HTMLElement",
          "dragStartPixels?": "number",
          "value?": "string",
          "suppressVisibilityChange?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any", "TValue = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ISetFilterCellRendererParams": {
    "value": { "type": { "returnType": "any", "optional": false } },
    "valueFormatted": {
      "type": { "returnType": "string | null | undefined", "optional": false }
    },
    "colDef": {
      "description": "/** The cell's column definition. */",
      "type": { "returnType": "ColDef", "optional": true }
    },
    "column": {
      "description": "/** The cell's column. */",
      "type": { "returnType": "Column", "optional": true }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ICellRenderer": {
    "refresh": {
      "description": "/** Get the cell to refresh. Return true if successful. Return false if not (or you don't have refresh logic),\n     * then the grid will refresh the cell for you.\n     */",
      "type": {
        "arguments": { "params": "ICellRendererParams<TData>" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any"] }
  },
  "ICellRendererComp": {
    "meta": { "typeParams": ["TData = any"] },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. */",
      "type": {
        "arguments": { "params": "ICellRendererParams<TData>" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    },
    "refresh": {
      "description": "/** Get the cell to refresh. Return true if successful. Return false if not (or you don't have refresh logic),\n     * then the grid will refresh the cell for you.\n     */",
      "type": {
        "arguments": { "params": "ICellRendererParams<TData>" },
        "returnType": "boolean",
        "optional": false
      }
    }
  },
  "ICellRendererFunc": { "meta": { "typeParams": ["TData = any"] } },
  "ILoadingCellRendererParams": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "value": {
      "description": "/** Value to be rendered. */",
      "type": { "returnType": "TValue", "optional": false }
    },
    "valueFormatted": {
      "description": "/** Formatted value to be rendered. */",
      "type": { "returnType": "string | null | undefined", "optional": false }
    },
    "fullWidth": {
      "description": "/** True if this is a full width row. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pinned": {
      "description": "/** Pinned state of the cell. */",
      "type": { "returnType": "\"left\" | \"right\" | null", "optional": true }
    },
    "data": {
      "description": "/** The row's data. Data property can be `undefined` when row grouping or loading infinite row models. */",
      "type": { "returnType": "TData | undefined", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": false }
    },
    "rowIndex": {
      "description": "/** The current index of the row (this changes after filter and sort). */",
      "type": { "returnType": "number", "optional": false }
    },
    "colDef": {
      "description": "/** The cell's column definition. */",
      "type": { "returnType": "ColDef", "optional": true }
    },
    "column": {
      "description": "/** The cell's column. */",
      "type": { "returnType": "Column", "optional": true }
    },
    "eGridCell": {
      "description": "/** The grid's cell, a DOM div element. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "eParentOfValue": {
      "description": "/** The parent DOM item for the cell renderer, same as eGridCell unless using checkbox selection. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "getValue": {
      "description": "/** Convenience function to get most recent up to date value. */",
      "type": { "arguments": {}, "returnType": "any", "optional": true }
    },
    "setValue": {
      "description": "/** Convenience function to set the value. */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "void",
        "optional": true
      }
    },
    "formatValue": {
      "description": "/** Convenience function to format a value using the column's formatter. */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": true
      }
    },
    "refreshCell": {
      "description": "/** Convenience function to refresh the cell. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "registerRowDragger": {
      "description": "/** registerRowDragger:\n     * @param rowDraggerElement The HTMLElement to be used as Row Dragger\n     * @param dragStartPixels The amount of pixels required to start the drag (Default: 4)\n     * @param value The value to be displayed while dragging. Note: Only relevant with Full Width Rows.\n     * @param suppressVisibilityChange Set to `true` to prevent the Grid from hiding the Row Dragger when it is disabled.\n     */",
      "type": {
        "arguments": {
          "rowDraggerElement": "HTMLElement",
          "dragStartPixels?": "number",
          "value?": "string",
          "suppressVisibilityChange?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ILoadingCellRenderer": {},
  "ILoadingCellRendererComp": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. */",
      "type": {
        "arguments": { "params": "ILoadingCellRendererParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "IDate": {
    "getDate": {
      "description": "/** Returns the current date represented by this component */",
      "type": {
        "arguments": {},
        "returnType": "Date | null",
        "optional": false
      }
    },
    "setDate": {
      "description": "/** Sets the date represented by this component */",
      "type": {
        "arguments": { "date": "Date | null" },
        "returnType": "void",
        "optional": false
      }
    },
    "setDisabled": {
      "description": "/** Optional: Sets the disabled state of this component */",
      "type": {
        "arguments": { "disabled": "boolean" },
        "returnType": "void",
        "optional": true
      }
    },
    "setInputPlaceholder": {
      "description": "/** Optional: Sets the current input placeholder */",
      "type": {
        "arguments": { "placeholder": "string" },
        "returnType": "void",
        "optional": true
      }
    },
    "setInputAriaLabel": {
      "description": "/** Optional: Sets the current input aria label */",
      "type": {
        "arguments": { "placeholder": "string" },
        "returnType": "void",
        "optional": true
      }
    },
    "afterGuiAttached": {
      "description": "/** Optional: A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    }
  },
  "IDateParams": {
    "onDateChanged": {
      "description": "/** Method for component to tell AG Grid that the date has changed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "filterParams": {
      "type": { "returnType": "DateFilterParams", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "IDateComp": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. */",
      "type": {
        "arguments": { "params": "IDateParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    },
    "getDate": {
      "description": "/** Returns the current date represented by this component */",
      "type": {
        "arguments": {},
        "returnType": "Date | null",
        "optional": false
      }
    },
    "setDate": {
      "description": "/** Sets the date represented by this component */",
      "type": {
        "arguments": { "date": "Date | null" },
        "returnType": "void",
        "optional": false
      }
    },
    "setDisabled": {
      "description": "/** Optional: Sets the disabled state of this component */",
      "type": {
        "arguments": { "disabled": "boolean" },
        "returnType": "void",
        "optional": true
      }
    },
    "setInputPlaceholder": {
      "description": "/** Optional: Sets the current input placeholder */",
      "type": {
        "arguments": { "placeholder": "string" },
        "returnType": "void",
        "optional": true
      }
    },
    "setInputAriaLabel": {
      "description": "/** Optional: Sets the current input aria label */",
      "type": {
        "arguments": { "placeholder": "string" },
        "returnType": "void",
        "optional": true
      }
    },
    "afterGuiAttached": {
      "description": "/** Optional: A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    }
  },
  "PositionableOptions": {
    "popup": { "type": { "returnType": "boolean", "optional": true } },
    "minWidth": { "type": { "returnType": "number | null", "optional": true } },
    "width": {
      "type": { "returnType": "number | string | null", "optional": true }
    },
    "minHeight": {
      "type": { "returnType": "number | null", "optional": true }
    },
    "height": {
      "type": { "returnType": "number | string | null", "optional": true }
    },
    "centered": {
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "calculateTopBuffer": {
      "type": { "arguments": {}, "returnType": "number", "optional": true }
    },
    "forcePopupParentAsOffsetParent": {
      "description": "/** Used for when a popup needs to be resized by an element within itself\n     * In that case, the feature will configured as `popup=false` but the offsetParent\n     * needs to be the popupParent.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "x": { "type": { "returnType": "number | null", "optional": true } },
    "y": { "type": { "returnType": "number | null", "optional": true } }
  },
  "ResizableSides": {},
  "ResizableStructure": {},
  "MappedResizer": {
    "element": { "type": { "returnType": "HTMLElement", "optional": false } },
    "dragSource": {
      "type": { "returnType": "DragListenerParams", "optional": true }
    }
  },
  "ILoadingOverlayParams": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ILoadingOverlayComp": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. */",
      "type": {
        "arguments": { "params": "ILoadingOverlayParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "INoRowsOverlayParams": {
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "INoRowsOverlayComp": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. */",
      "type": {
        "arguments": { "params": "INoRowsOverlayParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "LoadingType": {},
  "RowCssClassCalculatorParams": {
    "rowNode": { "type": { "returnType": "RowNode", "optional": false } },
    "rowIsEven": { "type": { "returnType": "boolean", "optional": false } },
    "rowLevel": { "type": { "returnType": "number", "optional": false } },
    "fullWidthRow": { "type": { "returnType": "boolean", "optional": true } },
    "firstRowOnPage": {
      "type": { "returnType": "boolean", "optional": false }
    },
    "lastRowOnPage": { "type": { "returnType": "boolean", "optional": false } },
    "printLayout": { "type": { "returnType": "boolean", "optional": false } },
    "expandable": { "type": { "returnType": "boolean", "optional": false } },
    "pinned": {
      "type": { "returnType": "ColumnPinnedType", "optional": false }
    },
    "extraCssClass": { "type": { "returnType": "string", "optional": true } },
    "rowFocused": { "type": { "returnType": "boolean", "optional": true } },
    "fadeRowIn": { "type": { "returnType": "boolean", "optional": true } }
  },
  "RowType": {},
  "IRowComp": {
    "setDomOrder": {
      "type": {
        "arguments": { "domOrder": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setCellCtrls": {
      "type": {
        "arguments": { "cellCtrls": "CellCtrl[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "showFullWidth": {
      "type": {
        "arguments": { "compDetails": "UserCompDetails" },
        "returnType": "void",
        "optional": false
      }
    },
    "getFullWidthCellRenderer": {
      "type": {
        "arguments": {},
        "returnType": "ICellRenderer | null | undefined",
        "optional": false
      }
    },
    "setTop": {
      "type": {
        "arguments": { "top": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setTransform": {
      "type": {
        "arguments": { "transform": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRowIndex": {
      "type": {
        "arguments": { "rowIndex": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRowId": {
      "type": {
        "arguments": { "rowId": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRowBusinessKey": {
      "type": {
        "arguments": { "businessKey": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setTabIndex": {
      "type": {
        "arguments": { "tabIndex": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "setUserStyles": {
      "type": {
        "arguments": { "styles": "RowStyle" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRole": {
      "type": {
        "arguments": { "role": "string" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "RowGui": {
    "rowComp": { "type": { "returnType": "IRowComp", "optional": false } },
    "element": { "type": { "returnType": "HTMLElement", "optional": false } },
    "containerType": {
      "type": { "returnType": "RowContainerType", "optional": false }
    }
  },
  "CellCtrlListAndMap": {
    "list": { "type": { "returnType": "CellCtrl[]", "optional": false } },
    "map": {
      "type": { "returnType": "{ [key: string]: CellCtrl }", "optional": false }
    }
  },
  "IRowDragItem": {
    "defaultTextValue": {
      "description": "/** The default text that would be applied to this Drag Element */",
      "type": { "returnType": "string", "optional": false }
    },
    "rowNode": {
      "description": "/** When dragging a row, this contains the row node being dragged\n     * When dragging multiple rows, this contains the row that started the drag.\n     */",
      "type": { "returnType": "IRowNode", "optional": true }
    },
    "rowNodes": {
      "description": "/** When dragging multiple rows, this contains all rows being dragged */",
      "type": { "returnType": "IRowNode[]", "optional": true }
    },
    "columns": {
      "description": "/** When dragging columns, this contains the columns being dragged */",
      "type": { "returnType": "Column[]", "optional": true }
    },
    "visibleState": {
      "description": "/** When dragging columns, this contains the visible state of the columns */",
      "type": { "returnType": "{ [key: string]: boolean }", "optional": true }
    }
  },
  "RowCtrlMap": {},
  "RowNodeMap": {},
  "GetCellsParams": {
    "rowNodes": {
      "description": "/** Optional list of row nodes to restrict operation to */",
      "type": { "returnType": "IRowNode<TData>[]", "optional": true }
    },
    "columns": {
      "description": "/** Optional list of columns to restrict operation to */",
      "type": { "returnType": "(string | Column)[]", "optional": true }
    },
    "meta": { "typeParams": ["TData = any"] }
  },
  "RefreshCellsParams": {
    "force": {
      "description": "/** Skip change detection, refresh everything. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressFlash": {
      "description": "/** Skip cell flashing, if cell flashing is enabled. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "meta": { "typeParams": ["TData = any"] },
    "rowNodes": {
      "description": "/** Optional list of row nodes to restrict operation to */",
      "type": { "returnType": "IRowNode<TData>[]", "optional": true }
    },
    "columns": {
      "description": "/** Optional list of columns to restrict operation to */",
      "type": { "returnType": "(string | Column)[]", "optional": true }
    }
  },
  "FlashCellsParams": {
    "flashDelay": { "type": { "returnType": "number", "optional": true } },
    "fadeDelay": { "type": { "returnType": "number", "optional": true } },
    "meta": { "typeParams": ["TData = any"] },
    "rowNodes": {
      "description": "/** Optional list of row nodes to restrict operation to */",
      "type": { "returnType": "IRowNode<TData>[]", "optional": true }
    },
    "columns": {
      "description": "/** Optional list of columns to restrict operation to */",
      "type": { "returnType": "(string | Column)[]", "optional": true }
    }
  },
  "GetCellRendererInstancesParams": {
    "meta": { "typeParams": ["TData = any"] },
    "rowNodes": {
      "description": "/** Optional list of row nodes to restrict operation to */",
      "type": { "returnType": "IRowNode<TData>[]", "optional": true }
    },
    "columns": {
      "description": "/** Optional list of columns to restrict operation to */",
      "type": { "returnType": "(string | Column)[]", "optional": true }
    }
  },
  "GetCellEditorInstancesParams": {
    "meta": { "typeParams": ["TData = any"] },
    "rowNodes": {
      "description": "/** Optional list of row nodes to restrict operation to */",
      "type": { "returnType": "IRowNode<TData>[]", "optional": true }
    },
    "columns": {
      "description": "/** Optional list of columns to restrict operation to */",
      "type": { "returnType": "(string | Column)[]", "optional": true }
    }
  },
  "RedrawRowsParams": {
    "rowNodes": {
      "description": "/** Row nodes to redraw */",
      "type": { "returnType": "IRowNode<TData>[]", "optional": true }
    },
    "meta": { "typeParams": ["TData = any"] }
  },
  "RefreshViewParams": {
    "recycleRows": { "type": { "returnType": "boolean", "optional": true } },
    "animate": { "type": { "returnType": "boolean", "optional": true } },
    "suppressKeepFocus": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "onlyBody": { "type": { "returnType": "boolean", "optional": true } },
    "newData": { "type": { "returnType": "boolean", "optional": true } },
    "newPage": { "type": { "returnType": "boolean", "optional": true } },
    "domLayoutChanged": {
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "ITooltipParams": {
    "location": {
      "description": "/** What part of the application is showing the tooltip, e.g. 'cell', 'header', 'menuItem' etc */",
      "type": { "returnType": "string", "optional": false }
    },
    "value": {
      "description": "/** The value to be rendered by the tooltip. */",
      "type": { "returnType": "TValue", "optional": true }
    },
    "valueFormatted": {
      "description": "/** The formatted value to be rendered by the tooltip. */",
      "type": { "returnType": "string | null", "optional": true }
    },
    "colDef": {
      "description": "/** Column / ColumnGroup definition. */",
      "type": {
        "returnType": "ColDef<TData> | ColGroupDef<TData> | null",
        "optional": true
      }
    },
    "column": {
      "description": "/** Column / ColumnGroup */",
      "type": { "returnType": "Column | ColumnGroup", "optional": true }
    },
    "rowIndex": {
      "description": "/** The index of the row containing the cell rendering the tooltip. */",
      "type": { "returnType": "number", "optional": true }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "IRowNode<TData>", "optional": true }
    },
    "data": {
      "description": "/** Data for the row node in question. */",
      "type": { "returnType": "TData", "optional": true }
    },
    "meta": { "typeParams": ["TData = any", "TValue = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "ITooltipComp": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. */",
      "type": {
        "arguments": { "params": "ITooltipParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "LoadCompleteEvent": {
    "success": { "type": { "returnType": "boolean", "optional": false } },
    "block": { "type": { "returnType": "RowNodeBlock", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "LoadSuccessParams": {
    "rowData": {
      "description": "/** Data retrieved from the server as requested by the grid.\n     */",
      "type": { "returnType": "any[]", "optional": false }
    },
    "rowCount": {
      "description": "/** The last row, if known, to help Infinite Scroll.\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "storeInfo": {
      "description": "/** @deprecated use groupLevelInfo instead\n     */",
      "type": { "returnType": "any", "optional": true }
    },
    "groupLevelInfo": {
      "description": "/** Any extra information for the grid to associate with this load.\n     */",
      "type": { "returnType": "any", "optional": true }
    }
  },
  "SortOption": {
    "sort": { "type": { "returnType": "'asc' | 'desc'", "optional": false } },
    "column": { "type": { "returnType": "Column", "optional": false } }
  },
  "SortedRowNode": {
    "currentPos": { "type": { "returnType": "number", "optional": false } },
    "rowNode": { "type": { "returnType": "RowNode", "optional": false } }
  },
  "SortModelItem": {
    "colId": {
      "description": "/** Column Id to apply the sort to. */",
      "type": { "returnType": "string", "optional": false }
    },
    "sort": {
      "description": "/** Sort direction */",
      "type": { "returnType": "'asc' | 'desc'", "optional": false }
    }
  },
  "LayoutView": {
    "updateLayoutClasses": {
      "type": {
        "arguments": {
          "layoutClass": "string",
          "params": "UpdateLayoutClassesParams"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "LayoutCssClasses": {},
  "UpdateLayoutClassesParams": {
    "autoHeight": { "type": { "returnType": "boolean", "optional": false } },
    "normal": { "type": { "returnType": "boolean", "optional": false } },
    "print": { "type": { "returnType": "boolean", "optional": false } }
  },
  "GenericFunction": {},
  "PickByTypeKeyFilter": { "meta": { "typeParams": ["T", "C"] } },
  "KeysByType": { "meta": { "typeParams": ["T", "C"] } },
  "ValuesByType": { "meta": { "typeParams": ["T", "C"] } },
  "PickByType": { "meta": { "typeParams": ["T", "C"] } },
  "MethodsOf": { "meta": { "typeParams": ["T"] } },
  "InterfaceOf": { "meta": { "typeParams": ["T"] } },
  "PartiallyMockedInterfaceOf": { "meta": { "typeParams": ["T"] } },
  "CellValueChange": {
    "rowPinned": {
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "rowIndex": { "type": { "returnType": "number", "optional": false } },
    "columnId": { "type": { "returnType": "string", "optional": false } },
    "oldValue": { "type": { "returnType": "any", "optional": false } },
    "newValue": { "type": { "returnType": "any", "optional": false } }
  },
  "LastFocusedCell": {
    "rowPinned": {
      "type": { "returnType": "RowPinnedType", "optional": false }
    },
    "rowIndex": { "type": { "returnType": "number", "optional": false } },
    "columnId": { "type": { "returnType": "string", "optional": false } }
  },
  "ColumnSortState": {},
  "PathItem": {
    "rowNode": { "type": { "returnType": "RowNode", "optional": false } },
    "children": {
      "type": { "returnType": "PathItem[] | null", "optional": false }
    }
  },
  "ResolveAndRejectCallback": { "meta": { "typeParams": ["T"] } },
  "AgPromiseStatus": {},
  "FieldElement": {},
  "IInputField": {
    "value": { "type": { "returnType": "any", "optional": true } },
    "width": { "type": { "returnType": "number", "optional": true } },
    "label": {
      "type": { "returnType": "HTMLElement | string", "optional": true }
    },
    "labelWidth": {
      "type": { "returnType": "number | 'flex'", "optional": true }
    },
    "labelSeparator": { "type": { "returnType": "string", "optional": true } },
    "labelAlignment": {
      "type": { "returnType": "LabelAlignment", "optional": true }
    }
  },
  "LabelAlignment": {},
  "IAgLabel": {
    "label": {
      "type": { "returnType": "HTMLElement | string", "optional": true }
    },
    "labelWidth": {
      "type": { "returnType": "number | 'flex'", "optional": true }
    },
    "labelSeparator": { "type": { "returnType": "string", "optional": true } },
    "labelAlignment": {
      "type": { "returnType": "LabelAlignment", "optional": true }
    }
  },
  "DialogOptions": {
    "eWrapper": { "type": { "returnType": "HTMLElement", "optional": true } },
    "modal": { "type": { "returnType": "boolean", "optional": true } },
    "movable": { "type": { "returnType": "boolean", "optional": true } },
    "alwaysOnTop": { "type": { "returnType": "boolean", "optional": true } },
    "maximizable": { "type": { "returnType": "boolean", "optional": true } },
    "component": { "type": { "returnType": "Component", "optional": true } },
    "hideTitleBar": {
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "closable": {
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "resizable": {
      "type": { "returnType": "boolean | ResizableStructure", "optional": true }
    },
    "title": { "type": { "returnType": "string | null", "optional": true } },
    "cssIdentifier": {
      "type": { "returnType": "string | null", "optional": true }
    },
    "popup": { "type": { "returnType": "boolean", "optional": true } },
    "minWidth": { "type": { "returnType": "number | null", "optional": true } },
    "width": {
      "type": { "returnType": "number | string | null", "optional": true }
    },
    "minHeight": {
      "type": { "returnType": "number | null", "optional": true }
    },
    "height": {
      "type": { "returnType": "number | string | null", "optional": true }
    },
    "centered": {
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "calculateTopBuffer": {
      "type": { "arguments": {}, "returnType": "number", "optional": true }
    },
    "forcePopupParentAsOffsetParent": {
      "description": "/** Used for when a popup needs to be resized by an element within itself\n     * In that case, the feature will configured as `popup=false` but the offsetParent\n     * needs to be the popupParent.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "x": { "type": { "returnType": "number | null", "optional": true } },
    "y": { "type": { "returnType": "number | null", "optional": true } }
  },
  "GroupItem": {},
  "Align": {},
  "Direction": {},
  "AgGroupComponentParams": {
    "title": { "type": { "returnType": "string", "optional": true } },
    "enabled": { "type": { "returnType": "boolean", "optional": true } },
    "suppressEnabledCheckbox": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressOpenCloseIcons": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "cssIdentifier": { "type": { "returnType": "string", "optional": true } },
    "items": { "type": { "returnType": "GroupItem[]", "optional": true } },
    "alignItems": { "type": { "returnType": "Align", "optional": true } },
    "direction": { "type": { "returnType": "Direction", "optional": true } }
  },
  "IInputRange": {
    "min": { "type": { "returnType": "number", "optional": true } },
    "max": { "type": { "returnType": "number", "optional": true } },
    "step": { "type": { "returnType": "number", "optional": true } },
    "value": { "type": { "returnType": "any", "optional": true } },
    "width": { "type": { "returnType": "number", "optional": true } },
    "label": {
      "type": { "returnType": "HTMLElement | string", "optional": true }
    },
    "labelWidth": {
      "type": { "returnType": "number | 'flex'", "optional": true }
    },
    "labelSeparator": { "type": { "returnType": "string", "optional": true } },
    "labelAlignment": {
      "type": { "returnType": "LabelAlignment", "optional": true }
    }
  },
  "ITextInputField": {
    "allowedCharPattern": {
      "type": { "returnType": "string", "optional": true }
    },
    "value": { "type": { "returnType": "any", "optional": true } },
    "width": { "type": { "returnType": "number", "optional": true } },
    "label": {
      "type": { "returnType": "HTMLElement | string", "optional": true }
    },
    "labelWidth": {
      "type": { "returnType": "number | 'flex'", "optional": true }
    },
    "labelSeparator": { "type": { "returnType": "string", "optional": true } },
    "labelAlignment": {
      "type": { "returnType": "LabelAlignment", "optional": true }
    }
  },
  "ListOption": {
    "value": { "type": { "returnType": "string", "optional": false } },
    "text": { "type": { "returnType": "string", "optional": true } }
  },
  "MenuItemComponentParams": {
    "isCompact": { "type": { "returnType": "boolean", "optional": true } },
    "isAnotherSubMenuOpen": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "subMenu": {
      "type": {
        "returnType": "(MenuItemDef | string)[] | IComponent<any>",
        "optional": true
      }
    },
    "name": {
      "description": "/** Name of the menu item */",
      "type": { "returnType": "string", "optional": false }
    },
    "disabled": {
      "description": "/** It the item should be enabled / disabled */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "shortcut": {
      "description": "/** Shortcut (just display text, saying the shortcut here does nothing) */",
      "type": { "returnType": "string", "optional": true }
    },
    "action": {
      "description": "/** Function that gets executed when item is chosen */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "checked": {
      "description": "/** Set to true to provide a check beside the option */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "icon": {
      "description": "/** The icon to display, either a DOM element or HTML string */",
      "type": { "returnType": "Element | string", "optional": true }
    },
    "cssClasses": {
      "description": "/** CSS classes to apply to the menu item */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "tooltip": {
      "description": "/** Tooltip for the menu item */",
      "type": { "returnType": "string", "optional": true }
    }
  },
  "MenuItemSelectedEvent": {
    "name": { "type": { "returnType": "string", "optional": false } },
    "disabled": { "type": { "returnType": "boolean", "optional": true } },
    "shortcut": { "type": { "returnType": "string", "optional": true } },
    "action": {
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "checked": { "type": { "returnType": "boolean", "optional": true } },
    "icon": { "type": { "returnType": "Element | string", "optional": true } },
    "subMenu": {
      "type": {
        "returnType": "(MenuItemDef | string)[] | IPopupComponent<any>",
        "optional": true
      }
    },
    "cssClasses": { "type": { "returnType": "string[]", "optional": true } },
    "tooltip": { "type": { "returnType": "string", "optional": true } },
    "event": {
      "type": { "returnType": "MouseEvent | KeyboardEvent", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "MenuItemActivatedEvent": {
    "menuItem": {
      "type": { "returnType": "AgMenuItemComponent", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "PanelOptions": {
    "component": { "type": { "returnType": "Component", "optional": true } },
    "hideTitleBar": {
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "closable": {
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "resizable": {
      "type": { "returnType": "boolean | ResizableStructure", "optional": true }
    },
    "title": { "type": { "returnType": "string | null", "optional": true } },
    "cssIdentifier": {
      "type": { "returnType": "string | null", "optional": true }
    },
    "popup": { "type": { "returnType": "boolean", "optional": true } },
    "minWidth": { "type": { "returnType": "number | null", "optional": true } },
    "width": {
      "type": { "returnType": "number | string | null", "optional": true }
    },
    "minHeight": {
      "type": { "returnType": "number | null", "optional": true }
    },
    "height": {
      "type": { "returnType": "number | string | null", "optional": true }
    },
    "centered": {
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "calculateTopBuffer": {
      "type": { "arguments": {}, "returnType": "number", "optional": true }
    },
    "forcePopupParentAsOffsetParent": {
      "description": "/** Used for when a popup needs to be resized by an element within itself\n     * In that case, the feature will configured as `popup=false` but the offsetParent\n     * needs to be the popupParent.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "x": { "type": { "returnType": "number | null", "optional": true } },
    "y": { "type": { "returnType": "number | null", "optional": true } }
  },
  "VisibleChangedEvent": {
    "visible": { "type": { "returnType": "boolean", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "TooltipParentComp": {
    "getTooltipParams": {
      "type": {
        "arguments": {},
        "returnType": "WithoutGridCommon<ITooltipParams>",
        "optional": false
      }
    },
    "getGui": {
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    }
  },
  "TooltipStates": {},
  "ManagedFocusCallbacks": {
    "shouldStopEventPropagation": {
      "type": {
        "arguments": { "e": "KeyboardEvent" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "onTabKeyDown": {
      "type": {
        "arguments": { "e": "KeyboardEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "handleKeyDown": {
      "type": {
        "arguments": { "e": "KeyboardEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onFocusIn": {
      "type": {
        "arguments": { "e": "FocusEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onFocusOut": {
      "type": {
        "arguments": { "e": "FocusEvent" },
        "returnType": "void",
        "optional": true
      }
    }
  },
  "PopupPositionParams": {
    "ePopup": { "type": { "returnType": "HTMLElement", "optional": false } },
    "column": { "type": { "returnType": "Column | null", "optional": true } },
    "rowNode": {
      "type": { "returnType": "IRowNode | null", "optional": true }
    },
    "nudgeX": { "type": { "returnType": "number", "optional": true } },
    "nudgeY": { "type": { "returnType": "number", "optional": true } },
    "position": {
      "type": { "returnType": "'over' | 'under'", "optional": true }
    },
    "alignSide": {
      "type": { "returnType": "'left' | 'right'", "optional": true }
    },
    "keepWithinBounds": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipObserver": { "type": { "returnType": "boolean", "optional": true } },
    "updatePosition": {
      "type": {
        "arguments": {},
        "returnType": "{ x: number; y: number; }",
        "optional": true
      }
    },
    "postProcessCallback": {
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "PopupEventParams": {
    "originalMouseEvent": {
      "type": { "returnType": "MouseEvent | Touch | null", "optional": true }
    },
    "mouseEvent": { "type": { "returnType": "MouseEvent", "optional": true } },
    "touchEvent": { "type": { "returnType": "TouchEvent", "optional": true } },
    "keyboardEvent": {
      "type": { "returnType": "KeyboardEvent", "optional": true }
    }
  },
  "AgPopup": {
    "element": { "type": { "returnType": "HTMLElement", "optional": false } },
    "wrapper": { "type": { "returnType": "HTMLElement", "optional": false } },
    "hideFunc": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "isAnchored": { "type": { "returnType": "boolean", "optional": false } },
    "stopAnchoringPromise": {
      "type": { "returnType": "AgPromise<Function>", "optional": false }
    },
    "instanceId": { "type": { "returnType": "number", "optional": false } }
  },
  "Rect": {
    "top": { "type": { "returnType": "number", "optional": false } },
    "left": { "type": { "returnType": "number", "optional": false } },
    "right": { "type": { "returnType": "number", "optional": false } },
    "bottom": { "type": { "returnType": "number", "optional": false } }
  },
  "DIRECTION": {},
  "AddPopupParams": {
    "modal": { "type": { "returnType": "boolean", "optional": true } },
    "eChild": { "type": { "returnType": "HTMLElement", "optional": false } },
    "closeOnEsc": { "type": { "returnType": "boolean", "optional": true } },
    "closedCallback": {
      "type": {
        "arguments": { "e?": "MouseEvent | TouchEvent | KeyboardEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "click": {
      "type": { "returnType": "MouseEvent | Touch | null", "optional": true }
    },
    "alwaysOnTop": { "type": { "returnType": "boolean", "optional": true } },
    "afterGuiAttached": {
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "positionCallback": {
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "anchorToElement": {
      "type": { "returnType": "HTMLElement", "optional": true }
    },
    "ariaLabel": { "type": { "returnType": "string", "optional": false } }
  },
  "AddPopupResult": {
    "hideFunc": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "stopAnchoringPromise": {
      "type": { "returnType": "AgPromise<Function>", "optional": false }
    }
  },
  "TabGuardClassNames": {},
  "ITabGuard": {
    "setTabIndex": {
      "type": {
        "arguments": { "tabIndex?": "string" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ITooltipFeatureCtrl": {
    "getTooltipValue": {
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "getGui": {
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "getLocation": {
      "type": { "arguments": {}, "returnType": "string", "optional": false }
    },
    "getColumn": {
      "type": {
        "arguments": {},
        "returnType": "Column | ColumnGroup",
        "optional": true
      }
    },
    "getColDef": {
      "type": {
        "arguments": {},
        "returnType": "ColDef | ColGroupDef",
        "optional": true
      }
    },
    "getRowIndex": {
      "type": { "arguments": {}, "returnType": "number", "optional": true }
    },
    "getRowNode": {
      "type": { "arguments": {}, "returnType": "RowNode", "optional": true }
    },
    "getValueFormatted": {
      "type": { "arguments": {}, "returnType": "string", "optional": true }
    }
  },
  "ITooltipFeatureComp": {
    "setTitle": {
      "type": {
        "arguments": { "title": "string | undefined" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "TapEvent": {
    "touchStart": { "type": { "returnType": "Touch", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "LongTapEvent": {
    "touchStart": { "type": { "returnType": "Touch", "optional": false } },
    "touchEvent": { "type": { "returnType": "TouchEvent", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "VirtualListModel": {
    "getRowCount": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getRow": {
      "type": {
        "arguments": { "index": "number" },
        "returnType": "any",
        "optional": false
      }
    },
    "isRowSelected": {
      "type": {
        "arguments": { "index": "number" },
        "returnType": "boolean | undefined",
        "optional": true
      }
    },
    "areRowsEqual": {
      "description": "/** Required if using soft refresh. If rows are equal, componentUpdater will be called instead of remove/create */",
      "type": {
        "arguments": { "oldRow": "any", "newRow": "any" },
        "returnType": "boolean",
        "optional": true
      }
    }
  },
  "ISetDisplayValueModel": {
    "updateDisplayedValuesToAllAvailable": {
      "type": {
        "arguments": {
          "getValue": "(key: string | null) => V | null",
          "allKeys": "Iterable<string | null> | undefined",
          "availableKeys": "Set<string | null>",
          "source": "'reload' | 'otherFilter' | 'miniFilter'"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "updateDisplayedValuesToMatchMiniFilter": {
      "type": {
        "arguments": {
          "getValue": "(key: string | null) => V | null",
          "allKeys": "Iterable<string | null> | undefined",
          "availableKeys": "Set<string | null>",
          "matchesFilter": "(valueToCheck: string | null) => boolean",
          "nullMatchesFilter": "boolean",
          "source": "'reload' | 'otherFilter' | 'miniFilter'"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "getDisplayedValueCount": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getDisplayedItem": {
      "type": {
        "arguments": { "index": "number" },
        "returnType": "string | SetFilterModelTreeItem | null",
        "optional": false
      }
    },
    "getSelectAllItem": {
      "type": {
        "arguments": {},
        "returnType": "string | SetFilterModelTreeItem",
        "optional": false
      }
    },
    "getDisplayedKeys": {
      "type": {
        "arguments": {},
        "returnType": "(string | null)[]",
        "optional": false
      }
    },
    "forEachDisplayedKey": {
      "type": {
        "arguments": { "func": "(key: string | null) => void" },
        "returnType": "void",
        "optional": false
      }
    },
    "someDisplayedKey": {
      "type": {
        "arguments": { "func": "(key: string | null) => boolean" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "hasGroups": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "refresh": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "meta": { "typeParams": ["V"] }
  },
  "SetFilterModelTreeItem": {
    "treeKey": { "type": { "returnType": "string | null", "optional": false } },
    "depth": { "type": { "returnType": "number", "optional": false } },
    "filterPasses": { "type": { "returnType": "boolean", "optional": false } },
    "available": { "type": { "returnType": "boolean", "optional": false } },
    "expanded": { "type": { "returnType": "boolean", "optional": true } },
    "children": {
      "type": { "returnType": "SetFilterModelTreeItem[]", "optional": true }
    },
    "key": { "type": { "returnType": "string | null", "optional": true } },
    "parentTreeKeys": {
      "type": { "returnType": "(string | null)[]", "optional": false }
    }
  },
  "ISetFilterLocaleText": {
    "loadingOoo": { "type": { "returnType": "string", "optional": false } },
    "blanks": { "type": { "returnType": "string", "optional": false } },
    "searchOoo": { "type": { "returnType": "string", "optional": false } },
    "selectAll": { "type": { "returnType": "string", "optional": false } },
    "selectAllSearchResults": {
      "type": { "returnType": "string", "optional": false }
    },
    "noMatches": { "type": { "returnType": "string", "optional": false } }
  },
  "SetFilterListItemSelectionChangedEvent": {
    "isSelected": { "type": { "returnType": "boolean", "optional": false } },
    "item": { "type": { "returnType": "I", "optional": false } },
    "meta": {
      "typeParams": [
        "I extends SetFilterModelTreeItem | string | null = SetFilterModelTreeItem | string | null"
      ]
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "SetFilterListItemExpandedChangedEvent": {
    "isExpanded": { "type": { "returnType": "boolean", "optional": false } },
    "item": { "type": { "returnType": "I", "optional": false } },
    "meta": {
      "typeParams": [
        "I extends SetFilterModelTreeItem | string | null = SetFilterModelTreeItem | string | null"
      ]
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "SetFilterListItemParams": {
    "focusWrapper": {
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "value": {
      "type": { "returnType": "V | null | (() => string)", "optional": false }
    },
    "params": {
      "type": { "returnType": "SetFilterParams<any, V>", "optional": false }
    },
    "translate": {
      "type": {
        "arguments": { "key": "keyof ISetFilterLocaleText" },
        "returnType": "string",
        "optional": false
      }
    },
    "valueFormatter": {
      "type": {
        "arguments": { "params": "ValueFormatterParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "item": {
      "type": {
        "returnType": "SetFilterModelTreeItem | string | null",
        "optional": false
      }
    },
    "isSelected": {
      "type": { "returnType": "boolean | undefined", "optional": false }
    },
    "isTree": { "type": { "returnType": "boolean", "optional": true } },
    "depth": { "type": { "returnType": "number", "optional": true } },
    "groupsExist": { "type": { "returnType": "boolean", "optional": true } },
    "isGroup": { "type": { "returnType": "boolean", "optional": true } },
    "isExpanded": { "type": { "returnType": "boolean", "optional": true } },
    "hasIndeterminateExpandState": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "meta": { "typeParams": ["V"] }
  },
  "SetFilterModelValuesType": {},
  "SetValueModelParams": {
    "valueFormatterService": {
      "type": { "returnType": "ValueFormatterService", "optional": false }
    },
    "gridOptionsService": {
      "type": { "returnType": "GridOptionsService", "optional": false }
    },
    "columnModel": {
      "type": { "returnType": "ColumnModel", "optional": false }
    },
    "valueService": {
      "type": { "returnType": "ValueService", "optional": false }
    },
    "filterParams": {
      "type": { "returnType": "SetFilterParams<any, V>", "optional": false }
    },
    "setIsLoading": {
      "type": {
        "arguments": { "loading": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "translate": {
      "type": {
        "arguments": { "key": "keyof ISetFilterLocaleText" },
        "returnType": "string",
        "optional": false
      }
    },
    "caseFormat": {
      "type": {
        "arguments": { "valueToFormat": "T" },
        "returnType": "typeof valueToFormat",
        "optional": false
      }
    },
    "createKey": {
      "type": {
        "arguments": { "value": "V | null", "node?": "RowNode" },
        "returnType": "string | null",
        "optional": false
      }
    },
    "valueFormatter": {
      "type": {
        "arguments": { "params": "ValueFormatterParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "usingComplexObjects": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "treeDataTreeList": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupingTreeList": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "meta": { "typeParams": ["V"] }
  },
  "ToolPanelFiltersCompParams": {
    "suppressExpandAll": {
      "description": "/** To suppress Expand / Collapse All */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressFilterSearch": {
      "description": "/** To suppress the Filter Search */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressSyncLayoutWithGrid": {
      "description": "/** Suppress updating the layout of columns as they are rearranged in the grid */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "meta": { "typeParams": ["TData = any", "TContext = any"] },
    "api": {
      "description": "/** The grid api. */",
      "type": { "returnType": "GridApi<TData>", "optional": false }
    },
    "columnApi": {
      "description": "/** The column api. */",
      "type": { "returnType": "ColumnApi", "optional": false }
    },
    "context": {
      "description": "/** Application context as set on `gridOptions.context`. */",
      "type": { "returnType": "TContext", "optional": false }
    }
  },
  "EXPAND_STATE": {},
  "ToolPanelFilterItem": {},
  "AgFrameworkComponent": {
    "agInit": {
      "description": "/** Mandatory - Params for rendering this component. */",
      "type": {
        "arguments": { "params": "T" },
        "returnType": "void",
        "optional": false
      }
    },
    "meta": { "typeParams": ["T"] }
  },
  "IHeaderGroupAngularComp": {
    "agInit": {
      "description": "/** Mandatory - Params for rendering this component. */",
      "type": {
        "arguments": { "params": "IHeaderGroupParams" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "IHeaderAngularComp": {
    "agInit": {
      "description": "/** Mandatory - Params for rendering this component. */",
      "type": {
        "arguments": { "params": "IHeaderParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "refresh": {
      "description": "/** Get the header to refresh. Gets called whenever Column Defs are updated. */",
      "type": {
        "arguments": { "params": "IHeaderParams" },
        "returnType": "boolean",
        "optional": false
      }
    }
  },
  "IFloatingFilterAngularComp": {
    "meta": { "typeParams": ["P = any"] },
    "agInit": {
      "description": "/** Mandatory - Params for rendering this component. */",
      "type": {
        "arguments": { "params": "IFloatingFilterParams<P>" },
        "returnType": "void",
        "optional": false
      }
    },
    "onParentModelChanged": {
      "description": "/** Gets called every time the parent filter changes.\n     * Your floating filter would typically refresh its UI to reflect the new filter state.\n     * The provided parentModel is what the parent filter returns from its getModel() method.\n     * The event is the FilterChangedEvent that the grid fires.\n     */",
      "type": {
        "arguments": {
          "parentModel": "any",
          "filterChangedEvent?": "FilterChangedEvent | null"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "IDateAngularComp": {
    "agInit": {
      "description": "/** Mandatory - Params for rendering this component. */",
      "type": {
        "arguments": { "params": "IDateParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "getDate": {
      "description": "/** Returns the current date represented by this component */",
      "type": {
        "arguments": {},
        "returnType": "Date | null",
        "optional": false
      }
    },
    "setDate": {
      "description": "/** Sets the date represented by this component */",
      "type": {
        "arguments": { "date": "Date | null" },
        "returnType": "void",
        "optional": false
      }
    },
    "setDisabled": {
      "description": "/** Optional: Sets the disabled state of this component */",
      "type": {
        "arguments": { "disabled": "boolean" },
        "returnType": "void",
        "optional": true
      }
    },
    "setInputPlaceholder": {
      "description": "/** Optional: Sets the current input placeholder */",
      "type": {
        "arguments": { "placeholder": "string" },
        "returnType": "void",
        "optional": true
      }
    },
    "setInputAriaLabel": {
      "description": "/** Optional: Sets the current input aria label */",
      "type": {
        "arguments": { "placeholder": "string" },
        "returnType": "void",
        "optional": true
      }
    },
    "afterGuiAttached": {
      "description": "/** Optional: A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    }
  },
  "IFilterAngularComp": {
    "agInit": {
      "description": "/** Mandatory - Params for rendering this component. */",
      "type": {
        "arguments": { "params": "IFilterParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "isFilterActive": {
      "description": "/** Returns `true` if the filter is currently active, otherwise `false`. \n     * If active then 1) the grid will show the filter icon in the column header \n     * and 2) the filter will be included in the filtering of the data.\n    */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "doesFilterPass": {
      "description": "/** The grid will ask each active filter, in turn, whether each row in the grid passes. If any\n     * filter fails, then the row will be excluded from the final set. The method is provided a\n     * params object with attributes node (the rodNode the grid creates that wraps the data) and data\n     * (the data object that you provided to the grid for that row).\n     */",
      "type": {
        "arguments": { "params": "IDoesFilterPassParams" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getModel": {
      "description": "/** Returns a model representing the current state of the filter, or `null` if the filter is\n     * not active. The grid calls `getModel()` on all active filters when `gridApi.getFilterModel()` is called.\n     */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "setModel": {
      "description": "/** Sets the state of the filter using the supplied model. Providing `null` as the model will\n     * de-activate the filter.\n     */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "void | AgPromise<void>",
        "optional": false
      }
    },
    "onNewRowsLoaded": {
      "description": "/** Gets called when new rows are inserted into the grid. If the filter needs to change its\n     state after rows are loaded, it can do it here. For example the set filters uses this\n     to update the list of available values to select from (e.g. 'Ireland', 'UK' etc for\n     Country filter). To get the list of available values from within this method from the\n    Client Side Row Model, use `gridApi.forEachLeafNode(callback)`.\n    */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "onAnyFilterChanged": {
      "description": "/** Called whenever any filter is changed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getModelAsString": {
      "description": "/** Optional method used by AG Grid when rendering floating filters and there isn't a floating filter\n     * associated for this filter, this will happen if you create a custom filter and NOT a custom floating\n     * filter.\n     */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "string",
        "optional": true
      }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "afterGuiDetached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been removed from the screen.\n     * If a parent popup is opened and closed (e.g. for filters), this method is called each time the component is hidden.\n     * This is useful for any logic to reset the UI state back to the model before the component is reopened.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "ICellRendererAngularComp": {
    "agInit": {
      "description": "/** Mandatory - Params for rendering this component. */",
      "type": {
        "arguments": { "params": "ICellRendererParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any"] },
    "refresh": {
      "description": "/** Get the cell to refresh. Return true if successful. Return false if not (or you don't have refresh logic),\n     * then the grid will refresh the cell for you.\n     */",
      "type": {
        "arguments": { "params": "ICellRendererParams<TData>" },
        "returnType": "boolean",
        "optional": false
      }
    }
  },
  "ICellEditorAngularComp": {
    "agInit": {
      "description": "/** Mandatory - Params for rendering this component. */",
      "type": {
        "arguments": { "params": "ICellEditorParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "getValue": {
      "description": "/** Return the final value - called by the grid once after editing is complete\n     */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "isPopup": {
      "description": "/** Gets called once after initialised. If you return true, the editor will\n     * appear in a popup, so is not constrained to the boundaries of the cell.\n     * This is great if you want to, for example, provide you own custom dropdown list\n     * for selection. Default is false (ie if you don't provide the method).\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "getPopupPosition": {
      "description": "/** Gets called once, only if isPopup() returns true. Return \"over\" if the popup\n     * should cover the cell, or \"under\" if it should be positioned below leaving the\n     * cell value visible. If this method is not present, the default is \"over\".\n     */",
      "type": {
        "arguments": {},
        "returnType": "'over' | 'under' | undefined",
        "optional": true
      }
    },
    "isCancelBeforeStart": {
      "description": "/** Gets called once after initialised. If you return true, the editor will not be\n     * used and the grid will continue editing. Use this to make a decision on editing\n     * inside the init() function, eg maybe you want to only start editing if the user\n     * hits a numeric key, but not a letter, if the editor is for numbers.\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "isCancelAfterEnd": {
      "description": "/** Gets called once after editing is complete. If your return true, then the new\n     * value will not be used. The editing will have no impact on the record. Use this\n     * if you do not want a new value from your gui, i.e. you want to cancel the editing.\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "focusIn": {
      "description": "/** If doing full line edit, then gets called when focus should be put into the editor\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "focusOut": {
      "description": "/** If doing full line edit, then gets called when focus is leaving the editor\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * This method is called each time the edit component is activated.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "AgRendererComponent": {
    "agInit": {
      "description": "/** Mandatory - Params for rendering this component. */",
      "type": {
        "arguments": { "params": "ICellRendererParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any"] },
    "refresh": {
      "description": "/** Get the cell to refresh. Return true if successful. Return false if not (or you don't have refresh logic),\n     * then the grid will refresh the cell for you.\n     */",
      "type": {
        "arguments": { "params": "ICellRendererParams<TData>" },
        "returnType": "boolean",
        "optional": false
      }
    }
  },
  "AgEditorComponent": {
    "agInit": {
      "description": "/** Mandatory - Params for rendering this component. */",
      "type": {
        "arguments": { "params": "ICellEditorParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "getValue": {
      "description": "/** Return the final value - called by the grid once after editing is complete\n     */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "isPopup": {
      "description": "/** Gets called once after initialised. If you return true, the editor will\n     * appear in a popup, so is not constrained to the boundaries of the cell.\n     * This is great if you want to, for example, provide you own custom dropdown list\n     * for selection. Default is false (ie if you don't provide the method).\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "getPopupPosition": {
      "description": "/** Gets called once, only if isPopup() returns true. Return \"over\" if the popup\n     * should cover the cell, or \"under\" if it should be positioned below leaving the\n     * cell value visible. If this method is not present, the default is \"over\".\n     */",
      "type": {
        "arguments": {},
        "returnType": "'over' | 'under' | undefined",
        "optional": true
      }
    },
    "isCancelBeforeStart": {
      "description": "/** Gets called once after initialised. If you return true, the editor will not be\n     * used and the grid will continue editing. Use this to make a decision on editing\n     * inside the init() function, eg maybe you want to only start editing if the user\n     * hits a numeric key, but not a letter, if the editor is for numbers.\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "isCancelAfterEnd": {
      "description": "/** Gets called once after editing is complete. If your return true, then the new\n     * value will not be used. The editing will have no impact on the record. Use this\n     * if you do not want a new value from your gui, i.e. you want to cancel the editing.\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "focusIn": {
      "description": "/** If doing full line edit, then gets called when focus should be put into the editor\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "focusOut": {
      "description": "/** If doing full line edit, then gets called when focus is leaving the editor\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * This method is called each time the edit component is activated.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "AgFilterComponent": {
    "agInit": {
      "description": "/** Mandatory - Params for rendering this component. */",
      "type": {
        "arguments": { "params": "IFilterParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "isFilterActive": {
      "description": "/** Returns `true` if the filter is currently active, otherwise `false`. \n     * If active then 1) the grid will show the filter icon in the column header \n     * and 2) the filter will be included in the filtering of the data.\n    */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "doesFilterPass": {
      "description": "/** The grid will ask each active filter, in turn, whether each row in the grid passes. If any\n     * filter fails, then the row will be excluded from the final set. The method is provided a\n     * params object with attributes node (the rodNode the grid creates that wraps the data) and data\n     * (the data object that you provided to the grid for that row).\n     */",
      "type": {
        "arguments": { "params": "IDoesFilterPassParams" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getModel": {
      "description": "/** Returns a model representing the current state of the filter, or `null` if the filter is\n     * not active. The grid calls `getModel()` on all active filters when `gridApi.getFilterModel()` is called.\n     */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "setModel": {
      "description": "/** Sets the state of the filter using the supplied model. Providing `null` as the model will\n     * de-activate the filter.\n     */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "void | AgPromise<void>",
        "optional": false
      }
    },
    "onNewRowsLoaded": {
      "description": "/** Gets called when new rows are inserted into the grid. If the filter needs to change its\n     state after rows are loaded, it can do it here. For example the set filters uses this\n     to update the list of available values to select from (e.g. 'Ireland', 'UK' etc for\n     Country filter). To get the list of available values from within this method from the\n    Client Side Row Model, use `gridApi.forEachLeafNode(callback)`.\n    */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "onAnyFilterChanged": {
      "description": "/** Called whenever any filter is changed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getModelAsString": {
      "description": "/** Optional method used by AG Grid when rendering floating filters and there isn't a floating filter\n     * associated for this filter, this will happen if you create a custom filter and NOT a custom floating\n     * filter.\n     */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "string",
        "optional": true
      }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "afterGuiDetached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been removed from the screen.\n     * If a parent popup is opened and closed (e.g. for filters), this method is called each time the component is hidden.\n     * This is useful for any logic to reset the UI state back to the model before the component is reopened.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "AgFloatingFilterComponent": {
    "meta": { "typeParams": ["P = any"] },
    "agInit": {
      "description": "/** Mandatory - Params for rendering this component. */",
      "type": {
        "arguments": { "params": "IFloatingFilterParams<P>" },
        "returnType": "void",
        "optional": false
      }
    },
    "onParentModelChanged": {
      "description": "/** Gets called every time the parent filter changes.\n     * Your floating filter would typically refresh its UI to reflect the new filter state.\n     * The provided parentModel is what the parent filter returns from its getModel() method.\n     * The event is the FilterChangedEvent that the grid fires.\n     */",
      "type": {
        "arguments": {
          "parentModel": "any",
          "filterChangedEvent?": "FilterChangedEvent | null"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "ILoadingCellRendererAngularComp": {
    "agInit": {
      "description": "/** Mandatory - Params for rendering this component. */",
      "type": {
        "arguments": { "params": "ILoadingCellRendererParams" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ILoadingOverlayAngularComp": {
    "agInit": {
      "description": "/** Mandatory - Params for rendering this component. */",
      "type": {
        "arguments": { "params": "ILoadingOverlayParams" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "INoRowsOverlayAngularComp": {
    "agInit": {
      "description": "/** Mandatory - Params for rendering this component. */",
      "type": {
        "arguments": { "params": "INoRowsOverlayParams" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "IStatusPanelAngularComp": {
    "agInit": {
      "description": "/** Mandatory - Params for rendering this component. */",
      "type": {
        "arguments": { "params": "IStatusPanelParams" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "IToolPanelAngularComp": {
    "agInit": {
      "description": "/** Mandatory - Params for rendering this component. */",
      "type": {
        "arguments": { "params": "IToolPanelParams" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ITooltipAngularComp": {
    "agInit": {
      "description": "/** Mandatory - Params for rendering this component. */",
      "type": {
        "arguments": { "params": "ITooltipParams" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ChangeDetectionStrategyType": {},
  "SharedProps": {
    "gridOptions": {
      "type": { "returnType": "GridOptions<TData>", "optional": true }
    },
    "modules": { "type": { "returnType": "Module[]", "optional": true } },
    "containerStyle": { "type": { "returnType": "any", "optional": true } },
    "className": { "type": { "returnType": "string", "optional": true } },
    "setGridApi": {
      "type": {
        "arguments": { "gridApi": "GridApi<TData>", "columnApi": "ColumnApi" },
        "returnType": "void",
        "optional": true
      }
    },
    "componentWrappingElement": {
      "type": { "returnType": "string", "optional": true }
    },
    "maxComponentCreationTimeMs": {
      "type": { "returnType": "number", "optional": true }
    },
    "rowDataChangeDetectionStrategy": {
      "description": "/** @deprecated v29 ChangeDetectionStrategyType has been deprecated. IdentityCheck will always be used now for a more consistent approach. */",
      "type": { "returnType": "ChangeDetectionStrategyType", "optional": true }
    },
    "children": { "type": { "returnType": "any", "optional": true } },
    "meta": { "typeParams": ["TData = any"] },
    "statusBar": {
      "description": "/** Specifies the status bar components to use in the status bar. */",
      "type": {
        "returnType": "{ statusPanels: StatusPanelDef[]; }",
        "optional": true
      }
    },
    "sideBar": {
      "description": "/** Specifies the side bar components. */",
      "type": {
        "returnType": "SideBarDef | string | string[] | boolean | null",
        "optional": true
      }
    },
    "suppressContextMenu": {
      "description": "/** Set to `true` to not show the context menu. Use if you don't want to use the default 'right click' context menu. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "preventDefaultOnContextMenu": {
      "description": "/** When using `suppressContextMenu`, you can use the `onCellContextMenu` function to provide your own code to handle cell `contextmenu` events.\n     * This flag is useful to prevent the browser from showing its default context menu.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "allowContextMenuWithControlKey": {
      "description": "/** Allows context menu to show, even when `Ctrl` key is held down. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMenuHide": {
      "description": "/** Set to `true` to always show the column menu button, rather than only showing when the mouse is over the column header. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableBrowserTooltips": {
      "description": "/** Set to `true` to use the browser's default tooltip instead of using the grid's Tooltip Component. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "tooltipShowDelay": {
      "description": "/** The delay in milliseconds that it takes for tooltips to show up once an element is hovered over.\n     * **Note:** This property does not work if `enableBrowserTooltips` is `true`.\n     * Default: `2000`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "tooltipHideDelay": {
      "description": "/** The delay in milliseconds that it takes for tooltips to hide once they have been displayed.\n     * **Note:** This property does not work if `enableBrowserTooltips` is `true`.\n     * Default: `10000`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "tooltipMouseTrack": {
      "description": "/** Set to `true` to have tooltips follow the cursor once they are displayed. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "popupParent": {
      "description": "/** DOM element to use as the popup parent for grid popups (context menu, column menu etc). */",
      "type": { "returnType": "HTMLElement | null", "optional": true }
    },
    "copyHeadersToClipboard": {
      "description": "/** Set to `true` to also include headers when copying to clipboard using `Ctrl + C` clipboard. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "copyGroupHeadersToClipboard": {
      "description": "/** Set to `true` to also include group headers when copying to clipboard using `Ctrl + C` clipboard. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "clipboardDeliminator": {
      "description": "/** @deprecated v27.1 Use `clipboardDelimiter` */",
      "type": { "returnType": "string", "optional": true }
    },
    "clipboardDelimiter": {
      "description": "/** Specify the delimiter to use when copying to clipboard.\n     * Default: `\\t`\n    */",
      "type": { "returnType": "string", "optional": true }
    },
    "suppressCopyRowsToClipboard": {
      "description": "/** Set to `true` to copy the cell range or focused cell to the clipboard and never the selected rows. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressCopySingleCellRanges": {
      "description": "/** Set to `true` to copy rows instead of ranges when a range with only a single cell is selected. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressLastEmptyLineOnPaste": {
      "description": "/** Set to `true` to work around a bug with Excel (Windows) that adds an extra empty line at the end of ranges copied to the clipboard. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressClipboardPaste": {
      "description": "/** Set to `true` to turn off paste operations within the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressClipboardApi": {
      "description": "/** Set to `true` to stop the grid trying to use the Clipboard API, if it is blocked, and immediately fallback to the workaround. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressCutToClipboard": {
      "description": "/** Set to `true` to block **cut** operations within the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "columnDefs": {
      "description": "/** Array of Column / Column Group definitions. */",
      "type": {
        "returnType": "(ColDef<TData> | ColGroupDef<TData>)[] | null",
        "optional": true
      }
    },
    "defaultColDef": {
      "description": "/** A default column definition. Items defined in the actual column definitions get precedence. */",
      "type": { "returnType": "ColDef<TData>", "optional": true }
    },
    "defaultColGroupDef": {
      "description": "/** A default column group definition. All column group definitions will use these properties. Items defined in the actual column group definition get precedence. */",
      "type": { "returnType": "Partial<ColGroupDef<TData>>", "optional": true }
    },
    "columnTypes": {
      "description": "/** An object map of custom column types which contain groups of properties that column definitions can inherit by referencing in their `type` property. */",
      "type": {
        "returnType": "{ [key: string]: ColDef<TData>; }",
        "optional": true
      }
    },
    "maintainColumnOrder": {
      "description": "/** Keeps the order of Columns maintained after new Column Definitions are updated. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressFieldDotNotation": {
      "description": "/** If `true`, then dots in field names (e.g. `'address.firstLine'`) are not treated as deep references. Allows you to use dots in your field name if you prefer. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "headerHeight": {
      "description": "/** The height in pixels for the row containing the column label header. If not specified, it uses the theme value of `header-height`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "groupHeaderHeight": {
      "description": "/** The height in pixels for the rows containing header column groups. If not specified, it uses `headerHeight`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "floatingFiltersHeight": {
      "description": "/** The height in pixels for the row containing the floating filters. If not specified, it uses the theme value of `header-height`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "pivotHeaderHeight": {
      "description": "/** The height in pixels for the row containing the columns when in pivot mode. If not specified, it uses `headerHeight`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "pivotGroupHeaderHeight": {
      "description": "/** The height in pixels for the row containing header column groups when in pivot mode. If not specified, it uses `groupHeaderHeight`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "allowDragFromColumnsToolPanel": {
      "description": "/** Allow reordering and pinning columns by dragging columns from the Columns Tool Panel to the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMovableColumns": {
      "description": "/** Set to `true` to suppress column moving, i.e. to make the columns fixed position. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressColumnMoveAnimation": {
      "description": "/** If `true`, the `ag-column-moving` class is not added to the grid while columns are moving. In the default themes, this results in no animation when moving columns. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressDragLeaveHidesColumns": {
      "description": "/** If `true`, when you drag a column out of the grid (e.g. to the group zone) the column is not hidden. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowGroupHidesColumns": {
      "description": "/** If `true`, when you drag a column into a row group panel the column is not hidden. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "colResizeDefault": {
      "description": "/** Set to `'shift'` to have shift-resize as the default resize operation (same as user holding down `Shift` while resizing). */",
      "type": { "returnType": "'shift'", "optional": true }
    },
    "suppressAutoSize": {
      "description": "/** Suppresses auto-sizing columns for columns. In other words, double clicking a column's header's edge will not auto-size. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "autoSizePadding": {
      "description": "/** Number of pixels to add to a column width after the [auto-sizing](/column-sizing/#auto-size-columns) calculation.\n     * Set this if you want to add extra room to accommodate (for example) sort icons, or some other dynamic nature of the header.\n     * Default: `20`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "skipHeaderOnAutoSize": {
      "description": "/** Set this to `true` to skip the `headerName` when `autoSize` is called by default. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "components": {
      "description": "/** A map of component names to components. */",
      "type": { "returnType": "{ [p: string]: any; }", "optional": true }
    },
    "frameworkComponents": {
      "description": "/** @deprecated As of v27, use `components` for framework components too. */",
      "type": {
        "returnType": "{ [p: string]: { new(): any; }; } | any",
        "optional": true
      }
    },
    "reactUi": {
      "description": "/** @deprecated React UI is enabled by default. Use suppressReactUi=true to turn it off. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressReactUi": {
      "description": "/** @deprecated Set to true to enable the experimental React UI. Works with React framework only.\n     * It is planned the next major release of the grid will drop support of the legacy React engine,\n     * hence this property is deprecated as will be removed in the next major release. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "editType": {
      "description": "/** Set to `'fullRow'` to enable Full Row Editing. Otherwise leave blank to edit one cell at a time. */",
      "type": { "returnType": "'fullRow'", "optional": true }
    },
    "singleClickEdit": {
      "description": "/** Set to `true` to enable Single Click Editing for cells, to start editing with a single click. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressClickEdit": {
      "description": "/** Set to `true` so that neither single nor double click starts editing. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "readOnlyEdit": {
      "description": "/** Set to `true` to stop the grid updating data after `Edit`, `Clipboard` and `Fill Handle` operations. When this is set, it is intended the application will update the data, eg in an external immutable store, and then pass the new dataset to the grid. <br />**Note:** `rowNode.setDataValue()` does not update the value of the cell when this is `True`, it fires `onCellEditRequest` instead. Default: `false`.     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "stopEditingWhenCellsLoseFocus": {
      "description": "/** Set this to `true` to stop cell editing when grid loses focus.\n     * The default is that the grid stays editing until focus goes onto another cell.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enterMovesDown": {
      "description": "/** Set to `true` along with `enterMovesDownAfterEdit` to have Excel-style behaviour for the `Enter` key.\n     * i.e. pressing the `Enter` key will move down to the cell beneath.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enterMovesDownAfterEdit": {
      "description": "/** Set to `true` along with `enterMovesDown` to have Excel-style behaviour for the 'Enter' key.\n     * i.e. pressing the Enter key will move down to the cell beneath.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellEditingOnBackspace": {
      "description": "/** Forces Cell Editing to start when backspace is pressed. This is only relevant for MacOS users. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "undoRedoCellEditing": {
      "description": "/** Set to `true` to enable Undo / Redo while editing. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "undoRedoCellEditingLimit": {
      "description": "/** Set the size of the undo / redo stack. Default: `10` */",
      "type": { "returnType": "number", "optional": true }
    },
    "defaultCsvExportParams": {
      "description": "/** A default configuration object used to export to CSV. */",
      "type": { "returnType": "CsvExportParams", "optional": true }
    },
    "suppressCsvExport": {
      "description": "/** Prevents the user from exporting the grid to CSV. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "defaultExcelExportParams": {
      "description": "/** A default configuration object used to export to Excel. */",
      "type": { "returnType": "ExcelExportParams", "optional": true }
    },
    "suppressExcelExport": {
      "description": "/** Prevents the user from exporting the grid to Excel. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "excelStyles": {
      "description": "/** A list (array) of Excel styles to be used when exporting to Excel with styles. */",
      "type": { "returnType": "ExcelStyle[]", "optional": true }
    },
    "quickFilterText": {
      "description": "/** Rows are filtered using this text as a Quick Filter. */",
      "type": { "returnType": "string", "optional": true }
    },
    "cacheQuickFilter": {
      "description": "/** Set to `true` to turn on the Quick Filter cache, used to improve performance when using the Quick Filter. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "excludeHiddenColumnsFromQuickFilter": {
      "description": "/** Set to `true` to exclude hidden columns from being checked by the Quick Filter.\n     * This can give a significant performance improvement when there are a large number of hidden columns,\n     * and you are only interested in filtering on what's visible. Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "excludeChildrenWhenTreeDataFiltering": {
      "description": "/** Set to `true` to override the default tree data filtering behaviour to instead exclude child nodes from filter results. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCharts": {
      "description": "/** Set to `true` to Enable Charts. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "chartThemes": {
      "description": "/** The list of chart themes to be used. */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "customChartThemes": {
      "description": "/** A map containing custom chart themes. */",
      "type": {
        "returnType": "{ [name: string]: AgChartTheme }",
        "optional": true
      }
    },
    "chartThemeOverrides": {
      "description": "/** Chart theme overrides applied to all themes. */",
      "type": { "returnType": "AgChartThemeOverrides", "optional": true }
    },
    "enableChartToolPanelsButton": {
      "description": "/** @deprecated As of v29, no longer used. To suppress use `suppressChartToolPanelsButton`. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressChartToolPanelsButton": {
      "description": "/** Set to `true` to show the 'hamburger' menu option from the Chart Toolbar and display the remaining toolbar buttons. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "chartToolPanelsDef": {
      "description": "/** Allows customisation of the Chart Tool Panels, such as changing the tool panels visibility and order, as well as choosing which charts should be displayed in the settings panel. */",
      "type": { "returnType": "ChartToolPanelsDef", "optional": true }
    },
    "loadingCellRenderer": {
      "description": "/** Provide your own loading cell renderer to use when data is loading via a DataSource.\n    * See [Loading Cell Renderer](https://www.ag-grid.com/javascript-data-grid/component-loading-cell-renderer/) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingCellRendererFramework": {
      "description": "/** @deprecated As of v27, use `loadingCellRenderer` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingCellRendererParams": {
      "description": "/** Params to be passed to the `loadingCellRenderer` component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingCellRendererSelector": {
      "description": "/** Callback to select which loading cell renderer to be used when data is loading via a DataSource. */",
      "type": {
        "returnType": "LoadingCellRendererSelectorFunc<TData>",
        "optional": true
      }
    },
    "localeText": {
      "description": "/** A map of key->value pairs for localising text within the grid. */",
      "type": { "returnType": "{ [key: string]: string }", "optional": true }
    },
    "masterDetail": {
      "description": "/** Set to `true` to enable Master Detail. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "keepDetailRows": {
      "description": "/** Set to `true` to keep detail rows for when they are displayed again. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "keepDetailRowsCount": {
      "description": "/** Sets the number of details rows to keep. Default: `10` */",
      "type": { "returnType": "number", "optional": true }
    },
    "detailCellRenderer": {
      "description": "/** Provide a custom `detailCellRenderer` to use when a master row is expanded.\n    * See [Detail Cell Renderer](https://www.ag-grid.com/javascript-data-grid/master-detail-custom-detail/) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "detailCellRendererFramework": {
      "description": "/** @deprecated As of v27, use `detailCellRenderer` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "detailCellRendererParams": {
      "description": "/** Specifies the params to be used by the Detail Cell Renderer. Can also be a function that provides the params to enable dynamic definitions of the params. */",
      "type": { "returnType": "any", "optional": true }
    },
    "detailRowHeight": {
      "description": "/** Set fixed height in pixels for each detail row. */",
      "type": { "returnType": "number", "optional": true }
    },
    "detailRowAutoHeight": {
      "description": "/** Set to `true` to have the detail grid dynamically change it's height to fit it's rows. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "context": {
      "description": "/** Provides a context object that is provided to different callbacks the grid uses. Used for passing additional information to the callbacks by your application. */",
      "type": { "returnType": "any", "optional": true }
    },
    "alignedGrids": {
      "description": "/** A list of grids to treat as Aligned Grids. If grids are aligned then the columns and horizontal scrolling will be kept in sync. */",
      "type": {
        "returnType": "{ api?: GridApi | null, columnApi?: ColumnApi | null }[]",
        "optional": true
      }
    },
    "tabIndex": {
      "description": "/** Change this value to set the tabIndex order of the Grid within your application. Default: `0` */",
      "type": { "returnType": "number", "optional": true }
    },
    "rowBuffer": {
      "description": "/** The number of rows rendered outside the viewable area the grid renders.\n     * Having a buffer means the grid will have rows ready to show as the user slowly scrolls vertically.\n     * Default: `10`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "valueCache": {
      "description": "/** Set to `true` to turn on the value cache. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "valueCacheNeverExpires": {
      "description": "/** Set to `true` to configure the value cache to not expire after data updates. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellExpressions": {
      "description": "/** Set to `true` to allow cell expressions. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressParentsInRowNodes": {
      "description": "/** If `true`, row nodes do not have their parents set.\n     * The grid doesn't use the parent reference, but it is included to help the client code navigate the node tree if it wants by providing bi-direction navigation up and down the tree.\n     * If this is a problem (e.g. if you need to convert the tree to JSON, which does not allow cyclic dependencies) then set this to `true`.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressTouch": {
      "description": "/** Disables touch support (but does not remove the browser's efforts to simulate mouse events on touch). Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressFocusAfterRefresh": {
      "description": "/** Set to `true` to not set focus back on the grid after a refresh. This can avoid issues where you want to keep the focus on another part of the browser. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAsyncEvents": {
      "description": "/** Disables the asynchronous nature of the events introduced in v10, and makes them synchronous. This property only exists for the purpose of supporting legacy code which has a dependency on synchronous events from earlier versions (v9 or earlier) of AG Grid. **It is strongly recommended that you do not change this property unless you have legacy issues.** Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressBrowserResizeObserver": {
      "description": "/** The grid will check for `ResizeObserver` and use it if it exists in the browser, otherwise it will use the grid's alternative implementation. Some users reported issues with Chrome's `ResizeObserver`. Use this property to always use the grid's alternative implementation should such problems exist. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressPropertyNamesCheck": {
      "description": "/** Disables showing a warning message in the console if using a `gridOptions` or `colDef` property that doesn't exist. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressChangeDetection": {
      "description": "/** Disables change detection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debug": {
      "description": "/** Set this to `true` to enable debug information from the grid and related components. Will result in additional logging being output, but very useful when investigating problems. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "overlayLoadingTemplate": {
      "description": "/** Provide a template for 'loading' overlay. */",
      "type": { "returnType": "string", "optional": true }
    },
    "loadingOverlayComponent": {
      "description": "/** Provide a custom loading overlay component.\n    * See [Loading Overlay Component](https://www.ag-grid.com/javascript-data-grid/component-overlay/#simple-loading-overlay-component) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingOverlayComponentFramework": {
      "description": "/** @deprecated As of v27, use `loadingOverlayComponent` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingOverlayComponentParams": {
      "description": "/** Customise the parameters provided to the loading overlay component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "suppressLoadingOverlay": {
      "description": "/** Disables the 'loading' overlay. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "overlayNoRowsTemplate": {
      "description": "/** Provide a template for 'no rows' overlay. */",
      "type": { "returnType": "string", "optional": true }
    },
    "noRowsOverlayComponent": {
      "description": "/** Provide a custom no rows overlay component.\n    * See [No Rows Overlay Component](https://www.ag-grid.com/javascript-data-grid/component-overlay/#simple-no-rows-overlay-component) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "noRowsOverlayComponentFramework": {
      "description": "/** @deprecated As of v27, use `noRowsOverlayComponent` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "noRowsOverlayComponentParams": {
      "description": "/** Customise the parameters provided to the no rows overlay component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "suppressNoRowsOverlay": {
      "description": "/** Disables the 'no rows' overlay. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pagination": {
      "description": "/** Set whether pagination is enabled. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "paginationPageSize": {
      "description": "/** How many rows to load per page. If `paginationAutoPageSize` is specified, this property is ignored. Default: `100` */",
      "type": { "returnType": "number", "optional": true }
    },
    "paginationAutoPageSize": {
      "description": "/** Set to `true` so that the number of rows to load per page is automatically adjusted by the grid so each page shows enough rows to just fill the area designated for the grid. If `false`, `paginationPageSize` is used. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "paginateChildRows": {
      "description": "/** Set to `true` to have pages split children of groups when using Row Grouping or detail rows with Master Detail. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressPaginationPanel": {
      "description": "/** If `true`, the default grid controls for navigation are hidden.\n     * This is useful if `pagination=true` and you want to provide your own pagination controls.\n     * Otherwise, when `pagination=true` the grid automatically shows the necessary controls at the bottom so that the user can navigate through the different pages.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pivotMode": {
      "description": "/** Set to `true` to enable pivot mode. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pivotPanelShow": {
      "description": "/** When to show the 'pivot panel' (where you drag rows to pivot) at the top. Note that the pivot panel will never show if `pivotMode` is off. Default: `never` */",
      "type": {
        "returnType": "'always' | 'onlyWhenPivoting' | 'never'",
        "optional": true
      }
    },
    "pivotColumnGroupTotals": {
      "description": "/** When set and the grid is in pivot mode, automatically calculated totals will appear within the Pivot Column Groups, in the position specified. */",
      "type": { "returnType": "'before' | 'after'", "optional": true }
    },
    "pivotRowTotals": {
      "description": "/** When set and the grid is in pivot mode, automatically calculated totals will appear for each value column in the position specified. */",
      "type": { "returnType": "'before' | 'after'", "optional": true }
    },
    "pivotSuppressAutoColumn": {
      "description": "/** If `true`, the grid will not swap in the grouping column when pivoting. Useful if pivoting using Server Side Row Model or Viewport Row Model and you want full control of all columns including the group column. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressExpandablePivotGroups": {
      "description": "/** When enabled, pivot column groups will appear 'fixed', without the ability to expand and collapse the column groups. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "functionsReadOnly": {
      "description": "/** If `true`, then row group, pivot and value aggregation will be read-only from the GUI. The grid will display what values are used for each, but will not allow the user to change the selection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "aggFuncs": {
      "description": "/** A map of 'function name' to 'function' for custom aggregation functions. */",
      "type": {
        "returnType": "{ [key: string]: IAggFunc<TData>; }",
        "optional": true
      }
    },
    "suppressAggFuncInHeader": {
      "description": "/** When `true`, column headers won't include the `aggFunc` name, e.g. `'sum(Bank Balance)`' will just be `'Bank Balance'`. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAggAtRootLevel": {
      "description": "/** When `true`, the aggregations won't be computed for the root node of the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "aggregateOnlyChangedColumns": {
      "description": "/** When using change detection, only the updated column will be re-aggregated. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAggFilteredOnly": {
      "description": "/** Set to `true` so that aggregations are not impacted by filtering. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "removePivotHeaderRowWhenSingleValueColumn": {
      "description": "/** Set to `true` to omit the value Column header when there is only a single value column. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "animateRows": {
      "description": "/** Set to `true` to enable Row Animation. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellChangeFlash": {
      "description": "/** Set to `true` to have cells flash after data changes. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "cellFlashDelay": {
      "description": "/** To be used in combination with `enableCellChangeFlash`, this configuration will set the delay in milliseconds of how long a cell should remain in its \"flashed\" state.\n     * Default: `500`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "cellFadeDelay": {
      "description": "/** To be used in combination with `enableCellChangeFlash`, this configuration will set the delay in milliseconds of how long the \"flashed\" state animation takes to fade away after the timer set by `cellFlashDelay` has completed.\n     * Default: `1000`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "allowShowChangeAfterFilter": {
      "description": "/** Set to `true` to have cells flash after data changes even when the change is due to filtering. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "domLayout": {
      "description": "/** Switch between layout options: `normal`, `autoHeight`, `print`.\n     * Default: `normal`\n     */",
      "type": { "returnType": "DomLayoutType", "optional": true }
    },
    "ensureDomOrder": {
      "description": "/** When `true`, the order of rows and columns in the DOM are consistent with what is on screen. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableRtl": {
      "description": "/** Set to `true` to operate the grid in RTL (Right to Left) mode. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressColumnVirtualisation": {
      "description": "/** Set to `true` so that the grid doesn't virtualise the columns. For example, if you have 100 columns, but only 10 visible due to scrolling, all 100 will always be rendered. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMaxRenderedRowRestriction": {
      "description": "/** By default the grid has a limit of rendering a maximum of 500 rows at once (remember the grid only renders rows you can see, so unless your display shows more than 500 rows without vertically scrolling this will never be an issue).\n     * <br />**This is only relevant if you are manually setting `rowBuffer` to a high value (rendering more rows than can be seen), or `suppressRowVirtualisation` is true, or if your grid height is able to display more than 500 rows at once.**\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowVirtualisation": {
      "description": "/** Set to `true` so that the grid doesn't virtualise the rows. For example, if you have 100 rows, but only 10 visible due to scrolling, all 100 will always be rendered. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDragManaged": {
      "description": "/** Set to `true` to enable Managed Row Dragging. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowDrag": {
      "description": "/** Set to `true` to suppress row dragging. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMoveWhenRowDragging": {
      "description": "/** Set to `true` to suppress moving rows while dragging the `rowDrag` waffle. This option highlights the position where the row will be placed and it will only move the row on mouse up. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDragEntireRow": {
      "description": "/** Set to `true` to enable clicking and dragging anywhere on the row without the need for a drag handle. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDragMultiRow": {
      "description": "/** Set to `true` to enable dragging multiple rows at the same time. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDragText": {
      "description": "/** A callback that should return a string to be displayed by the `rowDragComp` while dragging a row.\n     * If this callback is not set, the current cell value will be used.\n     * If the `rowDragText` callback is set in the ColDef it will take precedence over this, except when\n     * `rowDragEntireRow=true`.\n     */",
      "type": {
        "arguments": { "params": "IRowDragItem", "dragItemCount": "number" },
        "returnType": "string",
        "optional": true
      }
    },
    "fullWidthCellRenderer": {
      "description": "/** Provide your own cell renderer component to use for full width rows.\n    * See [Full Width Rows](https://www.ag-grid.com/javascript-data-grid/full-width-rows/) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "fullWidthCellRendererFramework": {
      "description": "/** @deprecated As of v27, use `fullWidthCellRenderer` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "fullWidthCellRendererParams": {
      "description": "/** Customise the parameters provided to the `fullWidthCellRenderer` component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "embedFullWidthRows": {
      "description": "/** Set to `true` to have the Full Width Rows embedded in grid's main container so they can be scrolled horizontally . */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupDisplayType": {
      "description": "/** Specifies how the results of row grouping should be displayed.\n     *\n     *  The options are:\n     *\n     * - `'singleColumn'`: single group column automatically added by the grid.\n     * - `'multipleColumns'`: a group column per row group is added automatically.\n     * - `'groupRows'`: group rows are automatically added instead of group columns.\n     * - `'custom'`: informs the grid that group columns will be provided.\n     */",
      "type": { "returnType": "RowGroupingDisplayType", "optional": true }
    },
    "groupDefaultExpanded": {
      "description": "/** If grouping, set to the number of levels to expand by default, e.g. `0` for none, `1` for first level only, etc. Set to `-1` to expand everything. Default: `0` */",
      "type": { "returnType": "number", "optional": true }
    },
    "autoGroupColumnDef": {
      "description": "/** Allows specifying the group 'auto column' if you are not happy with the default. If grouping, this column definition is included as the first column in the grid. If not grouping, this column is not included. */",
      "type": { "returnType": "ColDef<TData>", "optional": true }
    },
    "groupMaintainOrder": {
      "description": "/** When `true`, preserves the current group order when sorting on non-group columns. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupSelectsChildren": {
      "description": "/** When `true`, if you select a group, the children of the group will also be selected. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupAggFiltering": {
      "description": "/** Set to determine whether filters should be applied on aggregated group values. Default: `false` */",
      "type": {
        "returnType": "boolean | IsRowFilterable<TData>",
        "optional": true
      }
    },
    "groupIncludeFooter": {
      "description": "/** If grouping, this controls whether to show a group footer when the group is expanded.\n     * If `true`, then by default, the footer will contain aggregate data (if any) when shown and the header will be blank.\n     * When closed, the header will contain the aggregate data regardless of this setting (as the footer is hidden anyway).\n     * This is handy for 'total' rows, that are displayed below the data when the group is open, and alongside the group when it is closed.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupIncludeTotalFooter": {
      "description": "/** Set to `true` to show a 'grand total' group footer across all groups. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupSuppressBlankHeader": {
      "description": "/** If `true`, and showing footer, aggregate data will always be displayed at both the header and footer levels. This stops the possibly undesirable behaviour of the header details 'jumping' to the footer on expand. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupSelectsFiltered": {
      "description": "/** If using `groupSelectsChildren`, then only the children that pass the current filter will get selected. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "showOpenedGroup": {
      "description": "/** Shows the open group in the group column for non-group rows. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupRemoveSingleChildren": {
      "description": "/** Set to `true` to collapse groups that only have one child. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupRemoveLowestSingleChildren": {
      "description": "/** Set to `true` to collapse lowest level groups that only have one child. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupHideOpenParents": {
      "description": "/** Set to `true` to hide parents that are open. When used with multiple columns for showing groups, it can give a more pleasing user experience. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupAllowUnbalanced": {
      "description": "/** Set to `true` to prevent the grid from creating a '(Blanks)' group for nodes which do not belong to a group, and display the unbalanced nodes alongside group nodes. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowGroupPanelShow": {
      "description": "/** When to show the 'row group panel' (where you drag rows to group) at the top. Default: `never` */",
      "type": {
        "returnType": "'always' | 'onlyWhenGrouping' | 'never'",
        "optional": true
      }
    },
    "groupRowRenderer": {
      "description": "/** Provide the Cell Renderer to use when `groupDisplayType = 'groupRows'`.\n    * See [Group Row Cell Renderer](https://www.ag-grid.com/javascript-data-grid/grouping-group-rows/#providing-cell-renderer) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "groupRowRendererFramework": {
      "description": "/** @deprecated As of v27, use `groupRowRenderer` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "groupRowRendererParams": {
      "description": "/** Customise the parameters provided to the `groupRowRenderer` component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "suppressMakeColumnVisibleAfterUnGroup": {
      "description": "/** By default, when a column is un-grouped, i.e. using the Row Group Panel, it is made visible in the grid. This property stops the column becoming visible again when un-grouping. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "treeData": {
      "description": "/** Set to `true` to enable the Grid to work with Tree Data. You must also implement the `getDataPath(data)` callback. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowGroupPanelSuppressSort": {
      "description": "/** Set to `true` to suppress sort indicators and actions from the row group panel. Default: `false`. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupRowsSticky": {
      "description": "/** Set to `true` to keep open Group Rows visible at the top of the grid. Default: `false`.*/",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rememberGroupStateWhenNewData": {
      "description": "/** @deprecated v24 - no longer needed, transaction updates keep group state */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pinnedTopRowData": {
      "description": "/** Data to be displayed as pinned top rows in the grid. */",
      "type": { "returnType": "any[]", "optional": true }
    },
    "pinnedBottomRowData": {
      "description": "/** Data to be displayed as pinned bottom rows in the grid. */",
      "type": { "returnType": "any[]", "optional": true }
    },
    "rowModelType": {
      "description": "/** Sets the row model type. Default: `clientSide` */",
      "type": { "returnType": "RowModelType", "optional": true }
    },
    "rowData": {
      "description": "/** Set the data to be displayed as rows in the grid. */",
      "type": { "returnType": "TData[] | null", "optional": true }
    },
    "immutableData": {
      "description": "/** @deprecated 27.1 Immutable Data is on by default when grid callback getRowId() is implemented\n     * Enables Immutable Data mode, for compatibility with immutable stores. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "asyncTransactionWaitMillis": {
      "description": "/** How many milliseconds to wait before executing a batch of async transactions. */",
      "type": { "returnType": "number", "optional": true }
    },
    "suppressModelUpdateAfterUpdateTransaction": {
      "description": "/** Prevents Transactions changing sort, filter, group or pivot state when transaction only contains updates. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "datasource": {
      "description": "/** Provide the datasource for infinite scrolling. */",
      "type": { "returnType": "IDatasource", "optional": true }
    },
    "cacheOverflowSize": {
      "description": "/** How many extra blank rows to display to the user at the end of the dataset, which sets the vertical scroll and then allows the grid to request viewing more rows of data.\n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "infiniteInitialRowCount": {
      "description": "/** How many extra blank rows to display to the user at the end of the dataset, which sets the vertical scroll and then allows the grid to request viewing more rows of data.\n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "serverSideInitialRowCount": {
      "description": "/** Set how many loading rows to display to the user for the root level group.\n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "serverSideStoreType": {
      "description": "/** @deprecated v28 Whether to use Full Store or Partial Store for storing rows. Default: `partial`.\n     * Deprecated in favour of suppressServerSideInfiniteScroll. When false, Partial Store is used. When true,\n     * Full Store is used.\n     */",
      "type": { "returnType": "ServerSideStoreType", "optional": true }
    },
    "suppressServerSideInfiniteScroll": {
      "description": "/** When `true`, the Server-side Row Model will suppress Infinite Scrolling and load all the data at the current level.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "cacheBlockSize": {
      "description": "/** How many rows for each block in the store, i.e. how many rows returned from the server at a time.\n     * Default: `100`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "maxBlocksInCache": {
      "description": "/** How many blocks to keep in the store. Default is no limit, so every requested block is kept. Use this if you have memory concerns, and blocks that were least recently viewed will be purged when the limit is hit. The grid will additionally make sure it has all the blocks needed to display what is currently visible, in case this property is set to a low value. */",
      "type": { "returnType": "number", "optional": true }
    },
    "maxConcurrentDatasourceRequests": {
      "description": "/** How many requests to hit the server with concurrently. If the max is reached, requests are queued.\n     * Set to `-1` for no maximum restriction on requests.\n     * Default: `2`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "blockLoadDebounceMillis": {
      "description": "/** How many milliseconds to wait before loading a block. Useful when scrolling over many blocks, as it prevents blocks loading until scrolling has settled. */",
      "type": { "returnType": "number", "optional": true }
    },
    "purgeClosedRowNodes": {
      "description": "/** When enabled, closing group rows will remove children of that row. Next time the row is opened, child rows will be read from the datasource again. This property only applies when there is Row Grouping. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideDatasource": {
      "description": "/** Provide the `serverSideDatasource` for server side row model. */",
      "type": { "returnType": "IServerSideDatasource", "optional": true }
    },
    "serverSideSortAllLevels": {
      "description": "/** When enabled, always refreshes top level groups regardless of which column was sorted. This property only applies when there is Row Grouping & sorting is handled on the server. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideFilterAllLevels": {
      "description": "/** When enabled, always refreshes top level groups regardless of which column was filtered. This property only applies when there is Row Grouping & filtering is handled on the server. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideSortOnServer": {
      "description": "/**\n     * When enabled, Sorting will be done on the server. Only applicable when `suppressServerSideInfiniteScroll=true`.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideFilterOnServer": {
      "description": "/** When enabled, Filtering will be done on the server. Only applicable when `suppressServerSideInfiniteScroll=true`.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideSortingAlwaysResets": {
      "description": "/** @deprecated v28 This property has been deprecated. Use `serverSideSortAllLevels` instead. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideFilteringAlwaysResets": {
      "description": "/** @deprecated v28 This property has been deprecated. Use `serverSideFilterAllLevels` instead. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "viewportDatasource": {
      "description": "/** To use the viewport row model you need to provide the grid with a `viewportDatasource`. */",
      "type": { "returnType": "IViewportDatasource", "optional": true }
    },
    "viewportRowModelPageSize": {
      "description": "/** When using viewport row model, sets the page size for the viewport. */",
      "type": { "returnType": "number", "optional": true }
    },
    "viewportRowModelBufferSize": {
      "description": "/** When using viewport row model, sets the buffer size for the viewport. */",
      "type": { "returnType": "number", "optional": true }
    },
    "alwaysShowHorizontalScroll": {
      "description": "/** Set to `true` to always show the horizontal scrollbar. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "alwaysShowVerticalScroll": {
      "description": "/** Set to `true` to always show the vertical scrollbar. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debounceVerticalScrollbar": {
      "description": "/** Set to `true` to debounce the vertical scrollbar. Can provide smoother scrolling on slow machines. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressHorizontalScroll": {
      "description": "/** Set to `true` to never show the horizontal scroll. This is useful if the grid is aligned with another grid and will scroll when the other grid scrolls. (Should not be used in combination with `alwaysShowHorizontalScroll`.) Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressScrollOnNewData": {
      "description": "/** When `true`, the grid will not scroll to the top when new row data is provided. Use this if you don't want the default behaviour of scrolling to the top every time you load new data. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressScrollWhenPopupsAreOpen": {
      "description": "/** When `true`, the grid will not allow mousewheel / touchpad scroll when popup elements are present. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAnimationFrame": {
      "description": "/** When `true`, the grid will not use animation frames when drawing rows while scrolling. Use this if the grid is working fast enough that you don't need animation frames and you don't want the grid to flicker. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMiddleClickScrolls": {
      "description": "/** If `true`, middle clicks will result in `click` events for cells and rows. Otherwise the browser will use middle click to scroll the grid.<br />**Note:** Not all browsers fire `click` events with the middle button. Most will fire only `mousedown` and `mouseup` events, which can be used to focus a cell, but will not work to call the `onCellClicked` function. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressPreventDefaultOnMouseWheel": {
      "description": "/** If `true`, mouse wheel events will be passed to the browser. Useful if your grid has no vertical scrolls and you want the mouse to scroll the browser page. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "scrollbarWidth": {
      "description": "/** Tell the grid how wide in pixels the scrollbar is, which is used in grid width calculations. Set only if using non-standard browser-provided scrollbars, so the grid can use the non-standard size in its calculations. */",
      "type": { "returnType": "number", "optional": true }
    },
    "rowSelection": {
      "description": "/** Type of Row Selection: `single`, `multiple`. */",
      "type": { "returnType": "'single' | 'multiple'", "optional": true }
    },
    "rowMultiSelectWithClick": {
      "description": "/** Set to `true` to allow multiple rows to be selected using single click. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowDeselection": {
      "description": "/** If `true`, rows will not be deselected if you hold down `Ctrl` and click the row or press `Space`. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowClickSelection": {
      "description": "/** If `true`, row selection won't happen when rows are clicked. Use when you only want checkbox selection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressCellSelection": {
      "description": "/** @deprecated v27 This property has been deprecated. Use `suppressCellFocus` instead.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressCellFocus": {
      "description": "/** If `true`, cells won't be focusable. This means keyboard navigation will be disabled for grid cells, but remain enabled in other elements of the grid such as column headers, floating filters, tool panels. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMultiRangeSelection": {
      "description": "/** If `true`, only a single range can be selected. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellTextSelection": {
      "description": "/** Set to `true` to be able to select the text within cells.\n     *\n     * **Note:** When this is set to `true`, the clipboard service is disabled.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableRangeSelection": {
      "description": "/** Set to `true` to enable Range Selection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableRangeHandle": {
      "description": "/** Set to `true` to enable the Range Handle. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableFillHandle": {
      "description": "/** Set to `true` to enable the Fill Handle. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "fillHandleDirection": {
      "description": "/** Set to `'x'` to force the fill handle direction to horizontal, or set to `'y'` to force the fill handle direction to vertical. Default: `xy` */",
      "type": { "returnType": "'x' | 'y' | 'xy'", "optional": true }
    },
    "suppressClearOnFillReduction": {
      "description": "/** Set this to `true` to prevent cell values from being cleared when the Range Selection is reduced by the Fill Handle. Default: `false`*/",
      "type": { "returnType": "boolean", "optional": true }
    },
    "sortingOrder": {
      "description": "/** Array defining the order in which sorting occurs (if sorting is enabled). Values can be `'asc'`, `'desc'` or `null`. For example: `sortingOrder: ['asc', 'desc']`. Default: `[null, 'asc', 'desc']`  */",
      "type": { "returnType": "(SortDirection)[]", "optional": true }
    },
    "accentedSort": {
      "description": "/** Set to `true` to specify that the sort should take accented characters into account. If this feature is turned on the sort will be slower. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "unSortIcon": {
      "description": "/** Set to `true` to show the 'no sort' icon. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMultiSort": {
      "description": "/** Set to `true` to suppress multi-sort when the user shift-clicks a column header. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "alwaysMultiSort": {
      "description": "/** Set to `true` to always multi-sort when the user clicks a column header, regardless of key presses. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "multiSortKey": {
      "description": "/** Set to `'ctrl'` to have multi sorting work using the `Ctrl` (or `Command ⌘` for Mac) key. */",
      "type": { "returnType": "'ctrl'", "optional": true }
    },
    "suppressMaintainUnsortedOrder": {
      "description": "/** Set to `true` to suppress sorting of un-sorted data to match original row data. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "icons": {
      "description": "/** Icons to use inside the grid instead of the grid's default icons. */",
      "type": {
        "returnType": "{ [key: string]: Function | string; }",
        "optional": true
      }
    },
    "rowHeight": {
      "description": "/** Default row height in pixels. Default: `25` */",
      "type": { "returnType": "number", "optional": true }
    },
    "rowStyle": {
      "description": "/** The style properties to apply to all rows. Set to an object of key (style names) and values (style values) */",
      "type": { "returnType": "RowStyle", "optional": true }
    },
    "rowClass": {
      "description": "/** CSS class(es) for all rows. Provide either a string (class name) or array of strings (array of class names). */",
      "type": { "returnType": "string | string[]", "optional": true }
    },
    "rowClassRules": {
      "description": "/** Rules which can be applied to include certain CSS classes. */",
      "type": { "returnType": "RowClassRules<TData>", "optional": true }
    },
    "suppressRowHoverHighlight": {
      "description": "/** Set to `true` to not highlight rows by adding the `ag-row-hover` CSS class. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowTransform": {
      "description": "/** Uses CSS `top` instead of CSS `transform` for positioning rows. Useful if the transform function is causing issues such as used in row spanning. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "columnHoverHighlight": {
      "description": "/** Set to `true` to highlight columns by adding the `ag-column-hover` CSS class. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "deltaSort": { "type": { "returnType": "boolean", "optional": true } },
    "treeDataDisplayType": {
      "type": { "returnType": "TreeDataDisplayType", "optional": true }
    },
    "functionsPassive": {
      "description": "/** @deprecated v29.2 */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableGroupEdit": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "getContextMenuItems": {
      "description": "/** For customising the context menu. */",
      "type": { "returnType": "GetContextMenuItems<TData>", "optional": true }
    },
    "getMainMenuItems": {
      "description": "/** For customising the main 'column header' menu. */",
      "type": { "returnType": "GetMainMenuItems", "optional": true }
    },
    "postProcessPopup": {
      "description": "/** Allows user to process popups after they are created. Applications can use this if they want to, for example, reposition the popup. */",
      "type": {
        "arguments": { "params": "PostProcessPopupParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processCellForClipboard": {
      "description": "/** Allows you to process cells for the clipboard. Handy if for example you have `Date` objects that need to have a particular format if importing into Excel. */",
      "type": {
        "arguments": { "params": "ProcessCellForExportParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "processHeaderForClipboard": {
      "description": "/** Allows you to process header values for the clipboard.  */",
      "type": {
        "arguments": { "params": "ProcessHeaderForExportParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "processGroupHeaderForClipboard": {
      "description": "/** Allows you to process group header values for the clipboard.  */",
      "type": {
        "arguments": { "params": "ProcessGroupHeaderForExportParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "processCellFromClipboard": {
      "description": "/** Allows you to process cells from the clipboard. Handy if for example you have number fields, and want to block non-numbers from getting into the grid. */",
      "type": {
        "arguments": { "params": "ProcessCellForExportParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "sendToClipboard": {
      "description": "/** Allows you to get the data that would otherwise go to the clipboard. To be used when you want to control the 'copy to clipboard' operation yourself. */",
      "type": {
        "arguments": { "params": "SendToClipboardParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processDataFromClipboard": {
      "description": "/** Allows complete control of the paste operation, including cancelling the operation (so nothing happens) or replacing the data with other data. */",
      "type": {
        "arguments": { "params": "ProcessDataFromClipboardParams<TData>" },
        "returnType": "string[][] | null",
        "optional": true
      }
    },
    "isExternalFilterPresent": {
      "description": "/** Grid calls this method to know if an external filter is present. */",
      "type": {
        "arguments": { "params": "IsExternalFilterPresentParams<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "doesExternalFilterPass": {
      "description": "/** Should return `true` if external filter passes, otherwise `false`. */",
      "type": {
        "arguments": { "node": "IRowNode<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "getChartToolbarItems": {
      "description": "/** Callback to be used to customise the chart toolbar items. */",
      "type": { "returnType": "GetChartToolbarItems", "optional": true }
    },
    "createChartContainer": {
      "description": "/** Callback to enable displaying the chart in an alternative chart container. */",
      "type": {
        "arguments": { "params": "ChartRefParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "navigateToNextHeader": {
      "description": "/** Allows overriding the default behaviour for when user hits navigation (arrow) key when a header is focused. Return the next Header position to navigate to or `null` to stay on current header. */",
      "type": {
        "arguments": { "params": "NavigateToNextHeaderParams<TData>" },
        "returnType": "(HeaderPosition | null)",
        "optional": true
      }
    },
    "tabToNextHeader": {
      "description": "/** Allows overriding the default behaviour for when user hits `Tab` key when a header is focused. Return the next Header position to navigate to or `null` to stay on current header.  */",
      "type": {
        "arguments": { "params": "TabToNextHeaderParams<TData>" },
        "returnType": "(HeaderPosition | null)",
        "optional": true
      }
    },
    "navigateToNextCell": {
      "description": "/** Allows overriding the default behaviour for when user hits navigation (arrow) key when a cell is focused. Return the next Cell position to navigate to or `null` to stay on current cell.  */",
      "type": {
        "arguments": { "params": "NavigateToNextCellParams<TData>" },
        "returnType": "(CellPosition | null)",
        "optional": true
      }
    },
    "tabToNextCell": {
      "description": "/** Allows overriding the default behaviour for when user hits `Tab` key when a cell is focused. Return the next Cell position to navigate to or null to stay on current cell.  */",
      "type": {
        "arguments": { "params": "TabToNextCellParams<TData>" },
        "returnType": "(CellPosition | null)",
        "optional": true
      }
    },
    "localeTextFunc": {
      "description": "/** @deprecated v27.2 - Use `getLocaleText` instead. */",
      "type": {
        "arguments": {
          "key": "string",
          "defaultValue": "string",
          "variableValues?": "string[]"
        },
        "returnType": "string",
        "optional": true
      }
    },
    "getLocaleText": {
      "description": "/** A callback for localising text within the grid. */",
      "type": {
        "arguments": { "params": "GetLocaleTextParams<TData>" },
        "returnType": "string",
        "optional": true
      }
    },
    "getDocument": {
      "description": "/** Allows overriding what `document` is used. Currently used by Drag and Drop (may extend to other places in the future). Use this when you want the grid to use a different `document` than the one available on the global scope. This can happen if docking out components (something which Electron supports) */",
      "type": { "arguments": {}, "returnType": "Document", "optional": true }
    },
    "paginationNumberFormatter": {
      "description": "/** Allows user to format the numbers in the pagination panel, i.e. 'row count' and 'page number' labels. This is for pagination panel only, to format numbers inside the grid's cells (i.e. your data), then use `valueFormatter` in the column definitions. */",
      "type": {
        "arguments": { "params": "PaginationNumberFormatterParams<TData>" },
        "returnType": "string",
        "optional": true
      }
    },
    "groupRowAggNodes": {
      "description": "/** @deprecated v27.2 - Use `getGroupRowAgg` instead. */",
      "type": {
        "arguments": { "nodes": "IRowNode[]" },
        "returnType": "any",
        "optional": true
      }
    },
    "getGroupRowAgg": {
      "description": "/** Callback to use when you need access to more then the current column for aggregation. */",
      "type": {
        "arguments": { "params": "GetGroupRowAggParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "isGroupOpenByDefault": {
      "description": "/** (Client-side Row Model only) Allows groups to be open by default. */",
      "type": {
        "arguments": { "params": "IsGroupOpenByDefaultParams<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "initialGroupOrderComparator": {
      "description": "/** Allows default sorting of groups. */",
      "type": {
        "arguments": { "params": "InitialGroupOrderComparatorParams<TData>" },
        "returnType": "number",
        "optional": true
      }
    },
    "defaultGroupOrderComparator": {
      "description": "/** @deprecated v27.2 - Use `initialGroupOrderComparator` instead */",
      "type": {
        "arguments": { "nodeA": "IRowNode<TData>", "nodeB": "IRowNode<TData>" },
        "returnType": "number",
        "optional": true
      }
    },
    "processSecondaryColDef": {
      "description": "/** @deprecated v28 - Use `processPivotResultColDef` instead */",
      "type": {
        "arguments": { "colDef": "ColDef<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processSecondaryColGroupDef": {
      "description": "/** @deprecated v28 - Use `processPivotResultColGroupDef` instead */",
      "type": {
        "arguments": { "colGroupDef": "ColGroupDef<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processPivotResultColDef": {
      "description": "/** Callback to be used with pivoting, to allow changing the second column definition. */",
      "type": {
        "arguments": { "colDef": "ColDef<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processPivotResultColGroupDef": {
      "description": "/** Callback to be used with pivoting, to allow changing the second column group definition. */",
      "type": {
        "arguments": { "colGroupDef": "ColGroupDef<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "getDataPath": {
      "description": "/** Callback to be used when working with Tree Data when `treeData = true`. */",
      "type": { "returnType": "GetDataPath<TData>", "optional": true }
    },
    "getChildCount": {
      "description": "/** Allows setting the child count for a group row. */",
      "type": {
        "arguments": { "dataItem": "any" },
        "returnType": "number",
        "optional": true
      }
    },
    "getServerSideGroupLevelParams": {
      "description": "/** Allows providing different params for different levels of grouping. */",
      "type": {
        "arguments": { "params": "GetServerSideGroupLevelParamsParams" },
        "returnType": "ServerSideGroupLevelParams",
        "optional": true
      }
    },
    "getServerSideStoreParams": {
      "description": "/** @deprecated v28 Use `getServerSideGroupLevelParams` instead. */",
      "type": {
        "arguments": { "params": "GetServerSideGroupLevelParamsParams" },
        "returnType": "ServerSideGroupLevelParams",
        "optional": true
      }
    },
    "isServerSideGroupOpenByDefault": {
      "description": "/** Allows groups to be open by default. */",
      "type": {
        "arguments": { "params": "IsServerSideGroupOpenByDefaultParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "isApplyServerSideTransaction": {
      "description": "/** Allows cancelling transactions. */",
      "type": { "returnType": "IsApplyServerSideTransaction", "optional": true }
    },
    "isServerSideGroup": {
      "description": "/** SSRM Tree Data: Allows specifying which rows are expandable. */",
      "type": { "returnType": "IsServerSideGroup", "optional": true }
    },
    "getServerSideGroupKey": {
      "description": "/** SSRM Tree Data: Allows specifying group keys. */",
      "type": { "returnType": "GetServerSideGroupKey", "optional": true }
    },
    "getBusinessKeyForNode": {
      "description": "/** Return a business key for the node. If implemented, each row in the DOM will have an attribute `row-id='abc'` where `abc` is what you return as the business key.\n     * This is useful for automated testing, as it provides a way for your tool to identify rows based on unique business keys.\n     */",
      "type": {
        "arguments": { "node": "IRowNode<TData>" },
        "returnType": "string",
        "optional": true
      }
    },
    "getRowNodeId": {
      "description": "/** @deprecated v27.1 Use `getRowId` instead - however be aware, `getRowId()` will also set grid option `immutableData=true`\n     * Allows you to set the ID for a particular row node based on the data. */",
      "type": { "returnType": "GetRowNodeIdFunc<TData>", "optional": true }
    },
    "getRowId": {
      "description": "/** Allows setting the ID for a particular row node based on the data. */",
      "type": { "returnType": "GetRowIdFunc<TData>", "optional": true }
    },
    "resetRowDataOnUpdate": {
      "description": "/** When enabled, getRowId() callback is implemented and new Row Data is set, the grid will disregard all previous rows and treat the new Row Data as new data. As a consequence, all Row State (eg selection, rendered rows) will be reset.  Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "processRowPostCreate": {
      "description": "/** Allows you to process rows after they are created, so you can do final adding of custom attributes etc. */",
      "type": {
        "arguments": { "params": "ProcessRowParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "isRowSelectable": {
      "description": "/** Callback to be used to determine which rows are selectable. By default rows are selectable, so return `false` to make a row un-selectable. */",
      "type": { "returnType": "IsRowSelectable<TData>", "optional": true }
    },
    "isRowMaster": {
      "description": "/** Callback to be used with Master Detail to determine if a row should be a master row. If `false` is returned no detail row will exist for this row. */",
      "type": { "returnType": "IsRowMaster<TData>", "optional": true }
    },
    "fillOperation": {
      "description": "/** Callback to fill values instead of simply copying values or increasing number values using linear progression. */",
      "type": {
        "arguments": { "params": "FillOperationParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "postSort": {
      "description": "/** @deprecated v27.2 Use `postSortRows` instead */",
      "type": {
        "arguments": { "nodes": "IRowNode<TData>[]" },
        "returnType": "void",
        "optional": true
      }
    },
    "postSortRows": {
      "description": "/** Callback to perform additional sorting after the grid has sorted the rows. */",
      "type": {
        "arguments": { "params": "PostSortRowsParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "getRowStyle": {
      "description": "/** Callback version of property `rowStyle` to set style for each row individually. Function should return an object of CSS values or undefined for no styles. */",
      "type": {
        "arguments": { "params": "RowClassParams<TData>" },
        "returnType": "RowStyle | undefined",
        "optional": true
      }
    },
    "getRowClass": {
      "description": "/** Callback version of property `rowClass` to set class(es) for each row individually. Function should return either a string (class name), array of strings (array of class names) or undefined for no class. */",
      "type": {
        "arguments": { "params": "RowClassParams<TData>" },
        "returnType": "string | string[] | undefined",
        "optional": true
      }
    },
    "getRowHeight": {
      "description": "/** Callback version of property `rowHeight` to set height for each row individually. Function should return a positive number of pixels, or return `null`/`undefined` to use the default row height. */",
      "type": {
        "arguments": { "params": "RowHeightParams<TData>" },
        "returnType": "number | undefined | null",
        "optional": true
      }
    },
    "isFullWidthCell": {
      "description": "/** @deprecated v27.2 Use `isFullWidthRow` instead. */",
      "type": {
        "arguments": { "rowNode": "IRowNode<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "isFullWidthRow": {
      "description": "/** Tells the grid if this row should be rendered as full width. */",
      "type": {
        "arguments": { "params": "IsFullWidthRowParams<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "onToolPanelVisibleChanged": {
      "description": "/** The tool panel was hidden or shown. Use `api.isToolPanelShowing()` to get status. */",
      "type": {
        "arguments": { "event": "ToolPanelVisibleChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onToolPanelVisibleChanged" }
    },
    "toolPanelVisibleChanged": {
      "description": "/** The tool panel was hidden or shown. Use `api.isToolPanelShowing()` to get status. */",
      "type": {
        "arguments": { "event": "ToolPanelVisibleChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onToolPanelVisibleChanged" }
    },
    "onToolPanelSizeChanged": {
      "description": "/** The tool panel size has been changed. */",
      "type": {
        "arguments": { "event": "ToolPanelSizeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onToolPanelSizeChanged" }
    },
    "toolPanelSizeChanged": {
      "description": "/** The tool panel size has been changed. */",
      "type": {
        "arguments": { "event": "ToolPanelSizeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onToolPanelSizeChanged" }
    },
    "onPasteStart": {
      "description": "/** Paste operation has started. */",
      "type": {
        "arguments": { "event": "PasteStartEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteStart" }
    },
    "pasteStart": {
      "description": "/** Paste operation has started. */",
      "type": {
        "arguments": { "event": "PasteStartEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteStart" }
    },
    "onPasteEnd": {
      "description": "/** Paste operation has ended. */",
      "type": {
        "arguments": { "event": "PasteEndEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteEnd" }
    },
    "pasteEnd": {
      "description": "/** Paste operation has ended. */",
      "type": {
        "arguments": { "event": "PasteEndEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteEnd" }
    },
    "onColumnVisible": {
      "description": "/** A column, or group of columns, was hidden / shown. */",
      "type": {
        "arguments": { "event": "ColumnVisibleEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnVisible" }
    },
    "columnVisible": {
      "description": "/** A column, or group of columns, was hidden / shown. */",
      "type": {
        "arguments": { "event": "ColumnVisibleEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnVisible" }
    },
    "onColumnPinned": {
      "description": "/** A column, or group of columns, was pinned / unpinned. */",
      "type": {
        "arguments": { "event": "ColumnPinnedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPinned" }
    },
    "columnPinned": {
      "description": "/** A column, or group of columns, was pinned / unpinned. */",
      "type": {
        "arguments": { "event": "ColumnPinnedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPinned" }
    },
    "onColumnResized": {
      "description": "/** A column was resized. */",
      "type": {
        "arguments": { "event": "ColumnResizedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnResized" }
    },
    "columnResized": {
      "description": "/** A column was resized. */",
      "type": {
        "arguments": { "event": "ColumnResizedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnResized" }
    },
    "onColumnMoved": {
      "description": "/** A column was moved. */",
      "type": {
        "arguments": { "event": "ColumnMovedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnMoved" }
    },
    "columnMoved": {
      "description": "/** A column was moved. */",
      "type": {
        "arguments": { "event": "ColumnMovedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnMoved" }
    },
    "onColumnValueChanged": {
      "description": "/** A value column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChanged" }
    },
    "columnValueChanged": {
      "description": "/** A value column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChanged" }
    },
    "onColumnPivotModeChanged": {
      "description": "/** The pivot mode flag was changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotModeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotModeChanged" }
    },
    "columnPivotModeChanged": {
      "description": "/** The pivot mode flag was changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotModeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotModeChanged" }
    },
    "onColumnPivotChanged": {
      "description": "/** A pivot column was added, removed or order changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChanged" }
    },
    "columnPivotChanged": {
      "description": "/** A pivot column was added, removed or order changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChanged" }
    },
    "onColumnGroupOpened": {
      "description": "/** A column group was opened / closed. */",
      "type": {
        "arguments": { "event": "ColumnGroupOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnGroupOpened" }
    },
    "columnGroupOpened": {
      "description": "/** A column group was opened / closed. */",
      "type": {
        "arguments": { "event": "ColumnGroupOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnGroupOpened" }
    },
    "onNewColumnsLoaded": {
      "description": "/** User set new columns. */",
      "type": {
        "arguments": { "event": "NewColumnsLoadedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onNewColumnsLoaded" }
    },
    "newColumnsLoaded": {
      "description": "/** User set new columns. */",
      "type": {
        "arguments": { "event": "NewColumnsLoadedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onNewColumnsLoaded" }
    },
    "onGridColumnsChanged": {
      "description": "/** The list of grid columns changed. */",
      "type": {
        "arguments": { "event": "GridColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridColumnsChanged" }
    },
    "gridColumnsChanged": {
      "description": "/** The list of grid columns changed. */",
      "type": {
        "arguments": { "event": "GridColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridColumnsChanged" }
    },
    "onDisplayedColumnsChanged": {
      "description": "/** The list of displayed columns changed. This can result from columns open / close, column move, pivot, group, etc. */",
      "type": {
        "arguments": { "event": "DisplayedColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDisplayedColumnsChanged" }
    },
    "displayedColumnsChanged": {
      "description": "/** The list of displayed columns changed. This can result from columns open / close, column move, pivot, group, etc. */",
      "type": {
        "arguments": { "event": "DisplayedColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDisplayedColumnsChanged" }
    },
    "onVirtualColumnsChanged": {
      "description": "/** The list of rendered columns changed (only columns in the visible scrolled viewport are rendered by default). */",
      "type": {
        "arguments": { "event": "VirtualColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualColumnsChanged" }
    },
    "virtualColumnsChanged": {
      "description": "/** The list of rendered columns changed (only columns in the visible scrolled viewport are rendered by default). */",
      "type": {
        "arguments": { "event": "VirtualColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualColumnsChanged" }
    },
    "onColumnEverythingChanged": {
      "description": "/** Shotgun - gets called when either a) new columns are set or b) `columnApi.applyColumnState()` is used, so everything has changed. */",
      "type": {
        "arguments": { "event": "ColumnEverythingChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnEverythingChanged" }
    },
    "columnEverythingChanged": {
      "description": "/** Shotgun - gets called when either a) new columns are set or b) `columnApi.applyColumnState()` is used, so everything has changed. */",
      "type": {
        "arguments": { "event": "ColumnEverythingChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnEverythingChanged" }
    },
    "onComponentStateChanged": {
      "description": "/** Only used by Angular, React and VueJS AG Grid components (not used if doing plain JavaScript).\n     * If the grid receives changes due to bound properties, this event fires after the grid has finished processing the change.\n     */",
      "type": {
        "arguments": { "event": "ComponentStateChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onComponentStateChanged" }
    },
    "componentStateChanged": {
      "description": "/** Only used by Angular, React and VueJS AG Grid components (not used if doing plain JavaScript).\n     * If the grid receives changes due to bound properties, this event fires after the grid has finished processing the change.\n     */",
      "type": {
        "arguments": { "event": "ComponentStateChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onComponentStateChanged" }
    },
    "onCellValueChanged": {
      "description": "/** Value has changed after editing (this event will not fire if editing was cancelled, eg ESC was pressed) or\n     *  if cell value has changed as a result of cut, paste, cell clear (pressing Delete key),\n     * fill handle, copy range down, undo and redo.\n    */",
      "type": {
        "arguments": { "event": "CellValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellValueChanged" }
    },
    "cellValueChanged": {
      "description": "/** Value has changed after editing (this event will not fire if editing was cancelled, eg ESC was pressed) or\n     *  if cell value has changed as a result of cut, paste, cell clear (pressing Delete key),\n     * fill handle, copy range down, undo and redo.\n    */",
      "type": {
        "arguments": { "event": "CellValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellValueChanged" }
    },
    "onCellEditRequest": {
      "description": "/** Value has changed after editing. Only fires when `readOnlyEdit=true`. */",
      "type": {
        "arguments": { "event": "CellEditRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditRequest" }
    },
    "cellEditRequest": {
      "description": "/** Value has changed after editing. Only fires when `readOnlyEdit=true`. */",
      "type": {
        "arguments": { "event": "CellEditRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditRequest" }
    },
    "onRowValueChanged": {
      "description": "/** A cell's value within a row has changed. This event corresponds to Full Row Editing only. */",
      "type": {
        "arguments": { "event": "RowValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowValueChanged" }
    },
    "rowValueChanged": {
      "description": "/** A cell's value within a row has changed. This event corresponds to Full Row Editing only. */",
      "type": {
        "arguments": { "event": "RowValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowValueChanged" }
    },
    "onCellEditingStarted": {
      "description": "/** Editing a cell has started. */",
      "type": {
        "arguments": { "event": "CellEditingStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStarted" }
    },
    "cellEditingStarted": {
      "description": "/** Editing a cell has started. */",
      "type": {
        "arguments": { "event": "CellEditingStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStarted" }
    },
    "onCellEditingStopped": {
      "description": "/** Editing a cell has stopped. */",
      "type": {
        "arguments": { "event": "CellEditingStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStopped" }
    },
    "cellEditingStopped": {
      "description": "/** Editing a cell has stopped. */",
      "type": {
        "arguments": { "event": "CellEditingStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStopped" }
    },
    "onRowEditingStarted": {
      "description": "/** Editing a row has started (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStarted` will be fired for each individual cell. Only fires when doing Full Row Editing. */",
      "type": {
        "arguments": { "event": "RowEditingStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStarted" }
    },
    "rowEditingStarted": {
      "description": "/** Editing a row has started (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStarted` will be fired for each individual cell. Only fires when doing Full Row Editing. */",
      "type": {
        "arguments": { "event": "RowEditingStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStarted" }
    },
    "onRowEditingStopped": {
      "description": "/** Editing a row has stopped (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStopped` will be fired for each individual cell. Only fires when doing Full Row Editing. */",
      "type": {
        "arguments": { "event": "RowEditingStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStopped" }
    },
    "rowEditingStopped": {
      "description": "/** Editing a row has stopped (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStopped` will be fired for each individual cell. Only fires when doing Full Row Editing. */",
      "type": {
        "arguments": { "event": "RowEditingStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStopped" }
    },
    "onUndoStarted": {
      "description": "/** Undo operation has started. */",
      "type": {
        "arguments": { "event": "UndoStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onUndoStarted" }
    },
    "undoStarted": {
      "description": "/** Undo operation has started. */",
      "type": {
        "arguments": { "event": "UndoStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onUndoStarted" }
    },
    "onUndoEnded": {
      "description": "/** Undo operation has ended. */",
      "type": {
        "arguments": { "event": "UndoEndedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onUndoEnded" }
    },
    "undoEnded": {
      "description": "/** Undo operation has ended. */",
      "type": {
        "arguments": { "event": "UndoEndedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onUndoEnded" }
    },
    "onRedoStarted": {
      "description": "/** Redo operation has started. */",
      "type": {
        "arguments": { "event": "RedoStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRedoStarted" }
    },
    "redoStarted": {
      "description": "/** Redo operation has started. */",
      "type": {
        "arguments": { "event": "RedoStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRedoStarted" }
    },
    "onRedoEnded": {
      "description": "/** Redo operation has ended. */",
      "type": {
        "arguments": { "event": "RedoEndedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRedoEnded" }
    },
    "redoEnded": {
      "description": "/** Redo operation has ended. */",
      "type": {
        "arguments": { "event": "RedoEndedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRedoEnded" }
    },
    "onFilterOpened": {
      "description": "/** Filter has been opened. */",
      "type": {
        "arguments": { "event": "FilterOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterOpened" }
    },
    "filterOpened": {
      "description": "/** Filter has been opened. */",
      "type": {
        "arguments": { "event": "FilterOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterOpened" }
    },
    "onFilterChanged": {
      "description": "/** Filter has been modified and applied. */",
      "type": {
        "arguments": { "event": "FilterChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterChanged" }
    },
    "filterChanged": {
      "description": "/** Filter has been modified and applied. */",
      "type": {
        "arguments": { "event": "FilterChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterChanged" }
    },
    "onFilterModified": {
      "description": "/** Filter was modified but not applied. Used when filters have 'Apply' buttons. */",
      "type": {
        "arguments": { "event": "FilterModifiedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterModified" }
    },
    "filterModified": {
      "description": "/** Filter was modified but not applied. Used when filters have 'Apply' buttons. */",
      "type": {
        "arguments": { "event": "FilterModifiedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterModified" }
    },
    "onChartCreated": {
      "description": "/** A chart has been created. */",
      "type": {
        "arguments": { "event": "ChartCreated<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartCreated" }
    },
    "chartCreated": {
      "description": "/** A chart has been created. */",
      "type": {
        "arguments": { "event": "ChartCreated<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartCreated" }
    },
    "onChartRangeSelectionChanged": {
      "description": "/** The data range for the chart has been changed. */",
      "type": {
        "arguments": { "event": "ChartRangeSelectionChanged<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartRangeSelectionChanged" }
    },
    "chartRangeSelectionChanged": {
      "description": "/** The data range for the chart has been changed. */",
      "type": {
        "arguments": { "event": "ChartRangeSelectionChanged<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartRangeSelectionChanged" }
    },
    "onChartOptionsChanged": {
      "description": "/** Formatting changes have been made by users through the Format Panel. */",
      "type": {
        "arguments": { "event": "ChartOptionsChanged<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartOptionsChanged" }
    },
    "chartOptionsChanged": {
      "description": "/** Formatting changes have been made by users through the Format Panel. */",
      "type": {
        "arguments": { "event": "ChartOptionsChanged<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartOptionsChanged" }
    },
    "onChartDestroyed": {
      "description": "/** A chart has been destroyed. */",
      "type": {
        "arguments": { "event": "ChartDestroyed<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartDestroyed" }
    },
    "chartDestroyed": {
      "description": "/** A chart has been destroyed. */",
      "type": {
        "arguments": { "event": "ChartDestroyed<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartDestroyed" }
    },
    "onCellKeyDown": {
      "description": "/** DOM event `keyDown` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyDownEvent<TData> | FullWidthCellKeyDownEvent<TData>"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyDown" }
    },
    "cellKeyDown": {
      "description": "/** DOM event `keyDown` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyDownEvent<TData> | FullWidthCellKeyDownEvent<TData>"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyDown" }
    },
    "onCellKeyPress": {
      "description": "/** DOM event `keyPress` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyPressEvent<TData> | FullWidthCellKeyPressEvent<TData>"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyPress" }
    },
    "cellKeyPress": {
      "description": "/** DOM event `keyPress` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyPressEvent<TData> | FullWidthCellKeyPressEvent<TData>"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyPress" }
    },
    "onGridReady": {
      "description": "/** The grid has initialised and is ready for most api calls, but may not be fully rendered yet  */",
      "type": {
        "arguments": { "event": "GridReadyEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridReady" }
    },
    "gridReady": {
      "description": "/** The grid has initialised and is ready for most api calls, but may not be fully rendered yet  */",
      "type": {
        "arguments": { "event": "GridReadyEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridReady" }
    },
    "onFirstDataRendered": {
      "description": "/** Fired the first time data is rendered into the grid. Use this event if you want to auto resize columns based on their contents */",
      "type": {
        "arguments": { "event": "FirstDataRenderedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFirstDataRendered" }
    },
    "firstDataRendered": {
      "description": "/** Fired the first time data is rendered into the grid. Use this event if you want to auto resize columns based on their contents */",
      "type": {
        "arguments": { "event": "FirstDataRenderedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFirstDataRendered" }
    },
    "onGridSizeChanged": {
      "description": "/** The size of the grid `div` has changed. In other words, the grid was resized. */",
      "type": {
        "arguments": { "event": "GridSizeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridSizeChanged" }
    },
    "gridSizeChanged": {
      "description": "/** The size of the grid `div` has changed. In other words, the grid was resized. */",
      "type": {
        "arguments": { "event": "GridSizeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridSizeChanged" }
    },
    "onModelUpdated": {
      "description": "/** Displayed rows have changed. Triggered after sort, filter or tree expand / collapse events. */",
      "type": {
        "arguments": { "event": "ModelUpdatedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onModelUpdated" }
    },
    "modelUpdated": {
      "description": "/** Displayed rows have changed. Triggered after sort, filter or tree expand / collapse events. */",
      "type": {
        "arguments": { "event": "ModelUpdatedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onModelUpdated" }
    },
    "onVirtualRowRemoved": {
      "description": "/** A row was removed from the DOM, for any reason. Use to clean up resources (if any) used by the row. */",
      "type": {
        "arguments": { "event": "VirtualRowRemovedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualRowRemoved" }
    },
    "virtualRowRemoved": {
      "description": "/** A row was removed from the DOM, for any reason. Use to clean up resources (if any) used by the row. */",
      "type": {
        "arguments": { "event": "VirtualRowRemovedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualRowRemoved" }
    },
    "onViewportChanged": {
      "description": "/** Which rows are rendered in the DOM has changed. */",
      "type": {
        "arguments": { "event": "ViewportChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onViewportChanged" }
    },
    "viewportChanged": {
      "description": "/** Which rows are rendered in the DOM has changed. */",
      "type": {
        "arguments": { "event": "ViewportChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onViewportChanged" }
    },
    "onBodyScroll": {
      "description": "/** The body was scrolled horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScroll" }
    },
    "bodyScroll": {
      "description": "/** The body was scrolled horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScroll" }
    },
    "onBodyScrollEnd": {
      "description": "/** Main body of the grid has stopped scrolling, either horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEndEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScrollEnd" }
    },
    "bodyScrollEnd": {
      "description": "/** Main body of the grid has stopped scrolling, either horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEndEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScrollEnd" }
    },
    "onDragStarted": {
      "description": "/** When dragging starts. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStarted" }
    },
    "dragStarted": {
      "description": "/** When dragging starts. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStarted" }
    },
    "onDragStopped": {
      "description": "/** When dragging stops. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStopped" }
    },
    "dragStopped": {
      "description": "/** When dragging stops. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStopped" }
    },
    "onPaginationChanged": {
      "description": "/** Triggered every time the paging state changes. Some of the most common scenarios for this event to be triggered are:\n     *\n     *  - The page size changes.\n     *  - The current shown page is changed.\n     *  - New data is loaded onto the grid.\n     */",
      "type": {
        "arguments": { "event": "PaginationChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPaginationChanged" }
    },
    "paginationChanged": {
      "description": "/** Triggered every time the paging state changes. Some of the most common scenarios for this event to be triggered are:\n     *\n     *  - The page size changes.\n     *  - The current shown page is changed.\n     *  - New data is loaded onto the grid.\n     */",
      "type": {
        "arguments": { "event": "PaginationChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPaginationChanged" }
    },
    "onRowDragEnter": {
      "description": "/** A drag has started, or dragging was already started and the mouse has re-entered the grid having previously left the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnter" }
    },
    "rowDragEnter": {
      "description": "/** A drag has started, or dragging was already started and the mouse has re-entered the grid having previously left the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnter" }
    },
    "onRowDragMove": {
      "description": "/** The mouse has moved while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragMove" }
    },
    "rowDragMove": {
      "description": "/** The mouse has moved while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragMove" }
    },
    "onRowDragLeave": {
      "description": "/** The mouse has left the grid while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragLeave" }
    },
    "rowDragLeave": {
      "description": "/** The mouse has left the grid while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragLeave" }
    },
    "onRowDragEnd": {
      "description": "/** The drag has finished over the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnd" }
    },
    "rowDragEnd": {
      "description": "/** The drag has finished over the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnd" }
    },
    "onColumnRowGroupChanged": {
      "description": "/** A row group column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnRowGroupChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChanged" }
    },
    "columnRowGroupChanged": {
      "description": "/** A row group column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnRowGroupChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChanged" }
    },
    "onRowGroupOpened": {
      "description": "/** A row group was opened or closed. */",
      "type": {
        "arguments": { "event": "RowGroupOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowGroupOpened" }
    },
    "rowGroupOpened": {
      "description": "/** A row group was opened or closed. */",
      "type": {
        "arguments": { "event": "RowGroupOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowGroupOpened" }
    },
    "onExpandOrCollapseAll": {
      "description": "/** Fired when calling either of the API methods `expandAll()` or `collapseAll()`. */",
      "type": {
        "arguments": { "event": "ExpandCollapseAllEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onExpandOrCollapseAll" }
    },
    "expandOrCollapseAll": {
      "description": "/** Fired when calling either of the API methods `expandAll()` or `collapseAll()`. */",
      "type": {
        "arguments": { "event": "ExpandCollapseAllEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onExpandOrCollapseAll" }
    },
    "onPinnedRowDataChanged": {
      "description": "/** The client has set new pinned row data into the grid. */",
      "type": {
        "arguments": { "event": "PinnedRowDataChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPinnedRowDataChanged" }
    },
    "pinnedRowDataChanged": {
      "description": "/** The client has set new pinned row data into the grid. */",
      "type": {
        "arguments": { "event": "PinnedRowDataChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPinnedRowDataChanged" }
    },
    "onRowDataChanged": {
      "description": "/** @deprecated v28 No longer fired, use onRowDataUpdated instead */",
      "type": {
        "arguments": { "event": "RowDataChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataChanged" }
    },
    "rowDataChanged": {
      "description": "/** @deprecated v28 No longer fired, use onRowDataUpdated instead */",
      "type": {
        "arguments": { "event": "RowDataChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataChanged" }
    },
    "onRowDataUpdated": {
      "description": "/** The client has updated data for the grid by either a) setting new Row Data or b) Applying a Row Transaction. */",
      "type": {
        "arguments": { "event": "RowDataUpdatedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataUpdated" }
    },
    "rowDataUpdated": {
      "description": "/** The client has updated data for the grid by either a) setting new Row Data or b) Applying a Row Transaction. */",
      "type": {
        "arguments": { "event": "RowDataUpdatedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataUpdated" }
    },
    "onAsyncTransactionsFlushed": {
      "description": "/** Async transactions have been applied. Contains a list of all transaction results. */",
      "type": {
        "arguments": { "event": "AsyncTransactionsFlushed<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onAsyncTransactionsFlushed" }
    },
    "asyncTransactionsFlushed": {
      "description": "/** Async transactions have been applied. Contains a list of all transaction results. */",
      "type": {
        "arguments": { "event": "AsyncTransactionsFlushed<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onAsyncTransactionsFlushed" }
    },
    "onStoreRefreshed": {
      "description": "/** A server side store has finished refreshing. */",
      "type": {
        "arguments": { "event": "StoreRefreshedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onStoreRefreshed" }
    },
    "storeRefreshed": {
      "description": "/** A server side store has finished refreshing. */",
      "type": {
        "arguments": { "event": "StoreRefreshedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onStoreRefreshed" }
    },
    "onCellClicked": {
      "description": "/** Cell is clicked. */",
      "type": {
        "arguments": { "event": "CellClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellClicked" }
    },
    "cellClicked": {
      "description": "/** Cell is clicked. */",
      "type": {
        "arguments": { "event": "CellClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellClicked" }
    },
    "onCellDoubleClicked": {
      "description": "/** Cell is double clicked. */",
      "type": {
        "arguments": { "event": "CellDoubleClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellDoubleClicked" }
    },
    "cellDoubleClicked": {
      "description": "/** Cell is double clicked. */",
      "type": {
        "arguments": { "event": "CellDoubleClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellDoubleClicked" }
    },
    "onCellFocused": {
      "description": "/** Cell is focused. */",
      "type": {
        "arguments": { "event": "CellFocusedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellFocused" }
    },
    "cellFocused": {
      "description": "/** Cell is focused. */",
      "type": {
        "arguments": { "event": "CellFocusedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellFocused" }
    },
    "onCellMouseOver": {
      "description": "/** Mouse entered cell. */",
      "type": {
        "arguments": { "event": "CellMouseOverEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOver" }
    },
    "cellMouseOver": {
      "description": "/** Mouse entered cell. */",
      "type": {
        "arguments": { "event": "CellMouseOverEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOver" }
    },
    "onCellMouseOut": {
      "description": "/** Mouse left cell. */",
      "type": {
        "arguments": { "event": "CellMouseOutEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOut" }
    },
    "cellMouseOut": {
      "description": "/** Mouse left cell. */",
      "type": {
        "arguments": { "event": "CellMouseOutEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOut" }
    },
    "onCellMouseDown": {
      "description": "/** Mouse down on cell. */",
      "type": {
        "arguments": { "event": "CellMouseDownEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseDown" }
    },
    "cellMouseDown": {
      "description": "/** Mouse down on cell. */",
      "type": {
        "arguments": { "event": "CellMouseDownEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseDown" }
    },
    "onRowClicked": {
      "description": "/** Row is clicked. */",
      "type": {
        "arguments": { "event": "RowClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowClicked" }
    },
    "rowClicked": {
      "description": "/** Row is clicked. */",
      "type": {
        "arguments": { "event": "RowClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowClicked" }
    },
    "onRowDoubleClicked": {
      "description": "/** Row is double clicked. */",
      "type": {
        "arguments": { "event": "RowDoubleClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDoubleClicked" }
    },
    "rowDoubleClicked": {
      "description": "/** Row is double clicked. */",
      "type": {
        "arguments": { "event": "RowDoubleClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDoubleClicked" }
    },
    "onRowSelected": {
      "description": "/** Row is selected or deselected. The event contains the node in question, so call the node's `isSelected()` method to see if it was just selected or deselected. */",
      "type": {
        "arguments": { "event": "RowSelectedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowSelected" }
    },
    "rowSelected": {
      "description": "/** Row is selected or deselected. The event contains the node in question, so call the node's `isSelected()` method to see if it was just selected or deselected. */",
      "type": {
        "arguments": { "event": "RowSelectedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowSelected" }
    },
    "onSelectionChanged": {
      "description": "/** Row selection is changed. Use the grid API `getSelectedNodes()` or `getSelectedRows()` to get the new list of selected nodes / row data. */",
      "type": {
        "arguments": { "event": "SelectionChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSelectionChanged" }
    },
    "selectionChanged": {
      "description": "/** Row selection is changed. Use the grid API `getSelectedNodes()` or `getSelectedRows()` to get the new list of selected nodes / row data. */",
      "type": {
        "arguments": { "event": "SelectionChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSelectionChanged" }
    },
    "onCellContextMenu": {
      "description": "/** Cell is right clicked. */",
      "type": {
        "arguments": { "event": "CellContextMenuEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellContextMenu" }
    },
    "cellContextMenu": {
      "description": "/** Cell is right clicked. */",
      "type": {
        "arguments": { "event": "CellContextMenuEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellContextMenu" }
    },
    "onRangeSelectionChanged": {
      "description": "/** A change to range selection has occurred. */",
      "type": {
        "arguments": { "event": "RangeSelectionChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRangeSelectionChanged" }
    },
    "rangeSelectionChanged": {
      "description": "/** A change to range selection has occurred. */",
      "type": {
        "arguments": { "event": "RangeSelectionChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRangeSelectionChanged" }
    },
    "onSortChanged": {
      "description": "/** Sort has changed. The grid also listens for this and updates the model. */",
      "type": {
        "arguments": { "event": "SortChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSortChanged" }
    },
    "sortChanged": {
      "description": "/** Sort has changed. The grid also listens for this and updates the model. */",
      "type": {
        "arguments": { "event": "SortChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSortChanged" }
    },
    "onColumnRowGroupChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnRowGroupChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChangeRequest" }
    },
    "columnRowGroupChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnRowGroupChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChangeRequest" }
    },
    "onColumnPivotChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnPivotChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChangeRequest" }
    },
    "columnPivotChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnPivotChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChangeRequest" }
    },
    "onColumnValueChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnValueChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChangeRequest" }
    },
    "columnValueChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnValueChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChangeRequest" }
    },
    "onColumnAggFuncChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnAggFuncChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnAggFuncChangeRequest" }
    },
    "columnAggFuncChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnAggFuncChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnAggFuncChangeRequest" }
    },
    "api": {
      "description": "/** The Grid Api for interacting with the grid.\n     * Set by the grid on init, set to null on destroy.\n     */",
      "type": { "returnType": "GridApi<TData> | null", "optional": true }
    },
    "columnApi": {
      "description": "/** The Column Api for interacting with the grid columns.\n     * Set by the grid on init, set to null on destroy.\n     */",
      "type": { "returnType": "ColumnApi | null", "optional": true }
    }
  },
  "AgReactUiProps": {
    "meta": { "typeParams": ["TData = any"] },
    "gridOptions": {
      "type": { "returnType": "GridOptions<TData>", "optional": true }
    },
    "modules": { "type": { "returnType": "Module[]", "optional": true } },
    "containerStyle": { "type": { "returnType": "any", "optional": true } },
    "className": { "type": { "returnType": "string", "optional": true } },
    "setGridApi": {
      "type": {
        "arguments": { "gridApi": "GridApi<TData>", "columnApi": "ColumnApi" },
        "returnType": "void",
        "optional": true
      }
    },
    "componentWrappingElement": {
      "type": { "returnType": "string", "optional": true }
    },
    "maxComponentCreationTimeMs": {
      "type": { "returnType": "number", "optional": true }
    },
    "rowDataChangeDetectionStrategy": {
      "description": "/** @deprecated v29 ChangeDetectionStrategyType has been deprecated. IdentityCheck will always be used now for a more consistent approach. */",
      "type": { "returnType": "ChangeDetectionStrategyType", "optional": true }
    },
    "children": { "type": { "returnType": "any", "optional": true } },
    "statusBar": {
      "description": "/** Specifies the status bar components to use in the status bar. */",
      "type": {
        "returnType": "{ statusPanels: StatusPanelDef[]; }",
        "optional": true
      }
    },
    "sideBar": {
      "description": "/** Specifies the side bar components. */",
      "type": {
        "returnType": "SideBarDef | string | string[] | boolean | null",
        "optional": true
      }
    },
    "suppressContextMenu": {
      "description": "/** Set to `true` to not show the context menu. Use if you don't want to use the default 'right click' context menu. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "preventDefaultOnContextMenu": {
      "description": "/** When using `suppressContextMenu`, you can use the `onCellContextMenu` function to provide your own code to handle cell `contextmenu` events.\n     * This flag is useful to prevent the browser from showing its default context menu.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "allowContextMenuWithControlKey": {
      "description": "/** Allows context menu to show, even when `Ctrl` key is held down. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMenuHide": {
      "description": "/** Set to `true` to always show the column menu button, rather than only showing when the mouse is over the column header. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableBrowserTooltips": {
      "description": "/** Set to `true` to use the browser's default tooltip instead of using the grid's Tooltip Component. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "tooltipShowDelay": {
      "description": "/** The delay in milliseconds that it takes for tooltips to show up once an element is hovered over.\n     * **Note:** This property does not work if `enableBrowserTooltips` is `true`.\n     * Default: `2000`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "tooltipHideDelay": {
      "description": "/** The delay in milliseconds that it takes for tooltips to hide once they have been displayed.\n     * **Note:** This property does not work if `enableBrowserTooltips` is `true`.\n     * Default: `10000`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "tooltipMouseTrack": {
      "description": "/** Set to `true` to have tooltips follow the cursor once they are displayed. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "popupParent": {
      "description": "/** DOM element to use as the popup parent for grid popups (context menu, column menu etc). */",
      "type": { "returnType": "HTMLElement | null", "optional": true }
    },
    "copyHeadersToClipboard": {
      "description": "/** Set to `true` to also include headers when copying to clipboard using `Ctrl + C` clipboard. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "copyGroupHeadersToClipboard": {
      "description": "/** Set to `true` to also include group headers when copying to clipboard using `Ctrl + C` clipboard. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "clipboardDeliminator": {
      "description": "/** @deprecated v27.1 Use `clipboardDelimiter` */",
      "type": { "returnType": "string", "optional": true }
    },
    "clipboardDelimiter": {
      "description": "/** Specify the delimiter to use when copying to clipboard.\n     * Default: `\\t`\n    */",
      "type": { "returnType": "string", "optional": true }
    },
    "suppressCopyRowsToClipboard": {
      "description": "/** Set to `true` to copy the cell range or focused cell to the clipboard and never the selected rows. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressCopySingleCellRanges": {
      "description": "/** Set to `true` to copy rows instead of ranges when a range with only a single cell is selected. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressLastEmptyLineOnPaste": {
      "description": "/** Set to `true` to work around a bug with Excel (Windows) that adds an extra empty line at the end of ranges copied to the clipboard. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressClipboardPaste": {
      "description": "/** Set to `true` to turn off paste operations within the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressClipboardApi": {
      "description": "/** Set to `true` to stop the grid trying to use the Clipboard API, if it is blocked, and immediately fallback to the workaround. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressCutToClipboard": {
      "description": "/** Set to `true` to block **cut** operations within the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "columnDefs": {
      "description": "/** Array of Column / Column Group definitions. */",
      "type": {
        "returnType": "(ColDef<TData> | ColGroupDef<TData>)[] | null",
        "optional": true
      }
    },
    "defaultColDef": {
      "description": "/** A default column definition. Items defined in the actual column definitions get precedence. */",
      "type": { "returnType": "ColDef<TData>", "optional": true }
    },
    "defaultColGroupDef": {
      "description": "/** A default column group definition. All column group definitions will use these properties. Items defined in the actual column group definition get precedence. */",
      "type": { "returnType": "Partial<ColGroupDef<TData>>", "optional": true }
    },
    "columnTypes": {
      "description": "/** An object map of custom column types which contain groups of properties that column definitions can inherit by referencing in their `type` property. */",
      "type": {
        "returnType": "{ [key: string]: ColDef<TData>; }",
        "optional": true
      }
    },
    "maintainColumnOrder": {
      "description": "/** Keeps the order of Columns maintained after new Column Definitions are updated. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressFieldDotNotation": {
      "description": "/** If `true`, then dots in field names (e.g. `'address.firstLine'`) are not treated as deep references. Allows you to use dots in your field name if you prefer. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "headerHeight": {
      "description": "/** The height in pixels for the row containing the column label header. If not specified, it uses the theme value of `header-height`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "groupHeaderHeight": {
      "description": "/** The height in pixels for the rows containing header column groups. If not specified, it uses `headerHeight`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "floatingFiltersHeight": {
      "description": "/** The height in pixels for the row containing the floating filters. If not specified, it uses the theme value of `header-height`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "pivotHeaderHeight": {
      "description": "/** The height in pixels for the row containing the columns when in pivot mode. If not specified, it uses `headerHeight`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "pivotGroupHeaderHeight": {
      "description": "/** The height in pixels for the row containing header column groups when in pivot mode. If not specified, it uses `groupHeaderHeight`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "allowDragFromColumnsToolPanel": {
      "description": "/** Allow reordering and pinning columns by dragging columns from the Columns Tool Panel to the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMovableColumns": {
      "description": "/** Set to `true` to suppress column moving, i.e. to make the columns fixed position. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressColumnMoveAnimation": {
      "description": "/** If `true`, the `ag-column-moving` class is not added to the grid while columns are moving. In the default themes, this results in no animation when moving columns. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressDragLeaveHidesColumns": {
      "description": "/** If `true`, when you drag a column out of the grid (e.g. to the group zone) the column is not hidden. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowGroupHidesColumns": {
      "description": "/** If `true`, when you drag a column into a row group panel the column is not hidden. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "colResizeDefault": {
      "description": "/** Set to `'shift'` to have shift-resize as the default resize operation (same as user holding down `Shift` while resizing). */",
      "type": { "returnType": "'shift'", "optional": true }
    },
    "suppressAutoSize": {
      "description": "/** Suppresses auto-sizing columns for columns. In other words, double clicking a column's header's edge will not auto-size. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "autoSizePadding": {
      "description": "/** Number of pixels to add to a column width after the [auto-sizing](/column-sizing/#auto-size-columns) calculation.\n     * Set this if you want to add extra room to accommodate (for example) sort icons, or some other dynamic nature of the header.\n     * Default: `20`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "skipHeaderOnAutoSize": {
      "description": "/** Set this to `true` to skip the `headerName` when `autoSize` is called by default. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "components": {
      "description": "/** A map of component names to components. */",
      "type": { "returnType": "{ [p: string]: any; }", "optional": true }
    },
    "frameworkComponents": {
      "description": "/** @deprecated As of v27, use `components` for framework components too. */",
      "type": {
        "returnType": "{ [p: string]: { new(): any; }; } | any",
        "optional": true
      }
    },
    "reactUi": {
      "description": "/** @deprecated React UI is enabled by default. Use suppressReactUi=true to turn it off. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressReactUi": {
      "description": "/** @deprecated Set to true to enable the experimental React UI. Works with React framework only.\n     * It is planned the next major release of the grid will drop support of the legacy React engine,\n     * hence this property is deprecated as will be removed in the next major release. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "editType": {
      "description": "/** Set to `'fullRow'` to enable Full Row Editing. Otherwise leave blank to edit one cell at a time. */",
      "type": { "returnType": "'fullRow'", "optional": true }
    },
    "singleClickEdit": {
      "description": "/** Set to `true` to enable Single Click Editing for cells, to start editing with a single click. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressClickEdit": {
      "description": "/** Set to `true` so that neither single nor double click starts editing. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "readOnlyEdit": {
      "description": "/** Set to `true` to stop the grid updating data after `Edit`, `Clipboard` and `Fill Handle` operations. When this is set, it is intended the application will update the data, eg in an external immutable store, and then pass the new dataset to the grid. <br />**Note:** `rowNode.setDataValue()` does not update the value of the cell when this is `True`, it fires `onCellEditRequest` instead. Default: `false`.     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "stopEditingWhenCellsLoseFocus": {
      "description": "/** Set this to `true` to stop cell editing when grid loses focus.\n     * The default is that the grid stays editing until focus goes onto another cell.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enterMovesDown": {
      "description": "/** Set to `true` along with `enterMovesDownAfterEdit` to have Excel-style behaviour for the `Enter` key.\n     * i.e. pressing the `Enter` key will move down to the cell beneath.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enterMovesDownAfterEdit": {
      "description": "/** Set to `true` along with `enterMovesDown` to have Excel-style behaviour for the 'Enter' key.\n     * i.e. pressing the Enter key will move down to the cell beneath.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellEditingOnBackspace": {
      "description": "/** Forces Cell Editing to start when backspace is pressed. This is only relevant for MacOS users. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "undoRedoCellEditing": {
      "description": "/** Set to `true` to enable Undo / Redo while editing. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "undoRedoCellEditingLimit": {
      "description": "/** Set the size of the undo / redo stack. Default: `10` */",
      "type": { "returnType": "number", "optional": true }
    },
    "defaultCsvExportParams": {
      "description": "/** A default configuration object used to export to CSV. */",
      "type": { "returnType": "CsvExportParams", "optional": true }
    },
    "suppressCsvExport": {
      "description": "/** Prevents the user from exporting the grid to CSV. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "defaultExcelExportParams": {
      "description": "/** A default configuration object used to export to Excel. */",
      "type": { "returnType": "ExcelExportParams", "optional": true }
    },
    "suppressExcelExport": {
      "description": "/** Prevents the user from exporting the grid to Excel. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "excelStyles": {
      "description": "/** A list (array) of Excel styles to be used when exporting to Excel with styles. */",
      "type": { "returnType": "ExcelStyle[]", "optional": true }
    },
    "quickFilterText": {
      "description": "/** Rows are filtered using this text as a Quick Filter. */",
      "type": { "returnType": "string", "optional": true }
    },
    "cacheQuickFilter": {
      "description": "/** Set to `true` to turn on the Quick Filter cache, used to improve performance when using the Quick Filter. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "excludeHiddenColumnsFromQuickFilter": {
      "description": "/** Set to `true` to exclude hidden columns from being checked by the Quick Filter.\n     * This can give a significant performance improvement when there are a large number of hidden columns,\n     * and you are only interested in filtering on what's visible. Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "excludeChildrenWhenTreeDataFiltering": {
      "description": "/** Set to `true` to override the default tree data filtering behaviour to instead exclude child nodes from filter results. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCharts": {
      "description": "/** Set to `true` to Enable Charts. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "chartThemes": {
      "description": "/** The list of chart themes to be used. */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "customChartThemes": {
      "description": "/** A map containing custom chart themes. */",
      "type": {
        "returnType": "{ [name: string]: AgChartTheme }",
        "optional": true
      }
    },
    "chartThemeOverrides": {
      "description": "/** Chart theme overrides applied to all themes. */",
      "type": { "returnType": "AgChartThemeOverrides", "optional": true }
    },
    "enableChartToolPanelsButton": {
      "description": "/** @deprecated As of v29, no longer used. To suppress use `suppressChartToolPanelsButton`. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressChartToolPanelsButton": {
      "description": "/** Set to `true` to show the 'hamburger' menu option from the Chart Toolbar and display the remaining toolbar buttons. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "chartToolPanelsDef": {
      "description": "/** Allows customisation of the Chart Tool Panels, such as changing the tool panels visibility and order, as well as choosing which charts should be displayed in the settings panel. */",
      "type": { "returnType": "ChartToolPanelsDef", "optional": true }
    },
    "loadingCellRenderer": {
      "description": "/** Provide your own loading cell renderer to use when data is loading via a DataSource.\n    * See [Loading Cell Renderer](https://www.ag-grid.com/javascript-data-grid/component-loading-cell-renderer/) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingCellRendererFramework": {
      "description": "/** @deprecated As of v27, use `loadingCellRenderer` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingCellRendererParams": {
      "description": "/** Params to be passed to the `loadingCellRenderer` component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingCellRendererSelector": {
      "description": "/** Callback to select which loading cell renderer to be used when data is loading via a DataSource. */",
      "type": {
        "returnType": "LoadingCellRendererSelectorFunc<TData>",
        "optional": true
      }
    },
    "localeText": {
      "description": "/** A map of key->value pairs for localising text within the grid. */",
      "type": { "returnType": "{ [key: string]: string }", "optional": true }
    },
    "masterDetail": {
      "description": "/** Set to `true` to enable Master Detail. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "keepDetailRows": {
      "description": "/** Set to `true` to keep detail rows for when they are displayed again. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "keepDetailRowsCount": {
      "description": "/** Sets the number of details rows to keep. Default: `10` */",
      "type": { "returnType": "number", "optional": true }
    },
    "detailCellRenderer": {
      "description": "/** Provide a custom `detailCellRenderer` to use when a master row is expanded.\n    * See [Detail Cell Renderer](https://www.ag-grid.com/javascript-data-grid/master-detail-custom-detail/) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "detailCellRendererFramework": {
      "description": "/** @deprecated As of v27, use `detailCellRenderer` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "detailCellRendererParams": {
      "description": "/** Specifies the params to be used by the Detail Cell Renderer. Can also be a function that provides the params to enable dynamic definitions of the params. */",
      "type": { "returnType": "any", "optional": true }
    },
    "detailRowHeight": {
      "description": "/** Set fixed height in pixels for each detail row. */",
      "type": { "returnType": "number", "optional": true }
    },
    "detailRowAutoHeight": {
      "description": "/** Set to `true` to have the detail grid dynamically change it's height to fit it's rows. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "context": {
      "description": "/** Provides a context object that is provided to different callbacks the grid uses. Used for passing additional information to the callbacks by your application. */",
      "type": { "returnType": "any", "optional": true }
    },
    "alignedGrids": {
      "description": "/** A list of grids to treat as Aligned Grids. If grids are aligned then the columns and horizontal scrolling will be kept in sync. */",
      "type": {
        "returnType": "{ api?: GridApi | null, columnApi?: ColumnApi | null }[]",
        "optional": true
      }
    },
    "tabIndex": {
      "description": "/** Change this value to set the tabIndex order of the Grid within your application. Default: `0` */",
      "type": { "returnType": "number", "optional": true }
    },
    "rowBuffer": {
      "description": "/** The number of rows rendered outside the viewable area the grid renders.\n     * Having a buffer means the grid will have rows ready to show as the user slowly scrolls vertically.\n     * Default: `10`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "valueCache": {
      "description": "/** Set to `true` to turn on the value cache. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "valueCacheNeverExpires": {
      "description": "/** Set to `true` to configure the value cache to not expire after data updates. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellExpressions": {
      "description": "/** Set to `true` to allow cell expressions. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressParentsInRowNodes": {
      "description": "/** If `true`, row nodes do not have their parents set.\n     * The grid doesn't use the parent reference, but it is included to help the client code navigate the node tree if it wants by providing bi-direction navigation up and down the tree.\n     * If this is a problem (e.g. if you need to convert the tree to JSON, which does not allow cyclic dependencies) then set this to `true`.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressTouch": {
      "description": "/** Disables touch support (but does not remove the browser's efforts to simulate mouse events on touch). Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressFocusAfterRefresh": {
      "description": "/** Set to `true` to not set focus back on the grid after a refresh. This can avoid issues where you want to keep the focus on another part of the browser. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAsyncEvents": {
      "description": "/** Disables the asynchronous nature of the events introduced in v10, and makes them synchronous. This property only exists for the purpose of supporting legacy code which has a dependency on synchronous events from earlier versions (v9 or earlier) of AG Grid. **It is strongly recommended that you do not change this property unless you have legacy issues.** Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressBrowserResizeObserver": {
      "description": "/** The grid will check for `ResizeObserver` and use it if it exists in the browser, otherwise it will use the grid's alternative implementation. Some users reported issues with Chrome's `ResizeObserver`. Use this property to always use the grid's alternative implementation should such problems exist. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressPropertyNamesCheck": {
      "description": "/** Disables showing a warning message in the console if using a `gridOptions` or `colDef` property that doesn't exist. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressChangeDetection": {
      "description": "/** Disables change detection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debug": {
      "description": "/** Set this to `true` to enable debug information from the grid and related components. Will result in additional logging being output, but very useful when investigating problems. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "overlayLoadingTemplate": {
      "description": "/** Provide a template for 'loading' overlay. */",
      "type": { "returnType": "string", "optional": true }
    },
    "loadingOverlayComponent": {
      "description": "/** Provide a custom loading overlay component.\n    * See [Loading Overlay Component](https://www.ag-grid.com/javascript-data-grid/component-overlay/#simple-loading-overlay-component) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingOverlayComponentFramework": {
      "description": "/** @deprecated As of v27, use `loadingOverlayComponent` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingOverlayComponentParams": {
      "description": "/** Customise the parameters provided to the loading overlay component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "suppressLoadingOverlay": {
      "description": "/** Disables the 'loading' overlay. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "overlayNoRowsTemplate": {
      "description": "/** Provide a template for 'no rows' overlay. */",
      "type": { "returnType": "string", "optional": true }
    },
    "noRowsOverlayComponent": {
      "description": "/** Provide a custom no rows overlay component.\n    * See [No Rows Overlay Component](https://www.ag-grid.com/javascript-data-grid/component-overlay/#simple-no-rows-overlay-component) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "noRowsOverlayComponentFramework": {
      "description": "/** @deprecated As of v27, use `noRowsOverlayComponent` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "noRowsOverlayComponentParams": {
      "description": "/** Customise the parameters provided to the no rows overlay component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "suppressNoRowsOverlay": {
      "description": "/** Disables the 'no rows' overlay. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pagination": {
      "description": "/** Set whether pagination is enabled. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "paginationPageSize": {
      "description": "/** How many rows to load per page. If `paginationAutoPageSize` is specified, this property is ignored. Default: `100` */",
      "type": { "returnType": "number", "optional": true }
    },
    "paginationAutoPageSize": {
      "description": "/** Set to `true` so that the number of rows to load per page is automatically adjusted by the grid so each page shows enough rows to just fill the area designated for the grid. If `false`, `paginationPageSize` is used. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "paginateChildRows": {
      "description": "/** Set to `true` to have pages split children of groups when using Row Grouping or detail rows with Master Detail. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressPaginationPanel": {
      "description": "/** If `true`, the default grid controls for navigation are hidden.\n     * This is useful if `pagination=true` and you want to provide your own pagination controls.\n     * Otherwise, when `pagination=true` the grid automatically shows the necessary controls at the bottom so that the user can navigate through the different pages.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pivotMode": {
      "description": "/** Set to `true` to enable pivot mode. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pivotPanelShow": {
      "description": "/** When to show the 'pivot panel' (where you drag rows to pivot) at the top. Note that the pivot panel will never show if `pivotMode` is off. Default: `never` */",
      "type": {
        "returnType": "'always' | 'onlyWhenPivoting' | 'never'",
        "optional": true
      }
    },
    "pivotColumnGroupTotals": {
      "description": "/** When set and the grid is in pivot mode, automatically calculated totals will appear within the Pivot Column Groups, in the position specified. */",
      "type": { "returnType": "'before' | 'after'", "optional": true }
    },
    "pivotRowTotals": {
      "description": "/** When set and the grid is in pivot mode, automatically calculated totals will appear for each value column in the position specified. */",
      "type": { "returnType": "'before' | 'after'", "optional": true }
    },
    "pivotSuppressAutoColumn": {
      "description": "/** If `true`, the grid will not swap in the grouping column when pivoting. Useful if pivoting using Server Side Row Model or Viewport Row Model and you want full control of all columns including the group column. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressExpandablePivotGroups": {
      "description": "/** When enabled, pivot column groups will appear 'fixed', without the ability to expand and collapse the column groups. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "functionsReadOnly": {
      "description": "/** If `true`, then row group, pivot and value aggregation will be read-only from the GUI. The grid will display what values are used for each, but will not allow the user to change the selection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "aggFuncs": {
      "description": "/** A map of 'function name' to 'function' for custom aggregation functions. */",
      "type": {
        "returnType": "{ [key: string]: IAggFunc<TData>; }",
        "optional": true
      }
    },
    "suppressAggFuncInHeader": {
      "description": "/** When `true`, column headers won't include the `aggFunc` name, e.g. `'sum(Bank Balance)`' will just be `'Bank Balance'`. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAggAtRootLevel": {
      "description": "/** When `true`, the aggregations won't be computed for the root node of the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "aggregateOnlyChangedColumns": {
      "description": "/** When using change detection, only the updated column will be re-aggregated. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAggFilteredOnly": {
      "description": "/** Set to `true` so that aggregations are not impacted by filtering. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "removePivotHeaderRowWhenSingleValueColumn": {
      "description": "/** Set to `true` to omit the value Column header when there is only a single value column. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "animateRows": {
      "description": "/** Set to `true` to enable Row Animation. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellChangeFlash": {
      "description": "/** Set to `true` to have cells flash after data changes. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "cellFlashDelay": {
      "description": "/** To be used in combination with `enableCellChangeFlash`, this configuration will set the delay in milliseconds of how long a cell should remain in its \"flashed\" state.\n     * Default: `500`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "cellFadeDelay": {
      "description": "/** To be used in combination with `enableCellChangeFlash`, this configuration will set the delay in milliseconds of how long the \"flashed\" state animation takes to fade away after the timer set by `cellFlashDelay` has completed.\n     * Default: `1000`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "allowShowChangeAfterFilter": {
      "description": "/** Set to `true` to have cells flash after data changes even when the change is due to filtering. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "domLayout": {
      "description": "/** Switch between layout options: `normal`, `autoHeight`, `print`.\n     * Default: `normal`\n     */",
      "type": { "returnType": "DomLayoutType", "optional": true }
    },
    "ensureDomOrder": {
      "description": "/** When `true`, the order of rows and columns in the DOM are consistent with what is on screen. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableRtl": {
      "description": "/** Set to `true` to operate the grid in RTL (Right to Left) mode. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressColumnVirtualisation": {
      "description": "/** Set to `true` so that the grid doesn't virtualise the columns. For example, if you have 100 columns, but only 10 visible due to scrolling, all 100 will always be rendered. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMaxRenderedRowRestriction": {
      "description": "/** By default the grid has a limit of rendering a maximum of 500 rows at once (remember the grid only renders rows you can see, so unless your display shows more than 500 rows without vertically scrolling this will never be an issue).\n     * <br />**This is only relevant if you are manually setting `rowBuffer` to a high value (rendering more rows than can be seen), or `suppressRowVirtualisation` is true, or if your grid height is able to display more than 500 rows at once.**\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowVirtualisation": {
      "description": "/** Set to `true` so that the grid doesn't virtualise the rows. For example, if you have 100 rows, but only 10 visible due to scrolling, all 100 will always be rendered. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDragManaged": {
      "description": "/** Set to `true` to enable Managed Row Dragging. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowDrag": {
      "description": "/** Set to `true` to suppress row dragging. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMoveWhenRowDragging": {
      "description": "/** Set to `true` to suppress moving rows while dragging the `rowDrag` waffle. This option highlights the position where the row will be placed and it will only move the row on mouse up. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDragEntireRow": {
      "description": "/** Set to `true` to enable clicking and dragging anywhere on the row without the need for a drag handle. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDragMultiRow": {
      "description": "/** Set to `true` to enable dragging multiple rows at the same time. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDragText": {
      "description": "/** A callback that should return a string to be displayed by the `rowDragComp` while dragging a row.\n     * If this callback is not set, the current cell value will be used.\n     * If the `rowDragText` callback is set in the ColDef it will take precedence over this, except when\n     * `rowDragEntireRow=true`.\n     */",
      "type": {
        "arguments": { "params": "IRowDragItem", "dragItemCount": "number" },
        "returnType": "string",
        "optional": true
      }
    },
    "fullWidthCellRenderer": {
      "description": "/** Provide your own cell renderer component to use for full width rows.\n    * See [Full Width Rows](https://www.ag-grid.com/javascript-data-grid/full-width-rows/) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "fullWidthCellRendererFramework": {
      "description": "/** @deprecated As of v27, use `fullWidthCellRenderer` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "fullWidthCellRendererParams": {
      "description": "/** Customise the parameters provided to the `fullWidthCellRenderer` component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "embedFullWidthRows": {
      "description": "/** Set to `true` to have the Full Width Rows embedded in grid's main container so they can be scrolled horizontally . */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupDisplayType": {
      "description": "/** Specifies how the results of row grouping should be displayed.\n     *\n     *  The options are:\n     *\n     * - `'singleColumn'`: single group column automatically added by the grid.\n     * - `'multipleColumns'`: a group column per row group is added automatically.\n     * - `'groupRows'`: group rows are automatically added instead of group columns.\n     * - `'custom'`: informs the grid that group columns will be provided.\n     */",
      "type": { "returnType": "RowGroupingDisplayType", "optional": true }
    },
    "groupDefaultExpanded": {
      "description": "/** If grouping, set to the number of levels to expand by default, e.g. `0` for none, `1` for first level only, etc. Set to `-1` to expand everything. Default: `0` */",
      "type": { "returnType": "number", "optional": true }
    },
    "autoGroupColumnDef": {
      "description": "/** Allows specifying the group 'auto column' if you are not happy with the default. If grouping, this column definition is included as the first column in the grid. If not grouping, this column is not included. */",
      "type": { "returnType": "ColDef<TData>", "optional": true }
    },
    "groupMaintainOrder": {
      "description": "/** When `true`, preserves the current group order when sorting on non-group columns. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupSelectsChildren": {
      "description": "/** When `true`, if you select a group, the children of the group will also be selected. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupAggFiltering": {
      "description": "/** Set to determine whether filters should be applied on aggregated group values. Default: `false` */",
      "type": {
        "returnType": "boolean | IsRowFilterable<TData>",
        "optional": true
      }
    },
    "groupIncludeFooter": {
      "description": "/** If grouping, this controls whether to show a group footer when the group is expanded.\n     * If `true`, then by default, the footer will contain aggregate data (if any) when shown and the header will be blank.\n     * When closed, the header will contain the aggregate data regardless of this setting (as the footer is hidden anyway).\n     * This is handy for 'total' rows, that are displayed below the data when the group is open, and alongside the group when it is closed.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupIncludeTotalFooter": {
      "description": "/** Set to `true` to show a 'grand total' group footer across all groups. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupSuppressBlankHeader": {
      "description": "/** If `true`, and showing footer, aggregate data will always be displayed at both the header and footer levels. This stops the possibly undesirable behaviour of the header details 'jumping' to the footer on expand. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupSelectsFiltered": {
      "description": "/** If using `groupSelectsChildren`, then only the children that pass the current filter will get selected. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "showOpenedGroup": {
      "description": "/** Shows the open group in the group column for non-group rows. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupRemoveSingleChildren": {
      "description": "/** Set to `true` to collapse groups that only have one child. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupRemoveLowestSingleChildren": {
      "description": "/** Set to `true` to collapse lowest level groups that only have one child. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupHideOpenParents": {
      "description": "/** Set to `true` to hide parents that are open. When used with multiple columns for showing groups, it can give a more pleasing user experience. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupAllowUnbalanced": {
      "description": "/** Set to `true` to prevent the grid from creating a '(Blanks)' group for nodes which do not belong to a group, and display the unbalanced nodes alongside group nodes. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowGroupPanelShow": {
      "description": "/** When to show the 'row group panel' (where you drag rows to group) at the top. Default: `never` */",
      "type": {
        "returnType": "'always' | 'onlyWhenGrouping' | 'never'",
        "optional": true
      }
    },
    "groupRowRenderer": {
      "description": "/** Provide the Cell Renderer to use when `groupDisplayType = 'groupRows'`.\n    * See [Group Row Cell Renderer](https://www.ag-grid.com/javascript-data-grid/grouping-group-rows/#providing-cell-renderer) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "groupRowRendererFramework": {
      "description": "/** @deprecated As of v27, use `groupRowRenderer` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "groupRowRendererParams": {
      "description": "/** Customise the parameters provided to the `groupRowRenderer` component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "suppressMakeColumnVisibleAfterUnGroup": {
      "description": "/** By default, when a column is un-grouped, i.e. using the Row Group Panel, it is made visible in the grid. This property stops the column becoming visible again when un-grouping. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "treeData": {
      "description": "/** Set to `true` to enable the Grid to work with Tree Data. You must also implement the `getDataPath(data)` callback. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowGroupPanelSuppressSort": {
      "description": "/** Set to `true` to suppress sort indicators and actions from the row group panel. Default: `false`. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupRowsSticky": {
      "description": "/** Set to `true` to keep open Group Rows visible at the top of the grid. Default: `false`.*/",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rememberGroupStateWhenNewData": {
      "description": "/** @deprecated v24 - no longer needed, transaction updates keep group state */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pinnedTopRowData": {
      "description": "/** Data to be displayed as pinned top rows in the grid. */",
      "type": { "returnType": "any[]", "optional": true }
    },
    "pinnedBottomRowData": {
      "description": "/** Data to be displayed as pinned bottom rows in the grid. */",
      "type": { "returnType": "any[]", "optional": true }
    },
    "rowModelType": {
      "description": "/** Sets the row model type. Default: `clientSide` */",
      "type": { "returnType": "RowModelType", "optional": true }
    },
    "rowData": {
      "description": "/** Set the data to be displayed as rows in the grid. */",
      "type": { "returnType": "TData[] | null", "optional": true }
    },
    "immutableData": {
      "description": "/** @deprecated 27.1 Immutable Data is on by default when grid callback getRowId() is implemented\n     * Enables Immutable Data mode, for compatibility with immutable stores. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "asyncTransactionWaitMillis": {
      "description": "/** How many milliseconds to wait before executing a batch of async transactions. */",
      "type": { "returnType": "number", "optional": true }
    },
    "suppressModelUpdateAfterUpdateTransaction": {
      "description": "/** Prevents Transactions changing sort, filter, group or pivot state when transaction only contains updates. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "datasource": {
      "description": "/** Provide the datasource for infinite scrolling. */",
      "type": { "returnType": "IDatasource", "optional": true }
    },
    "cacheOverflowSize": {
      "description": "/** How many extra blank rows to display to the user at the end of the dataset, which sets the vertical scroll and then allows the grid to request viewing more rows of data.\n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "infiniteInitialRowCount": {
      "description": "/** How many extra blank rows to display to the user at the end of the dataset, which sets the vertical scroll and then allows the grid to request viewing more rows of data.\n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "serverSideInitialRowCount": {
      "description": "/** Set how many loading rows to display to the user for the root level group.\n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "serverSideStoreType": {
      "description": "/** @deprecated v28 Whether to use Full Store or Partial Store for storing rows. Default: `partial`.\n     * Deprecated in favour of suppressServerSideInfiniteScroll. When false, Partial Store is used. When true,\n     * Full Store is used.\n     */",
      "type": { "returnType": "ServerSideStoreType", "optional": true }
    },
    "suppressServerSideInfiniteScroll": {
      "description": "/** When `true`, the Server-side Row Model will suppress Infinite Scrolling and load all the data at the current level.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "cacheBlockSize": {
      "description": "/** How many rows for each block in the store, i.e. how many rows returned from the server at a time.\n     * Default: `100`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "maxBlocksInCache": {
      "description": "/** How many blocks to keep in the store. Default is no limit, so every requested block is kept. Use this if you have memory concerns, and blocks that were least recently viewed will be purged when the limit is hit. The grid will additionally make sure it has all the blocks needed to display what is currently visible, in case this property is set to a low value. */",
      "type": { "returnType": "number", "optional": true }
    },
    "maxConcurrentDatasourceRequests": {
      "description": "/** How many requests to hit the server with concurrently. If the max is reached, requests are queued.\n     * Set to `-1` for no maximum restriction on requests.\n     * Default: `2`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "blockLoadDebounceMillis": {
      "description": "/** How many milliseconds to wait before loading a block. Useful when scrolling over many blocks, as it prevents blocks loading until scrolling has settled. */",
      "type": { "returnType": "number", "optional": true }
    },
    "purgeClosedRowNodes": {
      "description": "/** When enabled, closing group rows will remove children of that row. Next time the row is opened, child rows will be read from the datasource again. This property only applies when there is Row Grouping. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideDatasource": {
      "description": "/** Provide the `serverSideDatasource` for server side row model. */",
      "type": { "returnType": "IServerSideDatasource", "optional": true }
    },
    "serverSideSortAllLevels": {
      "description": "/** When enabled, always refreshes top level groups regardless of which column was sorted. This property only applies when there is Row Grouping & sorting is handled on the server. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideFilterAllLevels": {
      "description": "/** When enabled, always refreshes top level groups regardless of which column was filtered. This property only applies when there is Row Grouping & filtering is handled on the server. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideSortOnServer": {
      "description": "/**\n     * When enabled, Sorting will be done on the server. Only applicable when `suppressServerSideInfiniteScroll=true`.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideFilterOnServer": {
      "description": "/** When enabled, Filtering will be done on the server. Only applicable when `suppressServerSideInfiniteScroll=true`.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideSortingAlwaysResets": {
      "description": "/** @deprecated v28 This property has been deprecated. Use `serverSideSortAllLevels` instead. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideFilteringAlwaysResets": {
      "description": "/** @deprecated v28 This property has been deprecated. Use `serverSideFilterAllLevels` instead. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "viewportDatasource": {
      "description": "/** To use the viewport row model you need to provide the grid with a `viewportDatasource`. */",
      "type": { "returnType": "IViewportDatasource", "optional": true }
    },
    "viewportRowModelPageSize": {
      "description": "/** When using viewport row model, sets the page size for the viewport. */",
      "type": { "returnType": "number", "optional": true }
    },
    "viewportRowModelBufferSize": {
      "description": "/** When using viewport row model, sets the buffer size for the viewport. */",
      "type": { "returnType": "number", "optional": true }
    },
    "alwaysShowHorizontalScroll": {
      "description": "/** Set to `true` to always show the horizontal scrollbar. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "alwaysShowVerticalScroll": {
      "description": "/** Set to `true` to always show the vertical scrollbar. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debounceVerticalScrollbar": {
      "description": "/** Set to `true` to debounce the vertical scrollbar. Can provide smoother scrolling on slow machines. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressHorizontalScroll": {
      "description": "/** Set to `true` to never show the horizontal scroll. This is useful if the grid is aligned with another grid and will scroll when the other grid scrolls. (Should not be used in combination with `alwaysShowHorizontalScroll`.) Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressScrollOnNewData": {
      "description": "/** When `true`, the grid will not scroll to the top when new row data is provided. Use this if you don't want the default behaviour of scrolling to the top every time you load new data. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressScrollWhenPopupsAreOpen": {
      "description": "/** When `true`, the grid will not allow mousewheel / touchpad scroll when popup elements are present. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAnimationFrame": {
      "description": "/** When `true`, the grid will not use animation frames when drawing rows while scrolling. Use this if the grid is working fast enough that you don't need animation frames and you don't want the grid to flicker. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMiddleClickScrolls": {
      "description": "/** If `true`, middle clicks will result in `click` events for cells and rows. Otherwise the browser will use middle click to scroll the grid.<br />**Note:** Not all browsers fire `click` events with the middle button. Most will fire only `mousedown` and `mouseup` events, which can be used to focus a cell, but will not work to call the `onCellClicked` function. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressPreventDefaultOnMouseWheel": {
      "description": "/** If `true`, mouse wheel events will be passed to the browser. Useful if your grid has no vertical scrolls and you want the mouse to scroll the browser page. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "scrollbarWidth": {
      "description": "/** Tell the grid how wide in pixels the scrollbar is, which is used in grid width calculations. Set only if using non-standard browser-provided scrollbars, so the grid can use the non-standard size in its calculations. */",
      "type": { "returnType": "number", "optional": true }
    },
    "rowSelection": {
      "description": "/** Type of Row Selection: `single`, `multiple`. */",
      "type": { "returnType": "'single' | 'multiple'", "optional": true }
    },
    "rowMultiSelectWithClick": {
      "description": "/** Set to `true` to allow multiple rows to be selected using single click. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowDeselection": {
      "description": "/** If `true`, rows will not be deselected if you hold down `Ctrl` and click the row or press `Space`. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowClickSelection": {
      "description": "/** If `true`, row selection won't happen when rows are clicked. Use when you only want checkbox selection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressCellSelection": {
      "description": "/** @deprecated v27 This property has been deprecated. Use `suppressCellFocus` instead.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressCellFocus": {
      "description": "/** If `true`, cells won't be focusable. This means keyboard navigation will be disabled for grid cells, but remain enabled in other elements of the grid such as column headers, floating filters, tool panels. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMultiRangeSelection": {
      "description": "/** If `true`, only a single range can be selected. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellTextSelection": {
      "description": "/** Set to `true` to be able to select the text within cells.\n     *\n     * **Note:** When this is set to `true`, the clipboard service is disabled.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableRangeSelection": {
      "description": "/** Set to `true` to enable Range Selection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableRangeHandle": {
      "description": "/** Set to `true` to enable the Range Handle. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableFillHandle": {
      "description": "/** Set to `true` to enable the Fill Handle. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "fillHandleDirection": {
      "description": "/** Set to `'x'` to force the fill handle direction to horizontal, or set to `'y'` to force the fill handle direction to vertical. Default: `xy` */",
      "type": { "returnType": "'x' | 'y' | 'xy'", "optional": true }
    },
    "suppressClearOnFillReduction": {
      "description": "/** Set this to `true` to prevent cell values from being cleared when the Range Selection is reduced by the Fill Handle. Default: `false`*/",
      "type": { "returnType": "boolean", "optional": true }
    },
    "sortingOrder": {
      "description": "/** Array defining the order in which sorting occurs (if sorting is enabled). Values can be `'asc'`, `'desc'` or `null`. For example: `sortingOrder: ['asc', 'desc']`. Default: `[null, 'asc', 'desc']`  */",
      "type": { "returnType": "(SortDirection)[]", "optional": true }
    },
    "accentedSort": {
      "description": "/** Set to `true` to specify that the sort should take accented characters into account. If this feature is turned on the sort will be slower. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "unSortIcon": {
      "description": "/** Set to `true` to show the 'no sort' icon. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMultiSort": {
      "description": "/** Set to `true` to suppress multi-sort when the user shift-clicks a column header. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "alwaysMultiSort": {
      "description": "/** Set to `true` to always multi-sort when the user clicks a column header, regardless of key presses. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "multiSortKey": {
      "description": "/** Set to `'ctrl'` to have multi sorting work using the `Ctrl` (or `Command ⌘` for Mac) key. */",
      "type": { "returnType": "'ctrl'", "optional": true }
    },
    "suppressMaintainUnsortedOrder": {
      "description": "/** Set to `true` to suppress sorting of un-sorted data to match original row data. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "icons": {
      "description": "/** Icons to use inside the grid instead of the grid's default icons. */",
      "type": {
        "returnType": "{ [key: string]: Function | string; }",
        "optional": true
      }
    },
    "rowHeight": {
      "description": "/** Default row height in pixels. Default: `25` */",
      "type": { "returnType": "number", "optional": true }
    },
    "rowStyle": {
      "description": "/** The style properties to apply to all rows. Set to an object of key (style names) and values (style values) */",
      "type": { "returnType": "RowStyle", "optional": true }
    },
    "rowClass": {
      "description": "/** CSS class(es) for all rows. Provide either a string (class name) or array of strings (array of class names). */",
      "type": { "returnType": "string | string[]", "optional": true }
    },
    "rowClassRules": {
      "description": "/** Rules which can be applied to include certain CSS classes. */",
      "type": { "returnType": "RowClassRules<TData>", "optional": true }
    },
    "suppressRowHoverHighlight": {
      "description": "/** Set to `true` to not highlight rows by adding the `ag-row-hover` CSS class. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowTransform": {
      "description": "/** Uses CSS `top` instead of CSS `transform` for positioning rows. Useful if the transform function is causing issues such as used in row spanning. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "columnHoverHighlight": {
      "description": "/** Set to `true` to highlight columns by adding the `ag-column-hover` CSS class. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "deltaSort": { "type": { "returnType": "boolean", "optional": true } },
    "treeDataDisplayType": {
      "type": { "returnType": "TreeDataDisplayType", "optional": true }
    },
    "functionsPassive": {
      "description": "/** @deprecated v29.2 */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableGroupEdit": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "getContextMenuItems": {
      "description": "/** For customising the context menu. */",
      "type": { "returnType": "GetContextMenuItems<TData>", "optional": true }
    },
    "getMainMenuItems": {
      "description": "/** For customising the main 'column header' menu. */",
      "type": { "returnType": "GetMainMenuItems", "optional": true }
    },
    "postProcessPopup": {
      "description": "/** Allows user to process popups after they are created. Applications can use this if they want to, for example, reposition the popup. */",
      "type": {
        "arguments": { "params": "PostProcessPopupParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processCellForClipboard": {
      "description": "/** Allows you to process cells for the clipboard. Handy if for example you have `Date` objects that need to have a particular format if importing into Excel. */",
      "type": {
        "arguments": { "params": "ProcessCellForExportParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "processHeaderForClipboard": {
      "description": "/** Allows you to process header values for the clipboard.  */",
      "type": {
        "arguments": { "params": "ProcessHeaderForExportParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "processGroupHeaderForClipboard": {
      "description": "/** Allows you to process group header values for the clipboard.  */",
      "type": {
        "arguments": { "params": "ProcessGroupHeaderForExportParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "processCellFromClipboard": {
      "description": "/** Allows you to process cells from the clipboard. Handy if for example you have number fields, and want to block non-numbers from getting into the grid. */",
      "type": {
        "arguments": { "params": "ProcessCellForExportParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "sendToClipboard": {
      "description": "/** Allows you to get the data that would otherwise go to the clipboard. To be used when you want to control the 'copy to clipboard' operation yourself. */",
      "type": {
        "arguments": { "params": "SendToClipboardParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processDataFromClipboard": {
      "description": "/** Allows complete control of the paste operation, including cancelling the operation (so nothing happens) or replacing the data with other data. */",
      "type": {
        "arguments": { "params": "ProcessDataFromClipboardParams<TData>" },
        "returnType": "string[][] | null",
        "optional": true
      }
    },
    "isExternalFilterPresent": {
      "description": "/** Grid calls this method to know if an external filter is present. */",
      "type": {
        "arguments": { "params": "IsExternalFilterPresentParams<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "doesExternalFilterPass": {
      "description": "/** Should return `true` if external filter passes, otherwise `false`. */",
      "type": {
        "arguments": { "node": "IRowNode<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "getChartToolbarItems": {
      "description": "/** Callback to be used to customise the chart toolbar items. */",
      "type": { "returnType": "GetChartToolbarItems", "optional": true }
    },
    "createChartContainer": {
      "description": "/** Callback to enable displaying the chart in an alternative chart container. */",
      "type": {
        "arguments": { "params": "ChartRefParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "navigateToNextHeader": {
      "description": "/** Allows overriding the default behaviour for when user hits navigation (arrow) key when a header is focused. Return the next Header position to navigate to or `null` to stay on current header. */",
      "type": {
        "arguments": { "params": "NavigateToNextHeaderParams<TData>" },
        "returnType": "(HeaderPosition | null)",
        "optional": true
      }
    },
    "tabToNextHeader": {
      "description": "/** Allows overriding the default behaviour for when user hits `Tab` key when a header is focused. Return the next Header position to navigate to or `null` to stay on current header.  */",
      "type": {
        "arguments": { "params": "TabToNextHeaderParams<TData>" },
        "returnType": "(HeaderPosition | null)",
        "optional": true
      }
    },
    "navigateToNextCell": {
      "description": "/** Allows overriding the default behaviour for when user hits navigation (arrow) key when a cell is focused. Return the next Cell position to navigate to or `null` to stay on current cell.  */",
      "type": {
        "arguments": { "params": "NavigateToNextCellParams<TData>" },
        "returnType": "(CellPosition | null)",
        "optional": true
      }
    },
    "tabToNextCell": {
      "description": "/** Allows overriding the default behaviour for when user hits `Tab` key when a cell is focused. Return the next Cell position to navigate to or null to stay on current cell.  */",
      "type": {
        "arguments": { "params": "TabToNextCellParams<TData>" },
        "returnType": "(CellPosition | null)",
        "optional": true
      }
    },
    "localeTextFunc": {
      "description": "/** @deprecated v27.2 - Use `getLocaleText` instead. */",
      "type": {
        "arguments": {
          "key": "string",
          "defaultValue": "string",
          "variableValues?": "string[]"
        },
        "returnType": "string",
        "optional": true
      }
    },
    "getLocaleText": {
      "description": "/** A callback for localising text within the grid. */",
      "type": {
        "arguments": { "params": "GetLocaleTextParams<TData>" },
        "returnType": "string",
        "optional": true
      }
    },
    "getDocument": {
      "description": "/** Allows overriding what `document` is used. Currently used by Drag and Drop (may extend to other places in the future). Use this when you want the grid to use a different `document` than the one available on the global scope. This can happen if docking out components (something which Electron supports) */",
      "type": { "arguments": {}, "returnType": "Document", "optional": true }
    },
    "paginationNumberFormatter": {
      "description": "/** Allows user to format the numbers in the pagination panel, i.e. 'row count' and 'page number' labels. This is for pagination panel only, to format numbers inside the grid's cells (i.e. your data), then use `valueFormatter` in the column definitions. */",
      "type": {
        "arguments": { "params": "PaginationNumberFormatterParams<TData>" },
        "returnType": "string",
        "optional": true
      }
    },
    "groupRowAggNodes": {
      "description": "/** @deprecated v27.2 - Use `getGroupRowAgg` instead. */",
      "type": {
        "arguments": { "nodes": "IRowNode[]" },
        "returnType": "any",
        "optional": true
      }
    },
    "getGroupRowAgg": {
      "description": "/** Callback to use when you need access to more then the current column for aggregation. */",
      "type": {
        "arguments": { "params": "GetGroupRowAggParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "isGroupOpenByDefault": {
      "description": "/** (Client-side Row Model only) Allows groups to be open by default. */",
      "type": {
        "arguments": { "params": "IsGroupOpenByDefaultParams<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "initialGroupOrderComparator": {
      "description": "/** Allows default sorting of groups. */",
      "type": {
        "arguments": { "params": "InitialGroupOrderComparatorParams<TData>" },
        "returnType": "number",
        "optional": true
      }
    },
    "defaultGroupOrderComparator": {
      "description": "/** @deprecated v27.2 - Use `initialGroupOrderComparator` instead */",
      "type": {
        "arguments": { "nodeA": "IRowNode<TData>", "nodeB": "IRowNode<TData>" },
        "returnType": "number",
        "optional": true
      }
    },
    "processSecondaryColDef": {
      "description": "/** @deprecated v28 - Use `processPivotResultColDef` instead */",
      "type": {
        "arguments": { "colDef": "ColDef<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processSecondaryColGroupDef": {
      "description": "/** @deprecated v28 - Use `processPivotResultColGroupDef` instead */",
      "type": {
        "arguments": { "colGroupDef": "ColGroupDef<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processPivotResultColDef": {
      "description": "/** Callback to be used with pivoting, to allow changing the second column definition. */",
      "type": {
        "arguments": { "colDef": "ColDef<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processPivotResultColGroupDef": {
      "description": "/** Callback to be used with pivoting, to allow changing the second column group definition. */",
      "type": {
        "arguments": { "colGroupDef": "ColGroupDef<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "getDataPath": {
      "description": "/** Callback to be used when working with Tree Data when `treeData = true`. */",
      "type": { "returnType": "GetDataPath<TData>", "optional": true }
    },
    "getChildCount": {
      "description": "/** Allows setting the child count for a group row. */",
      "type": {
        "arguments": { "dataItem": "any" },
        "returnType": "number",
        "optional": true
      }
    },
    "getServerSideGroupLevelParams": {
      "description": "/** Allows providing different params for different levels of grouping. */",
      "type": {
        "arguments": { "params": "GetServerSideGroupLevelParamsParams" },
        "returnType": "ServerSideGroupLevelParams",
        "optional": true
      }
    },
    "getServerSideStoreParams": {
      "description": "/** @deprecated v28 Use `getServerSideGroupLevelParams` instead. */",
      "type": {
        "arguments": { "params": "GetServerSideGroupLevelParamsParams" },
        "returnType": "ServerSideGroupLevelParams",
        "optional": true
      }
    },
    "isServerSideGroupOpenByDefault": {
      "description": "/** Allows groups to be open by default. */",
      "type": {
        "arguments": { "params": "IsServerSideGroupOpenByDefaultParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "isApplyServerSideTransaction": {
      "description": "/** Allows cancelling transactions. */",
      "type": { "returnType": "IsApplyServerSideTransaction", "optional": true }
    },
    "isServerSideGroup": {
      "description": "/** SSRM Tree Data: Allows specifying which rows are expandable. */",
      "type": { "returnType": "IsServerSideGroup", "optional": true }
    },
    "getServerSideGroupKey": {
      "description": "/** SSRM Tree Data: Allows specifying group keys. */",
      "type": { "returnType": "GetServerSideGroupKey", "optional": true }
    },
    "getBusinessKeyForNode": {
      "description": "/** Return a business key for the node. If implemented, each row in the DOM will have an attribute `row-id='abc'` where `abc` is what you return as the business key.\n     * This is useful for automated testing, as it provides a way for your tool to identify rows based on unique business keys.\n     */",
      "type": {
        "arguments": { "node": "IRowNode<TData>" },
        "returnType": "string",
        "optional": true
      }
    },
    "getRowNodeId": {
      "description": "/** @deprecated v27.1 Use `getRowId` instead - however be aware, `getRowId()` will also set grid option `immutableData=true`\n     * Allows you to set the ID for a particular row node based on the data. */",
      "type": { "returnType": "GetRowNodeIdFunc<TData>", "optional": true }
    },
    "getRowId": {
      "description": "/** Allows setting the ID for a particular row node based on the data. */",
      "type": { "returnType": "GetRowIdFunc<TData>", "optional": true }
    },
    "resetRowDataOnUpdate": {
      "description": "/** When enabled, getRowId() callback is implemented and new Row Data is set, the grid will disregard all previous rows and treat the new Row Data as new data. As a consequence, all Row State (eg selection, rendered rows) will be reset.  Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "processRowPostCreate": {
      "description": "/** Allows you to process rows after they are created, so you can do final adding of custom attributes etc. */",
      "type": {
        "arguments": { "params": "ProcessRowParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "isRowSelectable": {
      "description": "/** Callback to be used to determine which rows are selectable. By default rows are selectable, so return `false` to make a row un-selectable. */",
      "type": { "returnType": "IsRowSelectable<TData>", "optional": true }
    },
    "isRowMaster": {
      "description": "/** Callback to be used with Master Detail to determine if a row should be a master row. If `false` is returned no detail row will exist for this row. */",
      "type": { "returnType": "IsRowMaster<TData>", "optional": true }
    },
    "fillOperation": {
      "description": "/** Callback to fill values instead of simply copying values or increasing number values using linear progression. */",
      "type": {
        "arguments": { "params": "FillOperationParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "postSort": {
      "description": "/** @deprecated v27.2 Use `postSortRows` instead */",
      "type": {
        "arguments": { "nodes": "IRowNode<TData>[]" },
        "returnType": "void",
        "optional": true
      }
    },
    "postSortRows": {
      "description": "/** Callback to perform additional sorting after the grid has sorted the rows. */",
      "type": {
        "arguments": { "params": "PostSortRowsParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "getRowStyle": {
      "description": "/** Callback version of property `rowStyle` to set style for each row individually. Function should return an object of CSS values or undefined for no styles. */",
      "type": {
        "arguments": { "params": "RowClassParams<TData>" },
        "returnType": "RowStyle | undefined",
        "optional": true
      }
    },
    "getRowClass": {
      "description": "/** Callback version of property `rowClass` to set class(es) for each row individually. Function should return either a string (class name), array of strings (array of class names) or undefined for no class. */",
      "type": {
        "arguments": { "params": "RowClassParams<TData>" },
        "returnType": "string | string[] | undefined",
        "optional": true
      }
    },
    "getRowHeight": {
      "description": "/** Callback version of property `rowHeight` to set height for each row individually. Function should return a positive number of pixels, or return `null`/`undefined` to use the default row height. */",
      "type": {
        "arguments": { "params": "RowHeightParams<TData>" },
        "returnType": "number | undefined | null",
        "optional": true
      }
    },
    "isFullWidthCell": {
      "description": "/** @deprecated v27.2 Use `isFullWidthRow` instead. */",
      "type": {
        "arguments": { "rowNode": "IRowNode<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "isFullWidthRow": {
      "description": "/** Tells the grid if this row should be rendered as full width. */",
      "type": {
        "arguments": { "params": "IsFullWidthRowParams<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "onToolPanelVisibleChanged": {
      "description": "/** The tool panel was hidden or shown. Use `api.isToolPanelShowing()` to get status. */",
      "type": {
        "arguments": { "event": "ToolPanelVisibleChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onToolPanelVisibleChanged" }
    },
    "toolPanelVisibleChanged": {
      "description": "/** The tool panel was hidden or shown. Use `api.isToolPanelShowing()` to get status. */",
      "type": {
        "arguments": { "event": "ToolPanelVisibleChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onToolPanelVisibleChanged" }
    },
    "onToolPanelSizeChanged": {
      "description": "/** The tool panel size has been changed. */",
      "type": {
        "arguments": { "event": "ToolPanelSizeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onToolPanelSizeChanged" }
    },
    "toolPanelSizeChanged": {
      "description": "/** The tool panel size has been changed. */",
      "type": {
        "arguments": { "event": "ToolPanelSizeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onToolPanelSizeChanged" }
    },
    "onPasteStart": {
      "description": "/** Paste operation has started. */",
      "type": {
        "arguments": { "event": "PasteStartEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteStart" }
    },
    "pasteStart": {
      "description": "/** Paste operation has started. */",
      "type": {
        "arguments": { "event": "PasteStartEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteStart" }
    },
    "onPasteEnd": {
      "description": "/** Paste operation has ended. */",
      "type": {
        "arguments": { "event": "PasteEndEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteEnd" }
    },
    "pasteEnd": {
      "description": "/** Paste operation has ended. */",
      "type": {
        "arguments": { "event": "PasteEndEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteEnd" }
    },
    "onColumnVisible": {
      "description": "/** A column, or group of columns, was hidden / shown. */",
      "type": {
        "arguments": { "event": "ColumnVisibleEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnVisible" }
    },
    "columnVisible": {
      "description": "/** A column, or group of columns, was hidden / shown. */",
      "type": {
        "arguments": { "event": "ColumnVisibleEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnVisible" }
    },
    "onColumnPinned": {
      "description": "/** A column, or group of columns, was pinned / unpinned. */",
      "type": {
        "arguments": { "event": "ColumnPinnedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPinned" }
    },
    "columnPinned": {
      "description": "/** A column, or group of columns, was pinned / unpinned. */",
      "type": {
        "arguments": { "event": "ColumnPinnedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPinned" }
    },
    "onColumnResized": {
      "description": "/** A column was resized. */",
      "type": {
        "arguments": { "event": "ColumnResizedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnResized" }
    },
    "columnResized": {
      "description": "/** A column was resized. */",
      "type": {
        "arguments": { "event": "ColumnResizedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnResized" }
    },
    "onColumnMoved": {
      "description": "/** A column was moved. */",
      "type": {
        "arguments": { "event": "ColumnMovedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnMoved" }
    },
    "columnMoved": {
      "description": "/** A column was moved. */",
      "type": {
        "arguments": { "event": "ColumnMovedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnMoved" }
    },
    "onColumnValueChanged": {
      "description": "/** A value column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChanged" }
    },
    "columnValueChanged": {
      "description": "/** A value column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChanged" }
    },
    "onColumnPivotModeChanged": {
      "description": "/** The pivot mode flag was changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotModeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotModeChanged" }
    },
    "columnPivotModeChanged": {
      "description": "/** The pivot mode flag was changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotModeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotModeChanged" }
    },
    "onColumnPivotChanged": {
      "description": "/** A pivot column was added, removed or order changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChanged" }
    },
    "columnPivotChanged": {
      "description": "/** A pivot column was added, removed or order changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChanged" }
    },
    "onColumnGroupOpened": {
      "description": "/** A column group was opened / closed. */",
      "type": {
        "arguments": { "event": "ColumnGroupOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnGroupOpened" }
    },
    "columnGroupOpened": {
      "description": "/** A column group was opened / closed. */",
      "type": {
        "arguments": { "event": "ColumnGroupOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnGroupOpened" }
    },
    "onNewColumnsLoaded": {
      "description": "/** User set new columns. */",
      "type": {
        "arguments": { "event": "NewColumnsLoadedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onNewColumnsLoaded" }
    },
    "newColumnsLoaded": {
      "description": "/** User set new columns. */",
      "type": {
        "arguments": { "event": "NewColumnsLoadedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onNewColumnsLoaded" }
    },
    "onGridColumnsChanged": {
      "description": "/** The list of grid columns changed. */",
      "type": {
        "arguments": { "event": "GridColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridColumnsChanged" }
    },
    "gridColumnsChanged": {
      "description": "/** The list of grid columns changed. */",
      "type": {
        "arguments": { "event": "GridColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridColumnsChanged" }
    },
    "onDisplayedColumnsChanged": {
      "description": "/** The list of displayed columns changed. This can result from columns open / close, column move, pivot, group, etc. */",
      "type": {
        "arguments": { "event": "DisplayedColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDisplayedColumnsChanged" }
    },
    "displayedColumnsChanged": {
      "description": "/** The list of displayed columns changed. This can result from columns open / close, column move, pivot, group, etc. */",
      "type": {
        "arguments": { "event": "DisplayedColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDisplayedColumnsChanged" }
    },
    "onVirtualColumnsChanged": {
      "description": "/** The list of rendered columns changed (only columns in the visible scrolled viewport are rendered by default). */",
      "type": {
        "arguments": { "event": "VirtualColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualColumnsChanged" }
    },
    "virtualColumnsChanged": {
      "description": "/** The list of rendered columns changed (only columns in the visible scrolled viewport are rendered by default). */",
      "type": {
        "arguments": { "event": "VirtualColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualColumnsChanged" }
    },
    "onColumnEverythingChanged": {
      "description": "/** Shotgun - gets called when either a) new columns are set or b) `columnApi.applyColumnState()` is used, so everything has changed. */",
      "type": {
        "arguments": { "event": "ColumnEverythingChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnEverythingChanged" }
    },
    "columnEverythingChanged": {
      "description": "/** Shotgun - gets called when either a) new columns are set or b) `columnApi.applyColumnState()` is used, so everything has changed. */",
      "type": {
        "arguments": { "event": "ColumnEverythingChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnEverythingChanged" }
    },
    "onComponentStateChanged": {
      "description": "/** Only used by Angular, React and VueJS AG Grid components (not used if doing plain JavaScript).\n     * If the grid receives changes due to bound properties, this event fires after the grid has finished processing the change.\n     */",
      "type": {
        "arguments": { "event": "ComponentStateChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onComponentStateChanged" }
    },
    "componentStateChanged": {
      "description": "/** Only used by Angular, React and VueJS AG Grid components (not used if doing plain JavaScript).\n     * If the grid receives changes due to bound properties, this event fires after the grid has finished processing the change.\n     */",
      "type": {
        "arguments": { "event": "ComponentStateChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onComponentStateChanged" }
    },
    "onCellValueChanged": {
      "description": "/** Value has changed after editing (this event will not fire if editing was cancelled, eg ESC was pressed) or\n     *  if cell value has changed as a result of cut, paste, cell clear (pressing Delete key),\n     * fill handle, copy range down, undo and redo.\n    */",
      "type": {
        "arguments": { "event": "CellValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellValueChanged" }
    },
    "cellValueChanged": {
      "description": "/** Value has changed after editing (this event will not fire if editing was cancelled, eg ESC was pressed) or\n     *  if cell value has changed as a result of cut, paste, cell clear (pressing Delete key),\n     * fill handle, copy range down, undo and redo.\n    */",
      "type": {
        "arguments": { "event": "CellValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellValueChanged" }
    },
    "onCellEditRequest": {
      "description": "/** Value has changed after editing. Only fires when `readOnlyEdit=true`. */",
      "type": {
        "arguments": { "event": "CellEditRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditRequest" }
    },
    "cellEditRequest": {
      "description": "/** Value has changed after editing. Only fires when `readOnlyEdit=true`. */",
      "type": {
        "arguments": { "event": "CellEditRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditRequest" }
    },
    "onRowValueChanged": {
      "description": "/** A cell's value within a row has changed. This event corresponds to Full Row Editing only. */",
      "type": {
        "arguments": { "event": "RowValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowValueChanged" }
    },
    "rowValueChanged": {
      "description": "/** A cell's value within a row has changed. This event corresponds to Full Row Editing only. */",
      "type": {
        "arguments": { "event": "RowValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowValueChanged" }
    },
    "onCellEditingStarted": {
      "description": "/** Editing a cell has started. */",
      "type": {
        "arguments": { "event": "CellEditingStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStarted" }
    },
    "cellEditingStarted": {
      "description": "/** Editing a cell has started. */",
      "type": {
        "arguments": { "event": "CellEditingStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStarted" }
    },
    "onCellEditingStopped": {
      "description": "/** Editing a cell has stopped. */",
      "type": {
        "arguments": { "event": "CellEditingStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStopped" }
    },
    "cellEditingStopped": {
      "description": "/** Editing a cell has stopped. */",
      "type": {
        "arguments": { "event": "CellEditingStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStopped" }
    },
    "onRowEditingStarted": {
      "description": "/** Editing a row has started (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStarted` will be fired for each individual cell. Only fires when doing Full Row Editing. */",
      "type": {
        "arguments": { "event": "RowEditingStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStarted" }
    },
    "rowEditingStarted": {
      "description": "/** Editing a row has started (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStarted` will be fired for each individual cell. Only fires when doing Full Row Editing. */",
      "type": {
        "arguments": { "event": "RowEditingStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStarted" }
    },
    "onRowEditingStopped": {
      "description": "/** Editing a row has stopped (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStopped` will be fired for each individual cell. Only fires when doing Full Row Editing. */",
      "type": {
        "arguments": { "event": "RowEditingStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStopped" }
    },
    "rowEditingStopped": {
      "description": "/** Editing a row has stopped (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStopped` will be fired for each individual cell. Only fires when doing Full Row Editing. */",
      "type": {
        "arguments": { "event": "RowEditingStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStopped" }
    },
    "onUndoStarted": {
      "description": "/** Undo operation has started. */",
      "type": {
        "arguments": { "event": "UndoStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onUndoStarted" }
    },
    "undoStarted": {
      "description": "/** Undo operation has started. */",
      "type": {
        "arguments": { "event": "UndoStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onUndoStarted" }
    },
    "onUndoEnded": {
      "description": "/** Undo operation has ended. */",
      "type": {
        "arguments": { "event": "UndoEndedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onUndoEnded" }
    },
    "undoEnded": {
      "description": "/** Undo operation has ended. */",
      "type": {
        "arguments": { "event": "UndoEndedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onUndoEnded" }
    },
    "onRedoStarted": {
      "description": "/** Redo operation has started. */",
      "type": {
        "arguments": { "event": "RedoStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRedoStarted" }
    },
    "redoStarted": {
      "description": "/** Redo operation has started. */",
      "type": {
        "arguments": { "event": "RedoStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRedoStarted" }
    },
    "onRedoEnded": {
      "description": "/** Redo operation has ended. */",
      "type": {
        "arguments": { "event": "RedoEndedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRedoEnded" }
    },
    "redoEnded": {
      "description": "/** Redo operation has ended. */",
      "type": {
        "arguments": { "event": "RedoEndedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRedoEnded" }
    },
    "onFilterOpened": {
      "description": "/** Filter has been opened. */",
      "type": {
        "arguments": { "event": "FilterOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterOpened" }
    },
    "filterOpened": {
      "description": "/** Filter has been opened. */",
      "type": {
        "arguments": { "event": "FilterOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterOpened" }
    },
    "onFilterChanged": {
      "description": "/** Filter has been modified and applied. */",
      "type": {
        "arguments": { "event": "FilterChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterChanged" }
    },
    "filterChanged": {
      "description": "/** Filter has been modified and applied. */",
      "type": {
        "arguments": { "event": "FilterChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterChanged" }
    },
    "onFilterModified": {
      "description": "/** Filter was modified but not applied. Used when filters have 'Apply' buttons. */",
      "type": {
        "arguments": { "event": "FilterModifiedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterModified" }
    },
    "filterModified": {
      "description": "/** Filter was modified but not applied. Used when filters have 'Apply' buttons. */",
      "type": {
        "arguments": { "event": "FilterModifiedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterModified" }
    },
    "onChartCreated": {
      "description": "/** A chart has been created. */",
      "type": {
        "arguments": { "event": "ChartCreated<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartCreated" }
    },
    "chartCreated": {
      "description": "/** A chart has been created. */",
      "type": {
        "arguments": { "event": "ChartCreated<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartCreated" }
    },
    "onChartRangeSelectionChanged": {
      "description": "/** The data range for the chart has been changed. */",
      "type": {
        "arguments": { "event": "ChartRangeSelectionChanged<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartRangeSelectionChanged" }
    },
    "chartRangeSelectionChanged": {
      "description": "/** The data range for the chart has been changed. */",
      "type": {
        "arguments": { "event": "ChartRangeSelectionChanged<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartRangeSelectionChanged" }
    },
    "onChartOptionsChanged": {
      "description": "/** Formatting changes have been made by users through the Format Panel. */",
      "type": {
        "arguments": { "event": "ChartOptionsChanged<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartOptionsChanged" }
    },
    "chartOptionsChanged": {
      "description": "/** Formatting changes have been made by users through the Format Panel. */",
      "type": {
        "arguments": { "event": "ChartOptionsChanged<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartOptionsChanged" }
    },
    "onChartDestroyed": {
      "description": "/** A chart has been destroyed. */",
      "type": {
        "arguments": { "event": "ChartDestroyed<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartDestroyed" }
    },
    "chartDestroyed": {
      "description": "/** A chart has been destroyed. */",
      "type": {
        "arguments": { "event": "ChartDestroyed<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartDestroyed" }
    },
    "onCellKeyDown": {
      "description": "/** DOM event `keyDown` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyDownEvent<TData> | FullWidthCellKeyDownEvent<TData>"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyDown" }
    },
    "cellKeyDown": {
      "description": "/** DOM event `keyDown` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyDownEvent<TData> | FullWidthCellKeyDownEvent<TData>"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyDown" }
    },
    "onCellKeyPress": {
      "description": "/** DOM event `keyPress` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyPressEvent<TData> | FullWidthCellKeyPressEvent<TData>"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyPress" }
    },
    "cellKeyPress": {
      "description": "/** DOM event `keyPress` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyPressEvent<TData> | FullWidthCellKeyPressEvent<TData>"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyPress" }
    },
    "onGridReady": {
      "description": "/** The grid has initialised and is ready for most api calls, but may not be fully rendered yet  */",
      "type": {
        "arguments": { "event": "GridReadyEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridReady" }
    },
    "gridReady": {
      "description": "/** The grid has initialised and is ready for most api calls, but may not be fully rendered yet  */",
      "type": {
        "arguments": { "event": "GridReadyEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridReady" }
    },
    "onFirstDataRendered": {
      "description": "/** Fired the first time data is rendered into the grid. Use this event if you want to auto resize columns based on their contents */",
      "type": {
        "arguments": { "event": "FirstDataRenderedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFirstDataRendered" }
    },
    "firstDataRendered": {
      "description": "/** Fired the first time data is rendered into the grid. Use this event if you want to auto resize columns based on their contents */",
      "type": {
        "arguments": { "event": "FirstDataRenderedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFirstDataRendered" }
    },
    "onGridSizeChanged": {
      "description": "/** The size of the grid `div` has changed. In other words, the grid was resized. */",
      "type": {
        "arguments": { "event": "GridSizeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridSizeChanged" }
    },
    "gridSizeChanged": {
      "description": "/** The size of the grid `div` has changed. In other words, the grid was resized. */",
      "type": {
        "arguments": { "event": "GridSizeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridSizeChanged" }
    },
    "onModelUpdated": {
      "description": "/** Displayed rows have changed. Triggered after sort, filter or tree expand / collapse events. */",
      "type": {
        "arguments": { "event": "ModelUpdatedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onModelUpdated" }
    },
    "modelUpdated": {
      "description": "/** Displayed rows have changed. Triggered after sort, filter or tree expand / collapse events. */",
      "type": {
        "arguments": { "event": "ModelUpdatedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onModelUpdated" }
    },
    "onVirtualRowRemoved": {
      "description": "/** A row was removed from the DOM, for any reason. Use to clean up resources (if any) used by the row. */",
      "type": {
        "arguments": { "event": "VirtualRowRemovedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualRowRemoved" }
    },
    "virtualRowRemoved": {
      "description": "/** A row was removed from the DOM, for any reason. Use to clean up resources (if any) used by the row. */",
      "type": {
        "arguments": { "event": "VirtualRowRemovedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualRowRemoved" }
    },
    "onViewportChanged": {
      "description": "/** Which rows are rendered in the DOM has changed. */",
      "type": {
        "arguments": { "event": "ViewportChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onViewportChanged" }
    },
    "viewportChanged": {
      "description": "/** Which rows are rendered in the DOM has changed. */",
      "type": {
        "arguments": { "event": "ViewportChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onViewportChanged" }
    },
    "onBodyScroll": {
      "description": "/** The body was scrolled horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScroll" }
    },
    "bodyScroll": {
      "description": "/** The body was scrolled horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScroll" }
    },
    "onBodyScrollEnd": {
      "description": "/** Main body of the grid has stopped scrolling, either horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEndEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScrollEnd" }
    },
    "bodyScrollEnd": {
      "description": "/** Main body of the grid has stopped scrolling, either horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEndEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScrollEnd" }
    },
    "onDragStarted": {
      "description": "/** When dragging starts. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStarted" }
    },
    "dragStarted": {
      "description": "/** When dragging starts. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStarted" }
    },
    "onDragStopped": {
      "description": "/** When dragging stops. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStopped" }
    },
    "dragStopped": {
      "description": "/** When dragging stops. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStopped" }
    },
    "onPaginationChanged": {
      "description": "/** Triggered every time the paging state changes. Some of the most common scenarios for this event to be triggered are:\n     *\n     *  - The page size changes.\n     *  - The current shown page is changed.\n     *  - New data is loaded onto the grid.\n     */",
      "type": {
        "arguments": { "event": "PaginationChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPaginationChanged" }
    },
    "paginationChanged": {
      "description": "/** Triggered every time the paging state changes. Some of the most common scenarios for this event to be triggered are:\n     *\n     *  - The page size changes.\n     *  - The current shown page is changed.\n     *  - New data is loaded onto the grid.\n     */",
      "type": {
        "arguments": { "event": "PaginationChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPaginationChanged" }
    },
    "onRowDragEnter": {
      "description": "/** A drag has started, or dragging was already started and the mouse has re-entered the grid having previously left the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnter" }
    },
    "rowDragEnter": {
      "description": "/** A drag has started, or dragging was already started and the mouse has re-entered the grid having previously left the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnter" }
    },
    "onRowDragMove": {
      "description": "/** The mouse has moved while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragMove" }
    },
    "rowDragMove": {
      "description": "/** The mouse has moved while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragMove" }
    },
    "onRowDragLeave": {
      "description": "/** The mouse has left the grid while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragLeave" }
    },
    "rowDragLeave": {
      "description": "/** The mouse has left the grid while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragLeave" }
    },
    "onRowDragEnd": {
      "description": "/** The drag has finished over the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnd" }
    },
    "rowDragEnd": {
      "description": "/** The drag has finished over the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnd" }
    },
    "onColumnRowGroupChanged": {
      "description": "/** A row group column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnRowGroupChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChanged" }
    },
    "columnRowGroupChanged": {
      "description": "/** A row group column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnRowGroupChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChanged" }
    },
    "onRowGroupOpened": {
      "description": "/** A row group was opened or closed. */",
      "type": {
        "arguments": { "event": "RowGroupOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowGroupOpened" }
    },
    "rowGroupOpened": {
      "description": "/** A row group was opened or closed. */",
      "type": {
        "arguments": { "event": "RowGroupOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowGroupOpened" }
    },
    "onExpandOrCollapseAll": {
      "description": "/** Fired when calling either of the API methods `expandAll()` or `collapseAll()`. */",
      "type": {
        "arguments": { "event": "ExpandCollapseAllEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onExpandOrCollapseAll" }
    },
    "expandOrCollapseAll": {
      "description": "/** Fired when calling either of the API methods `expandAll()` or `collapseAll()`. */",
      "type": {
        "arguments": { "event": "ExpandCollapseAllEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onExpandOrCollapseAll" }
    },
    "onPinnedRowDataChanged": {
      "description": "/** The client has set new pinned row data into the grid. */",
      "type": {
        "arguments": { "event": "PinnedRowDataChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPinnedRowDataChanged" }
    },
    "pinnedRowDataChanged": {
      "description": "/** The client has set new pinned row data into the grid. */",
      "type": {
        "arguments": { "event": "PinnedRowDataChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPinnedRowDataChanged" }
    },
    "onRowDataChanged": {
      "description": "/** @deprecated v28 No longer fired, use onRowDataUpdated instead */",
      "type": {
        "arguments": { "event": "RowDataChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataChanged" }
    },
    "rowDataChanged": {
      "description": "/** @deprecated v28 No longer fired, use onRowDataUpdated instead */",
      "type": {
        "arguments": { "event": "RowDataChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataChanged" }
    },
    "onRowDataUpdated": {
      "description": "/** The client has updated data for the grid by either a) setting new Row Data or b) Applying a Row Transaction. */",
      "type": {
        "arguments": { "event": "RowDataUpdatedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataUpdated" }
    },
    "rowDataUpdated": {
      "description": "/** The client has updated data for the grid by either a) setting new Row Data or b) Applying a Row Transaction. */",
      "type": {
        "arguments": { "event": "RowDataUpdatedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataUpdated" }
    },
    "onAsyncTransactionsFlushed": {
      "description": "/** Async transactions have been applied. Contains a list of all transaction results. */",
      "type": {
        "arguments": { "event": "AsyncTransactionsFlushed<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onAsyncTransactionsFlushed" }
    },
    "asyncTransactionsFlushed": {
      "description": "/** Async transactions have been applied. Contains a list of all transaction results. */",
      "type": {
        "arguments": { "event": "AsyncTransactionsFlushed<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onAsyncTransactionsFlushed" }
    },
    "onStoreRefreshed": {
      "description": "/** A server side store has finished refreshing. */",
      "type": {
        "arguments": { "event": "StoreRefreshedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onStoreRefreshed" }
    },
    "storeRefreshed": {
      "description": "/** A server side store has finished refreshing. */",
      "type": {
        "arguments": { "event": "StoreRefreshedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onStoreRefreshed" }
    },
    "onCellClicked": {
      "description": "/** Cell is clicked. */",
      "type": {
        "arguments": { "event": "CellClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellClicked" }
    },
    "cellClicked": {
      "description": "/** Cell is clicked. */",
      "type": {
        "arguments": { "event": "CellClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellClicked" }
    },
    "onCellDoubleClicked": {
      "description": "/** Cell is double clicked. */",
      "type": {
        "arguments": { "event": "CellDoubleClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellDoubleClicked" }
    },
    "cellDoubleClicked": {
      "description": "/** Cell is double clicked. */",
      "type": {
        "arguments": { "event": "CellDoubleClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellDoubleClicked" }
    },
    "onCellFocused": {
      "description": "/** Cell is focused. */",
      "type": {
        "arguments": { "event": "CellFocusedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellFocused" }
    },
    "cellFocused": {
      "description": "/** Cell is focused. */",
      "type": {
        "arguments": { "event": "CellFocusedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellFocused" }
    },
    "onCellMouseOver": {
      "description": "/** Mouse entered cell. */",
      "type": {
        "arguments": { "event": "CellMouseOverEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOver" }
    },
    "cellMouseOver": {
      "description": "/** Mouse entered cell. */",
      "type": {
        "arguments": { "event": "CellMouseOverEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOver" }
    },
    "onCellMouseOut": {
      "description": "/** Mouse left cell. */",
      "type": {
        "arguments": { "event": "CellMouseOutEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOut" }
    },
    "cellMouseOut": {
      "description": "/** Mouse left cell. */",
      "type": {
        "arguments": { "event": "CellMouseOutEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOut" }
    },
    "onCellMouseDown": {
      "description": "/** Mouse down on cell. */",
      "type": {
        "arguments": { "event": "CellMouseDownEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseDown" }
    },
    "cellMouseDown": {
      "description": "/** Mouse down on cell. */",
      "type": {
        "arguments": { "event": "CellMouseDownEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseDown" }
    },
    "onRowClicked": {
      "description": "/** Row is clicked. */",
      "type": {
        "arguments": { "event": "RowClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowClicked" }
    },
    "rowClicked": {
      "description": "/** Row is clicked. */",
      "type": {
        "arguments": { "event": "RowClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowClicked" }
    },
    "onRowDoubleClicked": {
      "description": "/** Row is double clicked. */",
      "type": {
        "arguments": { "event": "RowDoubleClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDoubleClicked" }
    },
    "rowDoubleClicked": {
      "description": "/** Row is double clicked. */",
      "type": {
        "arguments": { "event": "RowDoubleClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDoubleClicked" }
    },
    "onRowSelected": {
      "description": "/** Row is selected or deselected. The event contains the node in question, so call the node's `isSelected()` method to see if it was just selected or deselected. */",
      "type": {
        "arguments": { "event": "RowSelectedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowSelected" }
    },
    "rowSelected": {
      "description": "/** Row is selected or deselected. The event contains the node in question, so call the node's `isSelected()` method to see if it was just selected or deselected. */",
      "type": {
        "arguments": { "event": "RowSelectedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowSelected" }
    },
    "onSelectionChanged": {
      "description": "/** Row selection is changed. Use the grid API `getSelectedNodes()` or `getSelectedRows()` to get the new list of selected nodes / row data. */",
      "type": {
        "arguments": { "event": "SelectionChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSelectionChanged" }
    },
    "selectionChanged": {
      "description": "/** Row selection is changed. Use the grid API `getSelectedNodes()` or `getSelectedRows()` to get the new list of selected nodes / row data. */",
      "type": {
        "arguments": { "event": "SelectionChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSelectionChanged" }
    },
    "onCellContextMenu": {
      "description": "/** Cell is right clicked. */",
      "type": {
        "arguments": { "event": "CellContextMenuEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellContextMenu" }
    },
    "cellContextMenu": {
      "description": "/** Cell is right clicked. */",
      "type": {
        "arguments": { "event": "CellContextMenuEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellContextMenu" }
    },
    "onRangeSelectionChanged": {
      "description": "/** A change to range selection has occurred. */",
      "type": {
        "arguments": { "event": "RangeSelectionChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRangeSelectionChanged" }
    },
    "rangeSelectionChanged": {
      "description": "/** A change to range selection has occurred. */",
      "type": {
        "arguments": { "event": "RangeSelectionChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRangeSelectionChanged" }
    },
    "onSortChanged": {
      "description": "/** Sort has changed. The grid also listens for this and updates the model. */",
      "type": {
        "arguments": { "event": "SortChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSortChanged" }
    },
    "sortChanged": {
      "description": "/** Sort has changed. The grid also listens for this and updates the model. */",
      "type": {
        "arguments": { "event": "SortChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSortChanged" }
    },
    "onColumnRowGroupChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnRowGroupChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChangeRequest" }
    },
    "columnRowGroupChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnRowGroupChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChangeRequest" }
    },
    "onColumnPivotChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnPivotChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChangeRequest" }
    },
    "columnPivotChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnPivotChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChangeRequest" }
    },
    "onColumnValueChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnValueChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChangeRequest" }
    },
    "columnValueChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnValueChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChangeRequest" }
    },
    "onColumnAggFuncChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnAggFuncChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnAggFuncChangeRequest" }
    },
    "columnAggFuncChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnAggFuncChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnAggFuncChangeRequest" }
    },
    "api": {
      "description": "/** The Grid Api for interacting with the grid.\n     * Set by the grid on init, set to null on destroy.\n     */",
      "type": { "returnType": "GridApi<TData> | null", "optional": true }
    },
    "columnApi": {
      "description": "/** The Column Api for interacting with the grid columns.\n     * Set by the grid on init, set to null on destroy.\n     */",
      "type": { "returnType": "ColumnApi | null", "optional": true }
    }
  },
  "AgGridReactProps": {
    "disableStaticMarkup": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "legacyComponentRendering": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "meta": { "typeParams": ["TData = any"] },
    "gridOptions": {
      "type": { "returnType": "GridOptions<TData>", "optional": true }
    },
    "modules": { "type": { "returnType": "Module[]", "optional": true } },
    "containerStyle": { "type": { "returnType": "any", "optional": true } },
    "className": { "type": { "returnType": "string", "optional": true } },
    "setGridApi": {
      "type": {
        "arguments": { "gridApi": "GridApi<TData>", "columnApi": "ColumnApi" },
        "returnType": "void",
        "optional": true
      }
    },
    "componentWrappingElement": {
      "type": { "returnType": "string", "optional": true }
    },
    "maxComponentCreationTimeMs": {
      "type": { "returnType": "number", "optional": true }
    },
    "rowDataChangeDetectionStrategy": {
      "description": "/** @deprecated v29 ChangeDetectionStrategyType has been deprecated. IdentityCheck will always be used now for a more consistent approach. */",
      "type": { "returnType": "ChangeDetectionStrategyType", "optional": true }
    },
    "children": { "type": { "returnType": "any", "optional": true } },
    "statusBar": {
      "description": "/** Specifies the status bar components to use in the status bar. */",
      "type": {
        "returnType": "{ statusPanels: StatusPanelDef[]; }",
        "optional": true
      }
    },
    "sideBar": {
      "description": "/** Specifies the side bar components. */",
      "type": {
        "returnType": "SideBarDef | string | string[] | boolean | null",
        "optional": true
      }
    },
    "suppressContextMenu": {
      "description": "/** Set to `true` to not show the context menu. Use if you don't want to use the default 'right click' context menu. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "preventDefaultOnContextMenu": {
      "description": "/** When using `suppressContextMenu`, you can use the `onCellContextMenu` function to provide your own code to handle cell `contextmenu` events.\n     * This flag is useful to prevent the browser from showing its default context menu.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "allowContextMenuWithControlKey": {
      "description": "/** Allows context menu to show, even when `Ctrl` key is held down. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMenuHide": {
      "description": "/** Set to `true` to always show the column menu button, rather than only showing when the mouse is over the column header. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableBrowserTooltips": {
      "description": "/** Set to `true` to use the browser's default tooltip instead of using the grid's Tooltip Component. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "tooltipShowDelay": {
      "description": "/** The delay in milliseconds that it takes for tooltips to show up once an element is hovered over.\n     * **Note:** This property does not work if `enableBrowserTooltips` is `true`.\n     * Default: `2000`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "tooltipHideDelay": {
      "description": "/** The delay in milliseconds that it takes for tooltips to hide once they have been displayed.\n     * **Note:** This property does not work if `enableBrowserTooltips` is `true`.\n     * Default: `10000`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "tooltipMouseTrack": {
      "description": "/** Set to `true` to have tooltips follow the cursor once they are displayed. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "popupParent": {
      "description": "/** DOM element to use as the popup parent for grid popups (context menu, column menu etc). */",
      "type": { "returnType": "HTMLElement | null", "optional": true }
    },
    "copyHeadersToClipboard": {
      "description": "/** Set to `true` to also include headers when copying to clipboard using `Ctrl + C` clipboard. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "copyGroupHeadersToClipboard": {
      "description": "/** Set to `true` to also include group headers when copying to clipboard using `Ctrl + C` clipboard. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "clipboardDeliminator": {
      "description": "/** @deprecated v27.1 Use `clipboardDelimiter` */",
      "type": { "returnType": "string", "optional": true }
    },
    "clipboardDelimiter": {
      "description": "/** Specify the delimiter to use when copying to clipboard.\n     * Default: `\\t`\n    */",
      "type": { "returnType": "string", "optional": true }
    },
    "suppressCopyRowsToClipboard": {
      "description": "/** Set to `true` to copy the cell range or focused cell to the clipboard and never the selected rows. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressCopySingleCellRanges": {
      "description": "/** Set to `true` to copy rows instead of ranges when a range with only a single cell is selected. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressLastEmptyLineOnPaste": {
      "description": "/** Set to `true` to work around a bug with Excel (Windows) that adds an extra empty line at the end of ranges copied to the clipboard. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressClipboardPaste": {
      "description": "/** Set to `true` to turn off paste operations within the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressClipboardApi": {
      "description": "/** Set to `true` to stop the grid trying to use the Clipboard API, if it is blocked, and immediately fallback to the workaround. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressCutToClipboard": {
      "description": "/** Set to `true` to block **cut** operations within the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "columnDefs": {
      "description": "/** Array of Column / Column Group definitions. */",
      "type": {
        "returnType": "(ColDef<TData> | ColGroupDef<TData>)[] | null",
        "optional": true
      }
    },
    "defaultColDef": {
      "description": "/** A default column definition. Items defined in the actual column definitions get precedence. */",
      "type": { "returnType": "ColDef<TData>", "optional": true }
    },
    "defaultColGroupDef": {
      "description": "/** A default column group definition. All column group definitions will use these properties. Items defined in the actual column group definition get precedence. */",
      "type": { "returnType": "Partial<ColGroupDef<TData>>", "optional": true }
    },
    "columnTypes": {
      "description": "/** An object map of custom column types which contain groups of properties that column definitions can inherit by referencing in their `type` property. */",
      "type": {
        "returnType": "{ [key: string]: ColDef<TData>; }",
        "optional": true
      }
    },
    "maintainColumnOrder": {
      "description": "/** Keeps the order of Columns maintained after new Column Definitions are updated. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressFieldDotNotation": {
      "description": "/** If `true`, then dots in field names (e.g. `'address.firstLine'`) are not treated as deep references. Allows you to use dots in your field name if you prefer. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "headerHeight": {
      "description": "/** The height in pixels for the row containing the column label header. If not specified, it uses the theme value of `header-height`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "groupHeaderHeight": {
      "description": "/** The height in pixels for the rows containing header column groups. If not specified, it uses `headerHeight`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "floatingFiltersHeight": {
      "description": "/** The height in pixels for the row containing the floating filters. If not specified, it uses the theme value of `header-height`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "pivotHeaderHeight": {
      "description": "/** The height in pixels for the row containing the columns when in pivot mode. If not specified, it uses `headerHeight`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "pivotGroupHeaderHeight": {
      "description": "/** The height in pixels for the row containing header column groups when in pivot mode. If not specified, it uses `groupHeaderHeight`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "allowDragFromColumnsToolPanel": {
      "description": "/** Allow reordering and pinning columns by dragging columns from the Columns Tool Panel to the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMovableColumns": {
      "description": "/** Set to `true` to suppress column moving, i.e. to make the columns fixed position. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressColumnMoveAnimation": {
      "description": "/** If `true`, the `ag-column-moving` class is not added to the grid while columns are moving. In the default themes, this results in no animation when moving columns. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressDragLeaveHidesColumns": {
      "description": "/** If `true`, when you drag a column out of the grid (e.g. to the group zone) the column is not hidden. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowGroupHidesColumns": {
      "description": "/** If `true`, when you drag a column into a row group panel the column is not hidden. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "colResizeDefault": {
      "description": "/** Set to `'shift'` to have shift-resize as the default resize operation (same as user holding down `Shift` while resizing). */",
      "type": { "returnType": "'shift'", "optional": true }
    },
    "suppressAutoSize": {
      "description": "/** Suppresses auto-sizing columns for columns. In other words, double clicking a column's header's edge will not auto-size. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "autoSizePadding": {
      "description": "/** Number of pixels to add to a column width after the [auto-sizing](/column-sizing/#auto-size-columns) calculation.\n     * Set this if you want to add extra room to accommodate (for example) sort icons, or some other dynamic nature of the header.\n     * Default: `20`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "skipHeaderOnAutoSize": {
      "description": "/** Set this to `true` to skip the `headerName` when `autoSize` is called by default. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "components": {
      "description": "/** A map of component names to components. */",
      "type": { "returnType": "{ [p: string]: any; }", "optional": true }
    },
    "frameworkComponents": {
      "description": "/** @deprecated As of v27, use `components` for framework components too. */",
      "type": {
        "returnType": "{ [p: string]: { new(): any; }; } | any",
        "optional": true
      }
    },
    "reactUi": {
      "description": "/** @deprecated React UI is enabled by default. Use suppressReactUi=true to turn it off. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressReactUi": {
      "description": "/** @deprecated Set to true to enable the experimental React UI. Works with React framework only.\n     * It is planned the next major release of the grid will drop support of the legacy React engine,\n     * hence this property is deprecated as will be removed in the next major release. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "editType": {
      "description": "/** Set to `'fullRow'` to enable Full Row Editing. Otherwise leave blank to edit one cell at a time. */",
      "type": { "returnType": "'fullRow'", "optional": true }
    },
    "singleClickEdit": {
      "description": "/** Set to `true` to enable Single Click Editing for cells, to start editing with a single click. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressClickEdit": {
      "description": "/** Set to `true` so that neither single nor double click starts editing. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "readOnlyEdit": {
      "description": "/** Set to `true` to stop the grid updating data after `Edit`, `Clipboard` and `Fill Handle` operations. When this is set, it is intended the application will update the data, eg in an external immutable store, and then pass the new dataset to the grid. <br />**Note:** `rowNode.setDataValue()` does not update the value of the cell when this is `True`, it fires `onCellEditRequest` instead. Default: `false`.     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "stopEditingWhenCellsLoseFocus": {
      "description": "/** Set this to `true` to stop cell editing when grid loses focus.\n     * The default is that the grid stays editing until focus goes onto another cell.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enterMovesDown": {
      "description": "/** Set to `true` along with `enterMovesDownAfterEdit` to have Excel-style behaviour for the `Enter` key.\n     * i.e. pressing the `Enter` key will move down to the cell beneath.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enterMovesDownAfterEdit": {
      "description": "/** Set to `true` along with `enterMovesDown` to have Excel-style behaviour for the 'Enter' key.\n     * i.e. pressing the Enter key will move down to the cell beneath.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellEditingOnBackspace": {
      "description": "/** Forces Cell Editing to start when backspace is pressed. This is only relevant for MacOS users. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "undoRedoCellEditing": {
      "description": "/** Set to `true` to enable Undo / Redo while editing. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "undoRedoCellEditingLimit": {
      "description": "/** Set the size of the undo / redo stack. Default: `10` */",
      "type": { "returnType": "number", "optional": true }
    },
    "defaultCsvExportParams": {
      "description": "/** A default configuration object used to export to CSV. */",
      "type": { "returnType": "CsvExportParams", "optional": true }
    },
    "suppressCsvExport": {
      "description": "/** Prevents the user from exporting the grid to CSV. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "defaultExcelExportParams": {
      "description": "/** A default configuration object used to export to Excel. */",
      "type": { "returnType": "ExcelExportParams", "optional": true }
    },
    "suppressExcelExport": {
      "description": "/** Prevents the user from exporting the grid to Excel. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "excelStyles": {
      "description": "/** A list (array) of Excel styles to be used when exporting to Excel with styles. */",
      "type": { "returnType": "ExcelStyle[]", "optional": true }
    },
    "quickFilterText": {
      "description": "/** Rows are filtered using this text as a Quick Filter. */",
      "type": { "returnType": "string", "optional": true }
    },
    "cacheQuickFilter": {
      "description": "/** Set to `true` to turn on the Quick Filter cache, used to improve performance when using the Quick Filter. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "excludeHiddenColumnsFromQuickFilter": {
      "description": "/** Set to `true` to exclude hidden columns from being checked by the Quick Filter.\n     * This can give a significant performance improvement when there are a large number of hidden columns,\n     * and you are only interested in filtering on what's visible. Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "excludeChildrenWhenTreeDataFiltering": {
      "description": "/** Set to `true` to override the default tree data filtering behaviour to instead exclude child nodes from filter results. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCharts": {
      "description": "/** Set to `true` to Enable Charts. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "chartThemes": {
      "description": "/** The list of chart themes to be used. */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "customChartThemes": {
      "description": "/** A map containing custom chart themes. */",
      "type": {
        "returnType": "{ [name: string]: AgChartTheme }",
        "optional": true
      }
    },
    "chartThemeOverrides": {
      "description": "/** Chart theme overrides applied to all themes. */",
      "type": { "returnType": "AgChartThemeOverrides", "optional": true }
    },
    "enableChartToolPanelsButton": {
      "description": "/** @deprecated As of v29, no longer used. To suppress use `suppressChartToolPanelsButton`. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressChartToolPanelsButton": {
      "description": "/** Set to `true` to show the 'hamburger' menu option from the Chart Toolbar and display the remaining toolbar buttons. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "chartToolPanelsDef": {
      "description": "/** Allows customisation of the Chart Tool Panels, such as changing the tool panels visibility and order, as well as choosing which charts should be displayed in the settings panel. */",
      "type": { "returnType": "ChartToolPanelsDef", "optional": true }
    },
    "loadingCellRenderer": {
      "description": "/** Provide your own loading cell renderer to use when data is loading via a DataSource.\n    * See [Loading Cell Renderer](https://www.ag-grid.com/javascript-data-grid/component-loading-cell-renderer/) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingCellRendererFramework": {
      "description": "/** @deprecated As of v27, use `loadingCellRenderer` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingCellRendererParams": {
      "description": "/** Params to be passed to the `loadingCellRenderer` component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingCellRendererSelector": {
      "description": "/** Callback to select which loading cell renderer to be used when data is loading via a DataSource. */",
      "type": {
        "returnType": "LoadingCellRendererSelectorFunc<TData>",
        "optional": true
      }
    },
    "localeText": {
      "description": "/** A map of key->value pairs for localising text within the grid. */",
      "type": { "returnType": "{ [key: string]: string }", "optional": true }
    },
    "masterDetail": {
      "description": "/** Set to `true` to enable Master Detail. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "keepDetailRows": {
      "description": "/** Set to `true` to keep detail rows for when they are displayed again. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "keepDetailRowsCount": {
      "description": "/** Sets the number of details rows to keep. Default: `10` */",
      "type": { "returnType": "number", "optional": true }
    },
    "detailCellRenderer": {
      "description": "/** Provide a custom `detailCellRenderer` to use when a master row is expanded.\n    * See [Detail Cell Renderer](https://www.ag-grid.com/javascript-data-grid/master-detail-custom-detail/) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "detailCellRendererFramework": {
      "description": "/** @deprecated As of v27, use `detailCellRenderer` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "detailCellRendererParams": {
      "description": "/** Specifies the params to be used by the Detail Cell Renderer. Can also be a function that provides the params to enable dynamic definitions of the params. */",
      "type": { "returnType": "any", "optional": true }
    },
    "detailRowHeight": {
      "description": "/** Set fixed height in pixels for each detail row. */",
      "type": { "returnType": "number", "optional": true }
    },
    "detailRowAutoHeight": {
      "description": "/** Set to `true` to have the detail grid dynamically change it's height to fit it's rows. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "context": {
      "description": "/** Provides a context object that is provided to different callbacks the grid uses. Used for passing additional information to the callbacks by your application. */",
      "type": { "returnType": "any", "optional": true }
    },
    "alignedGrids": {
      "description": "/** A list of grids to treat as Aligned Grids. If grids are aligned then the columns and horizontal scrolling will be kept in sync. */",
      "type": {
        "returnType": "{ api?: GridApi | null, columnApi?: ColumnApi | null }[]",
        "optional": true
      }
    },
    "tabIndex": {
      "description": "/** Change this value to set the tabIndex order of the Grid within your application. Default: `0` */",
      "type": { "returnType": "number", "optional": true }
    },
    "rowBuffer": {
      "description": "/** The number of rows rendered outside the viewable area the grid renders.\n     * Having a buffer means the grid will have rows ready to show as the user slowly scrolls vertically.\n     * Default: `10`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "valueCache": {
      "description": "/** Set to `true` to turn on the value cache. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "valueCacheNeverExpires": {
      "description": "/** Set to `true` to configure the value cache to not expire after data updates. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellExpressions": {
      "description": "/** Set to `true` to allow cell expressions. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressParentsInRowNodes": {
      "description": "/** If `true`, row nodes do not have their parents set.\n     * The grid doesn't use the parent reference, but it is included to help the client code navigate the node tree if it wants by providing bi-direction navigation up and down the tree.\n     * If this is a problem (e.g. if you need to convert the tree to JSON, which does not allow cyclic dependencies) then set this to `true`.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressTouch": {
      "description": "/** Disables touch support (but does not remove the browser's efforts to simulate mouse events on touch). Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressFocusAfterRefresh": {
      "description": "/** Set to `true` to not set focus back on the grid after a refresh. This can avoid issues where you want to keep the focus on another part of the browser. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAsyncEvents": {
      "description": "/** Disables the asynchronous nature of the events introduced in v10, and makes them synchronous. This property only exists for the purpose of supporting legacy code which has a dependency on synchronous events from earlier versions (v9 or earlier) of AG Grid. **It is strongly recommended that you do not change this property unless you have legacy issues.** Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressBrowserResizeObserver": {
      "description": "/** The grid will check for `ResizeObserver` and use it if it exists in the browser, otherwise it will use the grid's alternative implementation. Some users reported issues with Chrome's `ResizeObserver`. Use this property to always use the grid's alternative implementation should such problems exist. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressPropertyNamesCheck": {
      "description": "/** Disables showing a warning message in the console if using a `gridOptions` or `colDef` property that doesn't exist. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressChangeDetection": {
      "description": "/** Disables change detection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debug": {
      "description": "/** Set this to `true` to enable debug information from the grid and related components. Will result in additional logging being output, but very useful when investigating problems. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "overlayLoadingTemplate": {
      "description": "/** Provide a template for 'loading' overlay. */",
      "type": { "returnType": "string", "optional": true }
    },
    "loadingOverlayComponent": {
      "description": "/** Provide a custom loading overlay component.\n    * See [Loading Overlay Component](https://www.ag-grid.com/javascript-data-grid/component-overlay/#simple-loading-overlay-component) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingOverlayComponentFramework": {
      "description": "/** @deprecated As of v27, use `loadingOverlayComponent` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingOverlayComponentParams": {
      "description": "/** Customise the parameters provided to the loading overlay component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "suppressLoadingOverlay": {
      "description": "/** Disables the 'loading' overlay. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "overlayNoRowsTemplate": {
      "description": "/** Provide a template for 'no rows' overlay. */",
      "type": { "returnType": "string", "optional": true }
    },
    "noRowsOverlayComponent": {
      "description": "/** Provide a custom no rows overlay component.\n    * See [No Rows Overlay Component](https://www.ag-grid.com/javascript-data-grid/component-overlay/#simple-no-rows-overlay-component) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "noRowsOverlayComponentFramework": {
      "description": "/** @deprecated As of v27, use `noRowsOverlayComponent` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "noRowsOverlayComponentParams": {
      "description": "/** Customise the parameters provided to the no rows overlay component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "suppressNoRowsOverlay": {
      "description": "/** Disables the 'no rows' overlay. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pagination": {
      "description": "/** Set whether pagination is enabled. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "paginationPageSize": {
      "description": "/** How many rows to load per page. If `paginationAutoPageSize` is specified, this property is ignored. Default: `100` */",
      "type": { "returnType": "number", "optional": true }
    },
    "paginationAutoPageSize": {
      "description": "/** Set to `true` so that the number of rows to load per page is automatically adjusted by the grid so each page shows enough rows to just fill the area designated for the grid. If `false`, `paginationPageSize` is used. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "paginateChildRows": {
      "description": "/** Set to `true` to have pages split children of groups when using Row Grouping or detail rows with Master Detail. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressPaginationPanel": {
      "description": "/** If `true`, the default grid controls for navigation are hidden.\n     * This is useful if `pagination=true` and you want to provide your own pagination controls.\n     * Otherwise, when `pagination=true` the grid automatically shows the necessary controls at the bottom so that the user can navigate through the different pages.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pivotMode": {
      "description": "/** Set to `true` to enable pivot mode. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pivotPanelShow": {
      "description": "/** When to show the 'pivot panel' (where you drag rows to pivot) at the top. Note that the pivot panel will never show if `pivotMode` is off. Default: `never` */",
      "type": {
        "returnType": "'always' | 'onlyWhenPivoting' | 'never'",
        "optional": true
      }
    },
    "pivotColumnGroupTotals": {
      "description": "/** When set and the grid is in pivot mode, automatically calculated totals will appear within the Pivot Column Groups, in the position specified. */",
      "type": { "returnType": "'before' | 'after'", "optional": true }
    },
    "pivotRowTotals": {
      "description": "/** When set and the grid is in pivot mode, automatically calculated totals will appear for each value column in the position specified. */",
      "type": { "returnType": "'before' | 'after'", "optional": true }
    },
    "pivotSuppressAutoColumn": {
      "description": "/** If `true`, the grid will not swap in the grouping column when pivoting. Useful if pivoting using Server Side Row Model or Viewport Row Model and you want full control of all columns including the group column. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressExpandablePivotGroups": {
      "description": "/** When enabled, pivot column groups will appear 'fixed', without the ability to expand and collapse the column groups. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "functionsReadOnly": {
      "description": "/** If `true`, then row group, pivot and value aggregation will be read-only from the GUI. The grid will display what values are used for each, but will not allow the user to change the selection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "aggFuncs": {
      "description": "/** A map of 'function name' to 'function' for custom aggregation functions. */",
      "type": {
        "returnType": "{ [key: string]: IAggFunc<TData>; }",
        "optional": true
      }
    },
    "suppressAggFuncInHeader": {
      "description": "/** When `true`, column headers won't include the `aggFunc` name, e.g. `'sum(Bank Balance)`' will just be `'Bank Balance'`. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAggAtRootLevel": {
      "description": "/** When `true`, the aggregations won't be computed for the root node of the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "aggregateOnlyChangedColumns": {
      "description": "/** When using change detection, only the updated column will be re-aggregated. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAggFilteredOnly": {
      "description": "/** Set to `true` so that aggregations are not impacted by filtering. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "removePivotHeaderRowWhenSingleValueColumn": {
      "description": "/** Set to `true` to omit the value Column header when there is only a single value column. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "animateRows": {
      "description": "/** Set to `true` to enable Row Animation. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellChangeFlash": {
      "description": "/** Set to `true` to have cells flash after data changes. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "cellFlashDelay": {
      "description": "/** To be used in combination with `enableCellChangeFlash`, this configuration will set the delay in milliseconds of how long a cell should remain in its \"flashed\" state.\n     * Default: `500`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "cellFadeDelay": {
      "description": "/** To be used in combination with `enableCellChangeFlash`, this configuration will set the delay in milliseconds of how long the \"flashed\" state animation takes to fade away after the timer set by `cellFlashDelay` has completed.\n     * Default: `1000`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "allowShowChangeAfterFilter": {
      "description": "/** Set to `true` to have cells flash after data changes even when the change is due to filtering. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "domLayout": {
      "description": "/** Switch between layout options: `normal`, `autoHeight`, `print`.\n     * Default: `normal`\n     */",
      "type": { "returnType": "DomLayoutType", "optional": true }
    },
    "ensureDomOrder": {
      "description": "/** When `true`, the order of rows and columns in the DOM are consistent with what is on screen. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableRtl": {
      "description": "/** Set to `true` to operate the grid in RTL (Right to Left) mode. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressColumnVirtualisation": {
      "description": "/** Set to `true` so that the grid doesn't virtualise the columns. For example, if you have 100 columns, but only 10 visible due to scrolling, all 100 will always be rendered. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMaxRenderedRowRestriction": {
      "description": "/** By default the grid has a limit of rendering a maximum of 500 rows at once (remember the grid only renders rows you can see, so unless your display shows more than 500 rows without vertically scrolling this will never be an issue).\n     * <br />**This is only relevant if you are manually setting `rowBuffer` to a high value (rendering more rows than can be seen), or `suppressRowVirtualisation` is true, or if your grid height is able to display more than 500 rows at once.**\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowVirtualisation": {
      "description": "/** Set to `true` so that the grid doesn't virtualise the rows. For example, if you have 100 rows, but only 10 visible due to scrolling, all 100 will always be rendered. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDragManaged": {
      "description": "/** Set to `true` to enable Managed Row Dragging. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowDrag": {
      "description": "/** Set to `true` to suppress row dragging. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMoveWhenRowDragging": {
      "description": "/** Set to `true` to suppress moving rows while dragging the `rowDrag` waffle. This option highlights the position where the row will be placed and it will only move the row on mouse up. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDragEntireRow": {
      "description": "/** Set to `true` to enable clicking and dragging anywhere on the row without the need for a drag handle. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDragMultiRow": {
      "description": "/** Set to `true` to enable dragging multiple rows at the same time. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDragText": {
      "description": "/** A callback that should return a string to be displayed by the `rowDragComp` while dragging a row.\n     * If this callback is not set, the current cell value will be used.\n     * If the `rowDragText` callback is set in the ColDef it will take precedence over this, except when\n     * `rowDragEntireRow=true`.\n     */",
      "type": {
        "arguments": { "params": "IRowDragItem", "dragItemCount": "number" },
        "returnType": "string",
        "optional": true
      }
    },
    "fullWidthCellRenderer": {
      "description": "/** Provide your own cell renderer component to use for full width rows.\n    * See [Full Width Rows](https://www.ag-grid.com/javascript-data-grid/full-width-rows/) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "fullWidthCellRendererFramework": {
      "description": "/** @deprecated As of v27, use `fullWidthCellRenderer` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "fullWidthCellRendererParams": {
      "description": "/** Customise the parameters provided to the `fullWidthCellRenderer` component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "embedFullWidthRows": {
      "description": "/** Set to `true` to have the Full Width Rows embedded in grid's main container so they can be scrolled horizontally . */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupDisplayType": {
      "description": "/** Specifies how the results of row grouping should be displayed.\n     *\n     *  The options are:\n     *\n     * - `'singleColumn'`: single group column automatically added by the grid.\n     * - `'multipleColumns'`: a group column per row group is added automatically.\n     * - `'groupRows'`: group rows are automatically added instead of group columns.\n     * - `'custom'`: informs the grid that group columns will be provided.\n     */",
      "type": { "returnType": "RowGroupingDisplayType", "optional": true }
    },
    "groupDefaultExpanded": {
      "description": "/** If grouping, set to the number of levels to expand by default, e.g. `0` for none, `1` for first level only, etc. Set to `-1` to expand everything. Default: `0` */",
      "type": { "returnType": "number", "optional": true }
    },
    "autoGroupColumnDef": {
      "description": "/** Allows specifying the group 'auto column' if you are not happy with the default. If grouping, this column definition is included as the first column in the grid. If not grouping, this column is not included. */",
      "type": { "returnType": "ColDef<TData>", "optional": true }
    },
    "groupMaintainOrder": {
      "description": "/** When `true`, preserves the current group order when sorting on non-group columns. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupSelectsChildren": {
      "description": "/** When `true`, if you select a group, the children of the group will also be selected. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupAggFiltering": {
      "description": "/** Set to determine whether filters should be applied on aggregated group values. Default: `false` */",
      "type": {
        "returnType": "boolean | IsRowFilterable<TData>",
        "optional": true
      }
    },
    "groupIncludeFooter": {
      "description": "/** If grouping, this controls whether to show a group footer when the group is expanded.\n     * If `true`, then by default, the footer will contain aggregate data (if any) when shown and the header will be blank.\n     * When closed, the header will contain the aggregate data regardless of this setting (as the footer is hidden anyway).\n     * This is handy for 'total' rows, that are displayed below the data when the group is open, and alongside the group when it is closed.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupIncludeTotalFooter": {
      "description": "/** Set to `true` to show a 'grand total' group footer across all groups. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupSuppressBlankHeader": {
      "description": "/** If `true`, and showing footer, aggregate data will always be displayed at both the header and footer levels. This stops the possibly undesirable behaviour of the header details 'jumping' to the footer on expand. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupSelectsFiltered": {
      "description": "/** If using `groupSelectsChildren`, then only the children that pass the current filter will get selected. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "showOpenedGroup": {
      "description": "/** Shows the open group in the group column for non-group rows. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupRemoveSingleChildren": {
      "description": "/** Set to `true` to collapse groups that only have one child. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupRemoveLowestSingleChildren": {
      "description": "/** Set to `true` to collapse lowest level groups that only have one child. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupHideOpenParents": {
      "description": "/** Set to `true` to hide parents that are open. When used with multiple columns for showing groups, it can give a more pleasing user experience. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupAllowUnbalanced": {
      "description": "/** Set to `true` to prevent the grid from creating a '(Blanks)' group for nodes which do not belong to a group, and display the unbalanced nodes alongside group nodes. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowGroupPanelShow": {
      "description": "/** When to show the 'row group panel' (where you drag rows to group) at the top. Default: `never` */",
      "type": {
        "returnType": "'always' | 'onlyWhenGrouping' | 'never'",
        "optional": true
      }
    },
    "groupRowRenderer": {
      "description": "/** Provide the Cell Renderer to use when `groupDisplayType = 'groupRows'`.\n    * See [Group Row Cell Renderer](https://www.ag-grid.com/javascript-data-grid/grouping-group-rows/#providing-cell-renderer) for framework specific implementation details.\n    */",
      "type": { "returnType": "any", "optional": true }
    },
    "groupRowRendererFramework": {
      "description": "/** @deprecated As of v27, use `groupRowRenderer` for framework components too. */",
      "type": { "returnType": "any", "optional": true }
    },
    "groupRowRendererParams": {
      "description": "/** Customise the parameters provided to the `groupRowRenderer` component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "suppressMakeColumnVisibleAfterUnGroup": {
      "description": "/** By default, when a column is un-grouped, i.e. using the Row Group Panel, it is made visible in the grid. This property stops the column becoming visible again when un-grouping. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "treeData": {
      "description": "/** Set to `true` to enable the Grid to work with Tree Data. You must also implement the `getDataPath(data)` callback. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowGroupPanelSuppressSort": {
      "description": "/** Set to `true` to suppress sort indicators and actions from the row group panel. Default: `false`. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupRowsSticky": {
      "description": "/** Set to `true` to keep open Group Rows visible at the top of the grid. Default: `false`.*/",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rememberGroupStateWhenNewData": {
      "description": "/** @deprecated v24 - no longer needed, transaction updates keep group state */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pinnedTopRowData": {
      "description": "/** Data to be displayed as pinned top rows in the grid. */",
      "type": { "returnType": "any[]", "optional": true }
    },
    "pinnedBottomRowData": {
      "description": "/** Data to be displayed as pinned bottom rows in the grid. */",
      "type": { "returnType": "any[]", "optional": true }
    },
    "rowModelType": {
      "description": "/** Sets the row model type. Default: `clientSide` */",
      "type": { "returnType": "RowModelType", "optional": true }
    },
    "rowData": {
      "description": "/** Set the data to be displayed as rows in the grid. */",
      "type": { "returnType": "TData[] | null", "optional": true }
    },
    "immutableData": {
      "description": "/** @deprecated 27.1 Immutable Data is on by default when grid callback getRowId() is implemented\n     * Enables Immutable Data mode, for compatibility with immutable stores. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "asyncTransactionWaitMillis": {
      "description": "/** How many milliseconds to wait before executing a batch of async transactions. */",
      "type": { "returnType": "number", "optional": true }
    },
    "suppressModelUpdateAfterUpdateTransaction": {
      "description": "/** Prevents Transactions changing sort, filter, group or pivot state when transaction only contains updates. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "datasource": {
      "description": "/** Provide the datasource for infinite scrolling. */",
      "type": { "returnType": "IDatasource", "optional": true }
    },
    "cacheOverflowSize": {
      "description": "/** How many extra blank rows to display to the user at the end of the dataset, which sets the vertical scroll and then allows the grid to request viewing more rows of data.\n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "infiniteInitialRowCount": {
      "description": "/** How many extra blank rows to display to the user at the end of the dataset, which sets the vertical scroll and then allows the grid to request viewing more rows of data.\n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "serverSideInitialRowCount": {
      "description": "/** Set how many loading rows to display to the user for the root level group.\n     * Default: `1`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "serverSideStoreType": {
      "description": "/** @deprecated v28 Whether to use Full Store or Partial Store for storing rows. Default: `partial`.\n     * Deprecated in favour of suppressServerSideInfiniteScroll. When false, Partial Store is used. When true,\n     * Full Store is used.\n     */",
      "type": { "returnType": "ServerSideStoreType", "optional": true }
    },
    "suppressServerSideInfiniteScroll": {
      "description": "/** When `true`, the Server-side Row Model will suppress Infinite Scrolling and load all the data at the current level.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "cacheBlockSize": {
      "description": "/** How many rows for each block in the store, i.e. how many rows returned from the server at a time.\n     * Default: `100`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "maxBlocksInCache": {
      "description": "/** How many blocks to keep in the store. Default is no limit, so every requested block is kept. Use this if you have memory concerns, and blocks that were least recently viewed will be purged when the limit is hit. The grid will additionally make sure it has all the blocks needed to display what is currently visible, in case this property is set to a low value. */",
      "type": { "returnType": "number", "optional": true }
    },
    "maxConcurrentDatasourceRequests": {
      "description": "/** How many requests to hit the server with concurrently. If the max is reached, requests are queued.\n     * Set to `-1` for no maximum restriction on requests.\n     * Default: `2`\n     */",
      "type": { "returnType": "number", "optional": true }
    },
    "blockLoadDebounceMillis": {
      "description": "/** How many milliseconds to wait before loading a block. Useful when scrolling over many blocks, as it prevents blocks loading until scrolling has settled. */",
      "type": { "returnType": "number", "optional": true }
    },
    "purgeClosedRowNodes": {
      "description": "/** When enabled, closing group rows will remove children of that row. Next time the row is opened, child rows will be read from the datasource again. This property only applies when there is Row Grouping. Default: `false`  */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideDatasource": {
      "description": "/** Provide the `serverSideDatasource` for server side row model. */",
      "type": { "returnType": "IServerSideDatasource", "optional": true }
    },
    "serverSideSortAllLevels": {
      "description": "/** When enabled, always refreshes top level groups regardless of which column was sorted. This property only applies when there is Row Grouping & sorting is handled on the server. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideFilterAllLevels": {
      "description": "/** When enabled, always refreshes top level groups regardless of which column was filtered. This property only applies when there is Row Grouping & filtering is handled on the server. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideSortOnServer": {
      "description": "/**\n     * When enabled, Sorting will be done on the server. Only applicable when `suppressServerSideInfiniteScroll=true`.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideFilterOnServer": {
      "description": "/** When enabled, Filtering will be done on the server. Only applicable when `suppressServerSideInfiniteScroll=true`.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideSortingAlwaysResets": {
      "description": "/** @deprecated v28 This property has been deprecated. Use `serverSideSortAllLevels` instead. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideFilteringAlwaysResets": {
      "description": "/** @deprecated v28 This property has been deprecated. Use `serverSideFilterAllLevels` instead. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "viewportDatasource": {
      "description": "/** To use the viewport row model you need to provide the grid with a `viewportDatasource`. */",
      "type": { "returnType": "IViewportDatasource", "optional": true }
    },
    "viewportRowModelPageSize": {
      "description": "/** When using viewport row model, sets the page size for the viewport. */",
      "type": { "returnType": "number", "optional": true }
    },
    "viewportRowModelBufferSize": {
      "description": "/** When using viewport row model, sets the buffer size for the viewport. */",
      "type": { "returnType": "number", "optional": true }
    },
    "alwaysShowHorizontalScroll": {
      "description": "/** Set to `true` to always show the horizontal scrollbar. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "alwaysShowVerticalScroll": {
      "description": "/** Set to `true` to always show the vertical scrollbar. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debounceVerticalScrollbar": {
      "description": "/** Set to `true` to debounce the vertical scrollbar. Can provide smoother scrolling on slow machines. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressHorizontalScroll": {
      "description": "/** Set to `true` to never show the horizontal scroll. This is useful if the grid is aligned with another grid and will scroll when the other grid scrolls. (Should not be used in combination with `alwaysShowHorizontalScroll`.) Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressScrollOnNewData": {
      "description": "/** When `true`, the grid will not scroll to the top when new row data is provided. Use this if you don't want the default behaviour of scrolling to the top every time you load new data. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressScrollWhenPopupsAreOpen": {
      "description": "/** When `true`, the grid will not allow mousewheel / touchpad scroll when popup elements are present. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAnimationFrame": {
      "description": "/** When `true`, the grid will not use animation frames when drawing rows while scrolling. Use this if the grid is working fast enough that you don't need animation frames and you don't want the grid to flicker. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMiddleClickScrolls": {
      "description": "/** If `true`, middle clicks will result in `click` events for cells and rows. Otherwise the browser will use middle click to scroll the grid.<br />**Note:** Not all browsers fire `click` events with the middle button. Most will fire only `mousedown` and `mouseup` events, which can be used to focus a cell, but will not work to call the `onCellClicked` function. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressPreventDefaultOnMouseWheel": {
      "description": "/** If `true`, mouse wheel events will be passed to the browser. Useful if your grid has no vertical scrolls and you want the mouse to scroll the browser page. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "scrollbarWidth": {
      "description": "/** Tell the grid how wide in pixels the scrollbar is, which is used in grid width calculations. Set only if using non-standard browser-provided scrollbars, so the grid can use the non-standard size in its calculations. */",
      "type": { "returnType": "number", "optional": true }
    },
    "rowSelection": {
      "description": "/** Type of Row Selection: `single`, `multiple`. */",
      "type": { "returnType": "'single' | 'multiple'", "optional": true }
    },
    "rowMultiSelectWithClick": {
      "description": "/** Set to `true` to allow multiple rows to be selected using single click. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowDeselection": {
      "description": "/** If `true`, rows will not be deselected if you hold down `Ctrl` and click the row or press `Space`. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowClickSelection": {
      "description": "/** If `true`, row selection won't happen when rows are clicked. Use when you only want checkbox selection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressCellSelection": {
      "description": "/** @deprecated v27 This property has been deprecated. Use `suppressCellFocus` instead.\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressCellFocus": {
      "description": "/** If `true`, cells won't be focusable. This means keyboard navigation will be disabled for grid cells, but remain enabled in other elements of the grid such as column headers, floating filters, tool panels. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMultiRangeSelection": {
      "description": "/** If `true`, only a single range can be selected. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellTextSelection": {
      "description": "/** Set to `true` to be able to select the text within cells.\n     *\n     * **Note:** When this is set to `true`, the clipboard service is disabled.\n     * Default: `false`\n     */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableRangeSelection": {
      "description": "/** Set to `true` to enable Range Selection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableRangeHandle": {
      "description": "/** Set to `true` to enable the Range Handle. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableFillHandle": {
      "description": "/** Set to `true` to enable the Fill Handle. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "fillHandleDirection": {
      "description": "/** Set to `'x'` to force the fill handle direction to horizontal, or set to `'y'` to force the fill handle direction to vertical. Default: `xy` */",
      "type": { "returnType": "'x' | 'y' | 'xy'", "optional": true }
    },
    "suppressClearOnFillReduction": {
      "description": "/** Set this to `true` to prevent cell values from being cleared when the Range Selection is reduced by the Fill Handle. Default: `false`*/",
      "type": { "returnType": "boolean", "optional": true }
    },
    "sortingOrder": {
      "description": "/** Array defining the order in which sorting occurs (if sorting is enabled). Values can be `'asc'`, `'desc'` or `null`. For example: `sortingOrder: ['asc', 'desc']`. Default: `[null, 'asc', 'desc']`  */",
      "type": { "returnType": "(SortDirection)[]", "optional": true }
    },
    "accentedSort": {
      "description": "/** Set to `true` to specify that the sort should take accented characters into account. If this feature is turned on the sort will be slower. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "unSortIcon": {
      "description": "/** Set to `true` to show the 'no sort' icon. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMultiSort": {
      "description": "/** Set to `true` to suppress multi-sort when the user shift-clicks a column header. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "alwaysMultiSort": {
      "description": "/** Set to `true` to always multi-sort when the user clicks a column header, regardless of key presses. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "multiSortKey": {
      "description": "/** Set to `'ctrl'` to have multi sorting work using the `Ctrl` (or `Command ⌘` for Mac) key. */",
      "type": { "returnType": "'ctrl'", "optional": true }
    },
    "suppressMaintainUnsortedOrder": {
      "description": "/** Set to `true` to suppress sorting of un-sorted data to match original row data. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "icons": {
      "description": "/** Icons to use inside the grid instead of the grid's default icons. */",
      "type": {
        "returnType": "{ [key: string]: Function | string; }",
        "optional": true
      }
    },
    "rowHeight": {
      "description": "/** Default row height in pixels. Default: `25` */",
      "type": { "returnType": "number", "optional": true }
    },
    "rowStyle": {
      "description": "/** The style properties to apply to all rows. Set to an object of key (style names) and values (style values) */",
      "type": { "returnType": "RowStyle", "optional": true }
    },
    "rowClass": {
      "description": "/** CSS class(es) for all rows. Provide either a string (class name) or array of strings (array of class names). */",
      "type": { "returnType": "string | string[]", "optional": true }
    },
    "rowClassRules": {
      "description": "/** Rules which can be applied to include certain CSS classes. */",
      "type": { "returnType": "RowClassRules<TData>", "optional": true }
    },
    "suppressRowHoverHighlight": {
      "description": "/** Set to `true` to not highlight rows by adding the `ag-row-hover` CSS class. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowTransform": {
      "description": "/** Uses CSS `top` instead of CSS `transform` for positioning rows. Useful if the transform function is causing issues such as used in row spanning. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "columnHoverHighlight": {
      "description": "/** Set to `true` to highlight columns by adding the `ag-column-hover` CSS class. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "deltaSort": { "type": { "returnType": "boolean", "optional": true } },
    "treeDataDisplayType": {
      "type": { "returnType": "TreeDataDisplayType", "optional": true }
    },
    "functionsPassive": {
      "description": "/** @deprecated v29.2 */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableGroupEdit": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "getContextMenuItems": {
      "description": "/** For customising the context menu. */",
      "type": { "returnType": "GetContextMenuItems<TData>", "optional": true }
    },
    "getMainMenuItems": {
      "description": "/** For customising the main 'column header' menu. */",
      "type": { "returnType": "GetMainMenuItems", "optional": true }
    },
    "postProcessPopup": {
      "description": "/** Allows user to process popups after they are created. Applications can use this if they want to, for example, reposition the popup. */",
      "type": {
        "arguments": { "params": "PostProcessPopupParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processCellForClipboard": {
      "description": "/** Allows you to process cells for the clipboard. Handy if for example you have `Date` objects that need to have a particular format if importing into Excel. */",
      "type": {
        "arguments": { "params": "ProcessCellForExportParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "processHeaderForClipboard": {
      "description": "/** Allows you to process header values for the clipboard.  */",
      "type": {
        "arguments": { "params": "ProcessHeaderForExportParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "processGroupHeaderForClipboard": {
      "description": "/** Allows you to process group header values for the clipboard.  */",
      "type": {
        "arguments": { "params": "ProcessGroupHeaderForExportParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "processCellFromClipboard": {
      "description": "/** Allows you to process cells from the clipboard. Handy if for example you have number fields, and want to block non-numbers from getting into the grid. */",
      "type": {
        "arguments": { "params": "ProcessCellForExportParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "sendToClipboard": {
      "description": "/** Allows you to get the data that would otherwise go to the clipboard. To be used when you want to control the 'copy to clipboard' operation yourself. */",
      "type": {
        "arguments": { "params": "SendToClipboardParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processDataFromClipboard": {
      "description": "/** Allows complete control of the paste operation, including cancelling the operation (so nothing happens) or replacing the data with other data. */",
      "type": {
        "arguments": { "params": "ProcessDataFromClipboardParams<TData>" },
        "returnType": "string[][] | null",
        "optional": true
      }
    },
    "isExternalFilterPresent": {
      "description": "/** Grid calls this method to know if an external filter is present. */",
      "type": {
        "arguments": { "params": "IsExternalFilterPresentParams<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "doesExternalFilterPass": {
      "description": "/** Should return `true` if external filter passes, otherwise `false`. */",
      "type": {
        "arguments": { "node": "IRowNode<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "getChartToolbarItems": {
      "description": "/** Callback to be used to customise the chart toolbar items. */",
      "type": { "returnType": "GetChartToolbarItems", "optional": true }
    },
    "createChartContainer": {
      "description": "/** Callback to enable displaying the chart in an alternative chart container. */",
      "type": {
        "arguments": { "params": "ChartRefParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "navigateToNextHeader": {
      "description": "/** Allows overriding the default behaviour for when user hits navigation (arrow) key when a header is focused. Return the next Header position to navigate to or `null` to stay on current header. */",
      "type": {
        "arguments": { "params": "NavigateToNextHeaderParams<TData>" },
        "returnType": "(HeaderPosition | null)",
        "optional": true
      }
    },
    "tabToNextHeader": {
      "description": "/** Allows overriding the default behaviour for when user hits `Tab` key when a header is focused. Return the next Header position to navigate to or `null` to stay on current header.  */",
      "type": {
        "arguments": { "params": "TabToNextHeaderParams<TData>" },
        "returnType": "(HeaderPosition | null)",
        "optional": true
      }
    },
    "navigateToNextCell": {
      "description": "/** Allows overriding the default behaviour for when user hits navigation (arrow) key when a cell is focused. Return the next Cell position to navigate to or `null` to stay on current cell.  */",
      "type": {
        "arguments": { "params": "NavigateToNextCellParams<TData>" },
        "returnType": "(CellPosition | null)",
        "optional": true
      }
    },
    "tabToNextCell": {
      "description": "/** Allows overriding the default behaviour for when user hits `Tab` key when a cell is focused. Return the next Cell position to navigate to or null to stay on current cell.  */",
      "type": {
        "arguments": { "params": "TabToNextCellParams<TData>" },
        "returnType": "(CellPosition | null)",
        "optional": true
      }
    },
    "localeTextFunc": {
      "description": "/** @deprecated v27.2 - Use `getLocaleText` instead. */",
      "type": {
        "arguments": {
          "key": "string",
          "defaultValue": "string",
          "variableValues?": "string[]"
        },
        "returnType": "string",
        "optional": true
      }
    },
    "getLocaleText": {
      "description": "/** A callback for localising text within the grid. */",
      "type": {
        "arguments": { "params": "GetLocaleTextParams<TData>" },
        "returnType": "string",
        "optional": true
      }
    },
    "getDocument": {
      "description": "/** Allows overriding what `document` is used. Currently used by Drag and Drop (may extend to other places in the future). Use this when you want the grid to use a different `document` than the one available on the global scope. This can happen if docking out components (something which Electron supports) */",
      "type": { "arguments": {}, "returnType": "Document", "optional": true }
    },
    "paginationNumberFormatter": {
      "description": "/** Allows user to format the numbers in the pagination panel, i.e. 'row count' and 'page number' labels. This is for pagination panel only, to format numbers inside the grid's cells (i.e. your data), then use `valueFormatter` in the column definitions. */",
      "type": {
        "arguments": { "params": "PaginationNumberFormatterParams<TData>" },
        "returnType": "string",
        "optional": true
      }
    },
    "groupRowAggNodes": {
      "description": "/** @deprecated v27.2 - Use `getGroupRowAgg` instead. */",
      "type": {
        "arguments": { "nodes": "IRowNode[]" },
        "returnType": "any",
        "optional": true
      }
    },
    "getGroupRowAgg": {
      "description": "/** Callback to use when you need access to more then the current column for aggregation. */",
      "type": {
        "arguments": { "params": "GetGroupRowAggParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "isGroupOpenByDefault": {
      "description": "/** (Client-side Row Model only) Allows groups to be open by default. */",
      "type": {
        "arguments": { "params": "IsGroupOpenByDefaultParams<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "initialGroupOrderComparator": {
      "description": "/** Allows default sorting of groups. */",
      "type": {
        "arguments": { "params": "InitialGroupOrderComparatorParams<TData>" },
        "returnType": "number",
        "optional": true
      }
    },
    "defaultGroupOrderComparator": {
      "description": "/** @deprecated v27.2 - Use `initialGroupOrderComparator` instead */",
      "type": {
        "arguments": { "nodeA": "IRowNode<TData>", "nodeB": "IRowNode<TData>" },
        "returnType": "number",
        "optional": true
      }
    },
    "processSecondaryColDef": {
      "description": "/** @deprecated v28 - Use `processPivotResultColDef` instead */",
      "type": {
        "arguments": { "colDef": "ColDef<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processSecondaryColGroupDef": {
      "description": "/** @deprecated v28 - Use `processPivotResultColGroupDef` instead */",
      "type": {
        "arguments": { "colGroupDef": "ColGroupDef<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processPivotResultColDef": {
      "description": "/** Callback to be used with pivoting, to allow changing the second column definition. */",
      "type": {
        "arguments": { "colDef": "ColDef<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "processPivotResultColGroupDef": {
      "description": "/** Callback to be used with pivoting, to allow changing the second column group definition. */",
      "type": {
        "arguments": { "colGroupDef": "ColGroupDef<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "getDataPath": {
      "description": "/** Callback to be used when working with Tree Data when `treeData = true`. */",
      "type": { "returnType": "GetDataPath<TData>", "optional": true }
    },
    "getChildCount": {
      "description": "/** Allows setting the child count for a group row. */",
      "type": {
        "arguments": { "dataItem": "any" },
        "returnType": "number",
        "optional": true
      }
    },
    "getServerSideGroupLevelParams": {
      "description": "/** Allows providing different params for different levels of grouping. */",
      "type": {
        "arguments": { "params": "GetServerSideGroupLevelParamsParams" },
        "returnType": "ServerSideGroupLevelParams",
        "optional": true
      }
    },
    "getServerSideStoreParams": {
      "description": "/** @deprecated v28 Use `getServerSideGroupLevelParams` instead. */",
      "type": {
        "arguments": { "params": "GetServerSideGroupLevelParamsParams" },
        "returnType": "ServerSideGroupLevelParams",
        "optional": true
      }
    },
    "isServerSideGroupOpenByDefault": {
      "description": "/** Allows groups to be open by default. */",
      "type": {
        "arguments": { "params": "IsServerSideGroupOpenByDefaultParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "isApplyServerSideTransaction": {
      "description": "/** Allows cancelling transactions. */",
      "type": { "returnType": "IsApplyServerSideTransaction", "optional": true }
    },
    "isServerSideGroup": {
      "description": "/** SSRM Tree Data: Allows specifying which rows are expandable. */",
      "type": { "returnType": "IsServerSideGroup", "optional": true }
    },
    "getServerSideGroupKey": {
      "description": "/** SSRM Tree Data: Allows specifying group keys. */",
      "type": { "returnType": "GetServerSideGroupKey", "optional": true }
    },
    "getBusinessKeyForNode": {
      "description": "/** Return a business key for the node. If implemented, each row in the DOM will have an attribute `row-id='abc'` where `abc` is what you return as the business key.\n     * This is useful for automated testing, as it provides a way for your tool to identify rows based on unique business keys.\n     */",
      "type": {
        "arguments": { "node": "IRowNode<TData>" },
        "returnType": "string",
        "optional": true
      }
    },
    "getRowNodeId": {
      "description": "/** @deprecated v27.1 Use `getRowId` instead - however be aware, `getRowId()` will also set grid option `immutableData=true`\n     * Allows you to set the ID for a particular row node based on the data. */",
      "type": { "returnType": "GetRowNodeIdFunc<TData>", "optional": true }
    },
    "getRowId": {
      "description": "/** Allows setting the ID for a particular row node based on the data. */",
      "type": { "returnType": "GetRowIdFunc<TData>", "optional": true }
    },
    "resetRowDataOnUpdate": {
      "description": "/** When enabled, getRowId() callback is implemented and new Row Data is set, the grid will disregard all previous rows and treat the new Row Data as new data. As a consequence, all Row State (eg selection, rendered rows) will be reset.  Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "processRowPostCreate": {
      "description": "/** Allows you to process rows after they are created, so you can do final adding of custom attributes etc. */",
      "type": {
        "arguments": { "params": "ProcessRowParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "isRowSelectable": {
      "description": "/** Callback to be used to determine which rows are selectable. By default rows are selectable, so return `false` to make a row un-selectable. */",
      "type": { "returnType": "IsRowSelectable<TData>", "optional": true }
    },
    "isRowMaster": {
      "description": "/** Callback to be used with Master Detail to determine if a row should be a master row. If `false` is returned no detail row will exist for this row. */",
      "type": { "returnType": "IsRowMaster<TData>", "optional": true }
    },
    "fillOperation": {
      "description": "/** Callback to fill values instead of simply copying values or increasing number values using linear progression. */",
      "type": {
        "arguments": { "params": "FillOperationParams<TData>" },
        "returnType": "any",
        "optional": true
      }
    },
    "postSort": {
      "description": "/** @deprecated v27.2 Use `postSortRows` instead */",
      "type": {
        "arguments": { "nodes": "IRowNode<TData>[]" },
        "returnType": "void",
        "optional": true
      }
    },
    "postSortRows": {
      "description": "/** Callback to perform additional sorting after the grid has sorted the rows. */",
      "type": {
        "arguments": { "params": "PostSortRowsParams<TData>" },
        "returnType": "void",
        "optional": true
      }
    },
    "getRowStyle": {
      "description": "/** Callback version of property `rowStyle` to set style for each row individually. Function should return an object of CSS values or undefined for no styles. */",
      "type": {
        "arguments": { "params": "RowClassParams<TData>" },
        "returnType": "RowStyle | undefined",
        "optional": true
      }
    },
    "getRowClass": {
      "description": "/** Callback version of property `rowClass` to set class(es) for each row individually. Function should return either a string (class name), array of strings (array of class names) or undefined for no class. */",
      "type": {
        "arguments": { "params": "RowClassParams<TData>" },
        "returnType": "string | string[] | undefined",
        "optional": true
      }
    },
    "getRowHeight": {
      "description": "/** Callback version of property `rowHeight` to set height for each row individually. Function should return a positive number of pixels, or return `null`/`undefined` to use the default row height. */",
      "type": {
        "arguments": { "params": "RowHeightParams<TData>" },
        "returnType": "number | undefined | null",
        "optional": true
      }
    },
    "isFullWidthCell": {
      "description": "/** @deprecated v27.2 Use `isFullWidthRow` instead. */",
      "type": {
        "arguments": { "rowNode": "IRowNode<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "isFullWidthRow": {
      "description": "/** Tells the grid if this row should be rendered as full width. */",
      "type": {
        "arguments": { "params": "IsFullWidthRowParams<TData>" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "onToolPanelVisibleChanged": {
      "description": "/** The tool panel was hidden or shown. Use `api.isToolPanelShowing()` to get status. */",
      "type": {
        "arguments": { "event": "ToolPanelVisibleChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onToolPanelVisibleChanged" }
    },
    "toolPanelVisibleChanged": {
      "description": "/** The tool panel was hidden or shown. Use `api.isToolPanelShowing()` to get status. */",
      "type": {
        "arguments": { "event": "ToolPanelVisibleChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onToolPanelVisibleChanged" }
    },
    "onToolPanelSizeChanged": {
      "description": "/** The tool panel size has been changed. */",
      "type": {
        "arguments": { "event": "ToolPanelSizeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onToolPanelSizeChanged" }
    },
    "toolPanelSizeChanged": {
      "description": "/** The tool panel size has been changed. */",
      "type": {
        "arguments": { "event": "ToolPanelSizeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onToolPanelSizeChanged" }
    },
    "onPasteStart": {
      "description": "/** Paste operation has started. */",
      "type": {
        "arguments": { "event": "PasteStartEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteStart" }
    },
    "pasteStart": {
      "description": "/** Paste operation has started. */",
      "type": {
        "arguments": { "event": "PasteStartEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteStart" }
    },
    "onPasteEnd": {
      "description": "/** Paste operation has ended. */",
      "type": {
        "arguments": { "event": "PasteEndEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteEnd" }
    },
    "pasteEnd": {
      "description": "/** Paste operation has ended. */",
      "type": {
        "arguments": { "event": "PasteEndEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteEnd" }
    },
    "onColumnVisible": {
      "description": "/** A column, or group of columns, was hidden / shown. */",
      "type": {
        "arguments": { "event": "ColumnVisibleEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnVisible" }
    },
    "columnVisible": {
      "description": "/** A column, or group of columns, was hidden / shown. */",
      "type": {
        "arguments": { "event": "ColumnVisibleEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnVisible" }
    },
    "onColumnPinned": {
      "description": "/** A column, or group of columns, was pinned / unpinned. */",
      "type": {
        "arguments": { "event": "ColumnPinnedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPinned" }
    },
    "columnPinned": {
      "description": "/** A column, or group of columns, was pinned / unpinned. */",
      "type": {
        "arguments": { "event": "ColumnPinnedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPinned" }
    },
    "onColumnResized": {
      "description": "/** A column was resized. */",
      "type": {
        "arguments": { "event": "ColumnResizedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnResized" }
    },
    "columnResized": {
      "description": "/** A column was resized. */",
      "type": {
        "arguments": { "event": "ColumnResizedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnResized" }
    },
    "onColumnMoved": {
      "description": "/** A column was moved. */",
      "type": {
        "arguments": { "event": "ColumnMovedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnMoved" }
    },
    "columnMoved": {
      "description": "/** A column was moved. */",
      "type": {
        "arguments": { "event": "ColumnMovedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnMoved" }
    },
    "onColumnValueChanged": {
      "description": "/** A value column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChanged" }
    },
    "columnValueChanged": {
      "description": "/** A value column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChanged" }
    },
    "onColumnPivotModeChanged": {
      "description": "/** The pivot mode flag was changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotModeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotModeChanged" }
    },
    "columnPivotModeChanged": {
      "description": "/** The pivot mode flag was changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotModeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotModeChanged" }
    },
    "onColumnPivotChanged": {
      "description": "/** A pivot column was added, removed or order changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChanged" }
    },
    "columnPivotChanged": {
      "description": "/** A pivot column was added, removed or order changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChanged" }
    },
    "onColumnGroupOpened": {
      "description": "/** A column group was opened / closed. */",
      "type": {
        "arguments": { "event": "ColumnGroupOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnGroupOpened" }
    },
    "columnGroupOpened": {
      "description": "/** A column group was opened / closed. */",
      "type": {
        "arguments": { "event": "ColumnGroupOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnGroupOpened" }
    },
    "onNewColumnsLoaded": {
      "description": "/** User set new columns. */",
      "type": {
        "arguments": { "event": "NewColumnsLoadedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onNewColumnsLoaded" }
    },
    "newColumnsLoaded": {
      "description": "/** User set new columns. */",
      "type": {
        "arguments": { "event": "NewColumnsLoadedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onNewColumnsLoaded" }
    },
    "onGridColumnsChanged": {
      "description": "/** The list of grid columns changed. */",
      "type": {
        "arguments": { "event": "GridColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridColumnsChanged" }
    },
    "gridColumnsChanged": {
      "description": "/** The list of grid columns changed. */",
      "type": {
        "arguments": { "event": "GridColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridColumnsChanged" }
    },
    "onDisplayedColumnsChanged": {
      "description": "/** The list of displayed columns changed. This can result from columns open / close, column move, pivot, group, etc. */",
      "type": {
        "arguments": { "event": "DisplayedColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDisplayedColumnsChanged" }
    },
    "displayedColumnsChanged": {
      "description": "/** The list of displayed columns changed. This can result from columns open / close, column move, pivot, group, etc. */",
      "type": {
        "arguments": { "event": "DisplayedColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDisplayedColumnsChanged" }
    },
    "onVirtualColumnsChanged": {
      "description": "/** The list of rendered columns changed (only columns in the visible scrolled viewport are rendered by default). */",
      "type": {
        "arguments": { "event": "VirtualColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualColumnsChanged" }
    },
    "virtualColumnsChanged": {
      "description": "/** The list of rendered columns changed (only columns in the visible scrolled viewport are rendered by default). */",
      "type": {
        "arguments": { "event": "VirtualColumnsChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualColumnsChanged" }
    },
    "onColumnEverythingChanged": {
      "description": "/** Shotgun - gets called when either a) new columns are set or b) `columnApi.applyColumnState()` is used, so everything has changed. */",
      "type": {
        "arguments": { "event": "ColumnEverythingChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnEverythingChanged" }
    },
    "columnEverythingChanged": {
      "description": "/** Shotgun - gets called when either a) new columns are set or b) `columnApi.applyColumnState()` is used, so everything has changed. */",
      "type": {
        "arguments": { "event": "ColumnEverythingChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnEverythingChanged" }
    },
    "onComponentStateChanged": {
      "description": "/** Only used by Angular, React and VueJS AG Grid components (not used if doing plain JavaScript).\n     * If the grid receives changes due to bound properties, this event fires after the grid has finished processing the change.\n     */",
      "type": {
        "arguments": { "event": "ComponentStateChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onComponentStateChanged" }
    },
    "componentStateChanged": {
      "description": "/** Only used by Angular, React and VueJS AG Grid components (not used if doing plain JavaScript).\n     * If the grid receives changes due to bound properties, this event fires after the grid has finished processing the change.\n     */",
      "type": {
        "arguments": { "event": "ComponentStateChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onComponentStateChanged" }
    },
    "onCellValueChanged": {
      "description": "/** Value has changed after editing (this event will not fire if editing was cancelled, eg ESC was pressed) or\n     *  if cell value has changed as a result of cut, paste, cell clear (pressing Delete key),\n     * fill handle, copy range down, undo and redo.\n    */",
      "type": {
        "arguments": { "event": "CellValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellValueChanged" }
    },
    "cellValueChanged": {
      "description": "/** Value has changed after editing (this event will not fire if editing was cancelled, eg ESC was pressed) or\n     *  if cell value has changed as a result of cut, paste, cell clear (pressing Delete key),\n     * fill handle, copy range down, undo and redo.\n    */",
      "type": {
        "arguments": { "event": "CellValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellValueChanged" }
    },
    "onCellEditRequest": {
      "description": "/** Value has changed after editing. Only fires when `readOnlyEdit=true`. */",
      "type": {
        "arguments": { "event": "CellEditRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditRequest" }
    },
    "cellEditRequest": {
      "description": "/** Value has changed after editing. Only fires when `readOnlyEdit=true`. */",
      "type": {
        "arguments": { "event": "CellEditRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditRequest" }
    },
    "onRowValueChanged": {
      "description": "/** A cell's value within a row has changed. This event corresponds to Full Row Editing only. */",
      "type": {
        "arguments": { "event": "RowValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowValueChanged" }
    },
    "rowValueChanged": {
      "description": "/** A cell's value within a row has changed. This event corresponds to Full Row Editing only. */",
      "type": {
        "arguments": { "event": "RowValueChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowValueChanged" }
    },
    "onCellEditingStarted": {
      "description": "/** Editing a cell has started. */",
      "type": {
        "arguments": { "event": "CellEditingStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStarted" }
    },
    "cellEditingStarted": {
      "description": "/** Editing a cell has started. */",
      "type": {
        "arguments": { "event": "CellEditingStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStarted" }
    },
    "onCellEditingStopped": {
      "description": "/** Editing a cell has stopped. */",
      "type": {
        "arguments": { "event": "CellEditingStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStopped" }
    },
    "cellEditingStopped": {
      "description": "/** Editing a cell has stopped. */",
      "type": {
        "arguments": { "event": "CellEditingStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStopped" }
    },
    "onRowEditingStarted": {
      "description": "/** Editing a row has started (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStarted` will be fired for each individual cell. Only fires when doing Full Row Editing. */",
      "type": {
        "arguments": { "event": "RowEditingStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStarted" }
    },
    "rowEditingStarted": {
      "description": "/** Editing a row has started (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStarted` will be fired for each individual cell. Only fires when doing Full Row Editing. */",
      "type": {
        "arguments": { "event": "RowEditingStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStarted" }
    },
    "onRowEditingStopped": {
      "description": "/** Editing a row has stopped (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStopped` will be fired for each individual cell. Only fires when doing Full Row Editing. */",
      "type": {
        "arguments": { "event": "RowEditingStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStopped" }
    },
    "rowEditingStopped": {
      "description": "/** Editing a row has stopped (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStopped` will be fired for each individual cell. Only fires when doing Full Row Editing. */",
      "type": {
        "arguments": { "event": "RowEditingStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStopped" }
    },
    "onUndoStarted": {
      "description": "/** Undo operation has started. */",
      "type": {
        "arguments": { "event": "UndoStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onUndoStarted" }
    },
    "undoStarted": {
      "description": "/** Undo operation has started. */",
      "type": {
        "arguments": { "event": "UndoStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onUndoStarted" }
    },
    "onUndoEnded": {
      "description": "/** Undo operation has ended. */",
      "type": {
        "arguments": { "event": "UndoEndedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onUndoEnded" }
    },
    "undoEnded": {
      "description": "/** Undo operation has ended. */",
      "type": {
        "arguments": { "event": "UndoEndedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onUndoEnded" }
    },
    "onRedoStarted": {
      "description": "/** Redo operation has started. */",
      "type": {
        "arguments": { "event": "RedoStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRedoStarted" }
    },
    "redoStarted": {
      "description": "/** Redo operation has started. */",
      "type": {
        "arguments": { "event": "RedoStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRedoStarted" }
    },
    "onRedoEnded": {
      "description": "/** Redo operation has ended. */",
      "type": {
        "arguments": { "event": "RedoEndedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRedoEnded" }
    },
    "redoEnded": {
      "description": "/** Redo operation has ended. */",
      "type": {
        "arguments": { "event": "RedoEndedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRedoEnded" }
    },
    "onFilterOpened": {
      "description": "/** Filter has been opened. */",
      "type": {
        "arguments": { "event": "FilterOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterOpened" }
    },
    "filterOpened": {
      "description": "/** Filter has been opened. */",
      "type": {
        "arguments": { "event": "FilterOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterOpened" }
    },
    "onFilterChanged": {
      "description": "/** Filter has been modified and applied. */",
      "type": {
        "arguments": { "event": "FilterChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterChanged" }
    },
    "filterChanged": {
      "description": "/** Filter has been modified and applied. */",
      "type": {
        "arguments": { "event": "FilterChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterChanged" }
    },
    "onFilterModified": {
      "description": "/** Filter was modified but not applied. Used when filters have 'Apply' buttons. */",
      "type": {
        "arguments": { "event": "FilterModifiedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterModified" }
    },
    "filterModified": {
      "description": "/** Filter was modified but not applied. Used when filters have 'Apply' buttons. */",
      "type": {
        "arguments": { "event": "FilterModifiedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterModified" }
    },
    "onChartCreated": {
      "description": "/** A chart has been created. */",
      "type": {
        "arguments": { "event": "ChartCreated<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartCreated" }
    },
    "chartCreated": {
      "description": "/** A chart has been created. */",
      "type": {
        "arguments": { "event": "ChartCreated<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartCreated" }
    },
    "onChartRangeSelectionChanged": {
      "description": "/** The data range for the chart has been changed. */",
      "type": {
        "arguments": { "event": "ChartRangeSelectionChanged<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartRangeSelectionChanged" }
    },
    "chartRangeSelectionChanged": {
      "description": "/** The data range for the chart has been changed. */",
      "type": {
        "arguments": { "event": "ChartRangeSelectionChanged<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartRangeSelectionChanged" }
    },
    "onChartOptionsChanged": {
      "description": "/** Formatting changes have been made by users through the Format Panel. */",
      "type": {
        "arguments": { "event": "ChartOptionsChanged<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartOptionsChanged" }
    },
    "chartOptionsChanged": {
      "description": "/** Formatting changes have been made by users through the Format Panel. */",
      "type": {
        "arguments": { "event": "ChartOptionsChanged<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartOptionsChanged" }
    },
    "onChartDestroyed": {
      "description": "/** A chart has been destroyed. */",
      "type": {
        "arguments": { "event": "ChartDestroyed<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartDestroyed" }
    },
    "chartDestroyed": {
      "description": "/** A chart has been destroyed. */",
      "type": {
        "arguments": { "event": "ChartDestroyed<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartDestroyed" }
    },
    "onCellKeyDown": {
      "description": "/** DOM event `keyDown` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyDownEvent<TData> | FullWidthCellKeyDownEvent<TData>"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyDown" }
    },
    "cellKeyDown": {
      "description": "/** DOM event `keyDown` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyDownEvent<TData> | FullWidthCellKeyDownEvent<TData>"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyDown" }
    },
    "onCellKeyPress": {
      "description": "/** DOM event `keyPress` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyPressEvent<TData> | FullWidthCellKeyPressEvent<TData>"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyPress" }
    },
    "cellKeyPress": {
      "description": "/** DOM event `keyPress` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyPressEvent<TData> | FullWidthCellKeyPressEvent<TData>"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyPress" }
    },
    "onGridReady": {
      "description": "/** The grid has initialised and is ready for most api calls, but may not be fully rendered yet  */",
      "type": {
        "arguments": { "event": "GridReadyEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridReady" }
    },
    "gridReady": {
      "description": "/** The grid has initialised and is ready for most api calls, but may not be fully rendered yet  */",
      "type": {
        "arguments": { "event": "GridReadyEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridReady" }
    },
    "onFirstDataRendered": {
      "description": "/** Fired the first time data is rendered into the grid. Use this event if you want to auto resize columns based on their contents */",
      "type": {
        "arguments": { "event": "FirstDataRenderedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFirstDataRendered" }
    },
    "firstDataRendered": {
      "description": "/** Fired the first time data is rendered into the grid. Use this event if you want to auto resize columns based on their contents */",
      "type": {
        "arguments": { "event": "FirstDataRenderedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFirstDataRendered" }
    },
    "onGridSizeChanged": {
      "description": "/** The size of the grid `div` has changed. In other words, the grid was resized. */",
      "type": {
        "arguments": { "event": "GridSizeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridSizeChanged" }
    },
    "gridSizeChanged": {
      "description": "/** The size of the grid `div` has changed. In other words, the grid was resized. */",
      "type": {
        "arguments": { "event": "GridSizeChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridSizeChanged" }
    },
    "onModelUpdated": {
      "description": "/** Displayed rows have changed. Triggered after sort, filter or tree expand / collapse events. */",
      "type": {
        "arguments": { "event": "ModelUpdatedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onModelUpdated" }
    },
    "modelUpdated": {
      "description": "/** Displayed rows have changed. Triggered after sort, filter or tree expand / collapse events. */",
      "type": {
        "arguments": { "event": "ModelUpdatedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onModelUpdated" }
    },
    "onVirtualRowRemoved": {
      "description": "/** A row was removed from the DOM, for any reason. Use to clean up resources (if any) used by the row. */",
      "type": {
        "arguments": { "event": "VirtualRowRemovedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualRowRemoved" }
    },
    "virtualRowRemoved": {
      "description": "/** A row was removed from the DOM, for any reason. Use to clean up resources (if any) used by the row. */",
      "type": {
        "arguments": { "event": "VirtualRowRemovedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualRowRemoved" }
    },
    "onViewportChanged": {
      "description": "/** Which rows are rendered in the DOM has changed. */",
      "type": {
        "arguments": { "event": "ViewportChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onViewportChanged" }
    },
    "viewportChanged": {
      "description": "/** Which rows are rendered in the DOM has changed. */",
      "type": {
        "arguments": { "event": "ViewportChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onViewportChanged" }
    },
    "onBodyScroll": {
      "description": "/** The body was scrolled horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScroll" }
    },
    "bodyScroll": {
      "description": "/** The body was scrolled horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScroll" }
    },
    "onBodyScrollEnd": {
      "description": "/** Main body of the grid has stopped scrolling, either horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEndEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScrollEnd" }
    },
    "bodyScrollEnd": {
      "description": "/** Main body of the grid has stopped scrolling, either horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEndEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScrollEnd" }
    },
    "onDragStarted": {
      "description": "/** When dragging starts. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStarted" }
    },
    "dragStarted": {
      "description": "/** When dragging starts. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStartedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStarted" }
    },
    "onDragStopped": {
      "description": "/** When dragging stops. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStopped" }
    },
    "dragStopped": {
      "description": "/** When dragging stops. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStoppedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStopped" }
    },
    "onPaginationChanged": {
      "description": "/** Triggered every time the paging state changes. Some of the most common scenarios for this event to be triggered are:\n     *\n     *  - The page size changes.\n     *  - The current shown page is changed.\n     *  - New data is loaded onto the grid.\n     */",
      "type": {
        "arguments": { "event": "PaginationChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPaginationChanged" }
    },
    "paginationChanged": {
      "description": "/** Triggered every time the paging state changes. Some of the most common scenarios for this event to be triggered are:\n     *\n     *  - The page size changes.\n     *  - The current shown page is changed.\n     *  - New data is loaded onto the grid.\n     */",
      "type": {
        "arguments": { "event": "PaginationChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPaginationChanged" }
    },
    "onRowDragEnter": {
      "description": "/** A drag has started, or dragging was already started and the mouse has re-entered the grid having previously left the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnter" }
    },
    "rowDragEnter": {
      "description": "/** A drag has started, or dragging was already started and the mouse has re-entered the grid having previously left the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnter" }
    },
    "onRowDragMove": {
      "description": "/** The mouse has moved while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragMove" }
    },
    "rowDragMove": {
      "description": "/** The mouse has moved while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragMove" }
    },
    "onRowDragLeave": {
      "description": "/** The mouse has left the grid while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragLeave" }
    },
    "rowDragLeave": {
      "description": "/** The mouse has left the grid while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragLeave" }
    },
    "onRowDragEnd": {
      "description": "/** The drag has finished over the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnd" }
    },
    "rowDragEnd": {
      "description": "/** The drag has finished over the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnd" }
    },
    "onColumnRowGroupChanged": {
      "description": "/** A row group column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnRowGroupChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChanged" }
    },
    "columnRowGroupChanged": {
      "description": "/** A row group column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnRowGroupChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChanged" }
    },
    "onRowGroupOpened": {
      "description": "/** A row group was opened or closed. */",
      "type": {
        "arguments": { "event": "RowGroupOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowGroupOpened" }
    },
    "rowGroupOpened": {
      "description": "/** A row group was opened or closed. */",
      "type": {
        "arguments": { "event": "RowGroupOpenedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowGroupOpened" }
    },
    "onExpandOrCollapseAll": {
      "description": "/** Fired when calling either of the API methods `expandAll()` or `collapseAll()`. */",
      "type": {
        "arguments": { "event": "ExpandCollapseAllEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onExpandOrCollapseAll" }
    },
    "expandOrCollapseAll": {
      "description": "/** Fired when calling either of the API methods `expandAll()` or `collapseAll()`. */",
      "type": {
        "arguments": { "event": "ExpandCollapseAllEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onExpandOrCollapseAll" }
    },
    "onPinnedRowDataChanged": {
      "description": "/** The client has set new pinned row data into the grid. */",
      "type": {
        "arguments": { "event": "PinnedRowDataChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPinnedRowDataChanged" }
    },
    "pinnedRowDataChanged": {
      "description": "/** The client has set new pinned row data into the grid. */",
      "type": {
        "arguments": { "event": "PinnedRowDataChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPinnedRowDataChanged" }
    },
    "onRowDataChanged": {
      "description": "/** @deprecated v28 No longer fired, use onRowDataUpdated instead */",
      "type": {
        "arguments": { "event": "RowDataChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataChanged" }
    },
    "rowDataChanged": {
      "description": "/** @deprecated v28 No longer fired, use onRowDataUpdated instead */",
      "type": {
        "arguments": { "event": "RowDataChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataChanged" }
    },
    "onRowDataUpdated": {
      "description": "/** The client has updated data for the grid by either a) setting new Row Data or b) Applying a Row Transaction. */",
      "type": {
        "arguments": { "event": "RowDataUpdatedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataUpdated" }
    },
    "rowDataUpdated": {
      "description": "/** The client has updated data for the grid by either a) setting new Row Data or b) Applying a Row Transaction. */",
      "type": {
        "arguments": { "event": "RowDataUpdatedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataUpdated" }
    },
    "onAsyncTransactionsFlushed": {
      "description": "/** Async transactions have been applied. Contains a list of all transaction results. */",
      "type": {
        "arguments": { "event": "AsyncTransactionsFlushed<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onAsyncTransactionsFlushed" }
    },
    "asyncTransactionsFlushed": {
      "description": "/** Async transactions have been applied. Contains a list of all transaction results. */",
      "type": {
        "arguments": { "event": "AsyncTransactionsFlushed<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onAsyncTransactionsFlushed" }
    },
    "onStoreRefreshed": {
      "description": "/** A server side store has finished refreshing. */",
      "type": {
        "arguments": { "event": "StoreRefreshedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onStoreRefreshed" }
    },
    "storeRefreshed": {
      "description": "/** A server side store has finished refreshing. */",
      "type": {
        "arguments": { "event": "StoreRefreshedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onStoreRefreshed" }
    },
    "onCellClicked": {
      "description": "/** Cell is clicked. */",
      "type": {
        "arguments": { "event": "CellClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellClicked" }
    },
    "cellClicked": {
      "description": "/** Cell is clicked. */",
      "type": {
        "arguments": { "event": "CellClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellClicked" }
    },
    "onCellDoubleClicked": {
      "description": "/** Cell is double clicked. */",
      "type": {
        "arguments": { "event": "CellDoubleClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellDoubleClicked" }
    },
    "cellDoubleClicked": {
      "description": "/** Cell is double clicked. */",
      "type": {
        "arguments": { "event": "CellDoubleClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellDoubleClicked" }
    },
    "onCellFocused": {
      "description": "/** Cell is focused. */",
      "type": {
        "arguments": { "event": "CellFocusedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellFocused" }
    },
    "cellFocused": {
      "description": "/** Cell is focused. */",
      "type": {
        "arguments": { "event": "CellFocusedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellFocused" }
    },
    "onCellMouseOver": {
      "description": "/** Mouse entered cell. */",
      "type": {
        "arguments": { "event": "CellMouseOverEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOver" }
    },
    "cellMouseOver": {
      "description": "/** Mouse entered cell. */",
      "type": {
        "arguments": { "event": "CellMouseOverEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOver" }
    },
    "onCellMouseOut": {
      "description": "/** Mouse left cell. */",
      "type": {
        "arguments": { "event": "CellMouseOutEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOut" }
    },
    "cellMouseOut": {
      "description": "/** Mouse left cell. */",
      "type": {
        "arguments": { "event": "CellMouseOutEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOut" }
    },
    "onCellMouseDown": {
      "description": "/** Mouse down on cell. */",
      "type": {
        "arguments": { "event": "CellMouseDownEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseDown" }
    },
    "cellMouseDown": {
      "description": "/** Mouse down on cell. */",
      "type": {
        "arguments": { "event": "CellMouseDownEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseDown" }
    },
    "onRowClicked": {
      "description": "/** Row is clicked. */",
      "type": {
        "arguments": { "event": "RowClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowClicked" }
    },
    "rowClicked": {
      "description": "/** Row is clicked. */",
      "type": {
        "arguments": { "event": "RowClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowClicked" }
    },
    "onRowDoubleClicked": {
      "description": "/** Row is double clicked. */",
      "type": {
        "arguments": { "event": "RowDoubleClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDoubleClicked" }
    },
    "rowDoubleClicked": {
      "description": "/** Row is double clicked. */",
      "type": {
        "arguments": { "event": "RowDoubleClickedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDoubleClicked" }
    },
    "onRowSelected": {
      "description": "/** Row is selected or deselected. The event contains the node in question, so call the node's `isSelected()` method to see if it was just selected or deselected. */",
      "type": {
        "arguments": { "event": "RowSelectedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowSelected" }
    },
    "rowSelected": {
      "description": "/** Row is selected or deselected. The event contains the node in question, so call the node's `isSelected()` method to see if it was just selected or deselected. */",
      "type": {
        "arguments": { "event": "RowSelectedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowSelected" }
    },
    "onSelectionChanged": {
      "description": "/** Row selection is changed. Use the grid API `getSelectedNodes()` or `getSelectedRows()` to get the new list of selected nodes / row data. */",
      "type": {
        "arguments": { "event": "SelectionChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSelectionChanged" }
    },
    "selectionChanged": {
      "description": "/** Row selection is changed. Use the grid API `getSelectedNodes()` or `getSelectedRows()` to get the new list of selected nodes / row data. */",
      "type": {
        "arguments": { "event": "SelectionChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSelectionChanged" }
    },
    "onCellContextMenu": {
      "description": "/** Cell is right clicked. */",
      "type": {
        "arguments": { "event": "CellContextMenuEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellContextMenu" }
    },
    "cellContextMenu": {
      "description": "/** Cell is right clicked. */",
      "type": {
        "arguments": { "event": "CellContextMenuEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellContextMenu" }
    },
    "onRangeSelectionChanged": {
      "description": "/** A change to range selection has occurred. */",
      "type": {
        "arguments": { "event": "RangeSelectionChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRangeSelectionChanged" }
    },
    "rangeSelectionChanged": {
      "description": "/** A change to range selection has occurred. */",
      "type": {
        "arguments": { "event": "RangeSelectionChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRangeSelectionChanged" }
    },
    "onSortChanged": {
      "description": "/** Sort has changed. The grid also listens for this and updates the model. */",
      "type": {
        "arguments": { "event": "SortChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSortChanged" }
    },
    "sortChanged": {
      "description": "/** Sort has changed. The grid also listens for this and updates the model. */",
      "type": {
        "arguments": { "event": "SortChangedEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSortChanged" }
    },
    "onColumnRowGroupChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnRowGroupChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChangeRequest" }
    },
    "columnRowGroupChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnRowGroupChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChangeRequest" }
    },
    "onColumnPivotChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnPivotChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChangeRequest" }
    },
    "columnPivotChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnPivotChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChangeRequest" }
    },
    "onColumnValueChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnValueChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChangeRequest" }
    },
    "columnValueChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnValueChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChangeRequest" }
    },
    "onColumnAggFuncChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnAggFuncChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnAggFuncChangeRequest" }
    },
    "columnAggFuncChangeRequest": {
      "description": "/** @deprecated v29.2 */",
      "type": {
        "arguments": { "event": "ColumnAggFuncChangeRequestEvent<TData>" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnAggFuncChangeRequest" }
    },
    "api": {
      "description": "/** The Grid Api for interacting with the grid.\n     * Set by the grid on init, set to null on destroy.\n     */",
      "type": { "returnType": "GridApi<TData> | null", "optional": true }
    },
    "columnApi": {
      "description": "/** The Column Api for interacting with the grid columns.\n     * Set by the grid on init, set to null on destroy.\n     */",
      "type": { "returnType": "ColumnApi | null", "optional": true }
    }
  },
  "AgReactComponent": {
    "getReactContainerStyle": {
      "type": { "arguments": {}, "returnType": "{}", "optional": true }
    },
    "getReactContainerClasses": {
      "type": { "arguments": {}, "returnType": "string[]", "optional": true }
    }
  },
  "IHeaderGroupReactComp": {
    "getReactContainerStyle": {
      "type": { "arguments": {}, "returnType": "{}", "optional": true }
    },
    "getReactContainerClasses": {
      "type": { "arguments": {}, "returnType": "string[]", "optional": true }
    }
  },
  "IHeaderReactComp": {
    "refresh": {
      "description": "/** Get the header to refresh. Gets called whenever Column Defs are updated. */",
      "type": {
        "arguments": { "params": "IHeaderParams" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getReactContainerStyle": {
      "type": { "arguments": {}, "returnType": "{}", "optional": true }
    },
    "getReactContainerClasses": {
      "type": { "arguments": {}, "returnType": "string[]", "optional": true }
    }
  },
  "IDateReactComp": {
    "getDate": {
      "description": "/** Returns the current date represented by this component */",
      "type": {
        "arguments": {},
        "returnType": "Date | null",
        "optional": false
      }
    },
    "setDate": {
      "description": "/** Sets the date represented by this component */",
      "type": {
        "arguments": { "date": "Date | null" },
        "returnType": "void",
        "optional": false
      }
    },
    "setDisabled": {
      "description": "/** Optional: Sets the disabled state of this component */",
      "type": {
        "arguments": { "disabled": "boolean" },
        "returnType": "void",
        "optional": true
      }
    },
    "setInputPlaceholder": {
      "description": "/** Optional: Sets the current input placeholder */",
      "type": {
        "arguments": { "placeholder": "string" },
        "returnType": "void",
        "optional": true
      }
    },
    "setInputAriaLabel": {
      "description": "/** Optional: Sets the current input aria label */",
      "type": {
        "arguments": { "placeholder": "string" },
        "returnType": "void",
        "optional": true
      }
    },
    "afterGuiAttached": {
      "description": "/** Optional: A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "getReactContainerStyle": {
      "type": { "arguments": {}, "returnType": "{}", "optional": true }
    },
    "getReactContainerClasses": {
      "type": { "arguments": {}, "returnType": "string[]", "optional": true }
    }
  },
  "IFilterReactComp": {
    "isFilterActive": {
      "description": "/** Returns `true` if the filter is currently active, otherwise `false`. \n     * If active then 1) the grid will show the filter icon in the column header \n     * and 2) the filter will be included in the filtering of the data.\n    */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "doesFilterPass": {
      "description": "/** The grid will ask each active filter, in turn, whether each row in the grid passes. If any\n     * filter fails, then the row will be excluded from the final set. The method is provided a\n     * params object with attributes node (the rodNode the grid creates that wraps the data) and data\n     * (the data object that you provided to the grid for that row).\n     */",
      "type": {
        "arguments": { "params": "IDoesFilterPassParams" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getModel": {
      "description": "/** Returns a model representing the current state of the filter, or `null` if the filter is\n     * not active. The grid calls `getModel()` on all active filters when `gridApi.getFilterModel()` is called.\n     */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "setModel": {
      "description": "/** Sets the state of the filter using the supplied model. Providing `null` as the model will\n     * de-activate the filter.\n     */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "void | AgPromise<void>",
        "optional": false
      }
    },
    "onNewRowsLoaded": {
      "description": "/** Gets called when new rows are inserted into the grid. If the filter needs to change its\n     state after rows are loaded, it can do it here. For example the set filters uses this\n     to update the list of available values to select from (e.g. 'Ireland', 'UK' etc for\n     Country filter). To get the list of available values from within this method from the\n    Client Side Row Model, use `gridApi.forEachLeafNode(callback)`.\n    */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "onAnyFilterChanged": {
      "description": "/** Called whenever any filter is changed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getModelAsString": {
      "description": "/** Optional method used by AG Grid when rendering floating filters and there isn't a floating filter\n     * associated for this filter, this will happen if you create a custom filter and NOT a custom floating\n     * filter.\n     */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "string",
        "optional": true
      }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "afterGuiDetached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been removed from the screen.\n     * If a parent popup is opened and closed (e.g. for filters), this method is called each time the component is hidden.\n     * This is useful for any logic to reset the UI state back to the model before the component is reopened.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getReactContainerStyle": {
      "type": { "arguments": {}, "returnType": "{}", "optional": true }
    },
    "getReactContainerClasses": {
      "type": { "arguments": {}, "returnType": "string[]", "optional": true }
    }
  },
  "IFloatingFilterReactComp": {
    "onParentModelChanged": {
      "description": "/** Gets called every time the parent filter changes.\n     * Your floating filter would typically refresh its UI to reflect the new filter state.\n     * The provided parentModel is what the parent filter returns from its getModel() method.\n     * The event is the FilterChangedEvent that the grid fires.\n     */",
      "type": {
        "arguments": {
          "parentModel": "any",
          "filterChangedEvent?": "FilterChangedEvent | null"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getReactContainerStyle": {
      "type": { "arguments": {}, "returnType": "{}", "optional": true }
    },
    "getReactContainerClasses": {
      "type": { "arguments": {}, "returnType": "string[]", "optional": true }
    }
  },
  "ICellRendererReactComp": {
    "refresh": {
      "description": "/** Get the cell to refresh. Return true if successful. Return false if not (or you don't have refresh logic),\n     * then the grid will refresh the cell for you.\n     */",
      "type": {
        "arguments": { "params": "ICellRendererParams<TData>" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "meta": { "typeParams": ["TData = any"] },
    "getReactContainerStyle": {
      "type": { "arguments": {}, "returnType": "{}", "optional": true }
    },
    "getReactContainerClasses": {
      "type": { "arguments": {}, "returnType": "string[]", "optional": true }
    }
  },
  "ICellEditorReactComp": {
    "getValue": {
      "description": "/** Return the final value - called by the grid once after editing is complete\n     */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "isPopup": {
      "description": "/** Gets called once after initialised. If you return true, the editor will\n     * appear in a popup, so is not constrained to the boundaries of the cell.\n     * This is great if you want to, for example, provide you own custom dropdown list\n     * for selection. Default is false (ie if you don't provide the method).\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "getPopupPosition": {
      "description": "/** Gets called once, only if isPopup() returns true. Return \"over\" if the popup\n     * should cover the cell, or \"under\" if it should be positioned below leaving the\n     * cell value visible. If this method is not present, the default is \"over\".\n     */",
      "type": {
        "arguments": {},
        "returnType": "'over' | 'under' | undefined",
        "optional": true
      }
    },
    "isCancelBeforeStart": {
      "description": "/** Gets called once after initialised. If you return true, the editor will not be\n     * used and the grid will continue editing. Use this to make a decision on editing\n     * inside the init() function, eg maybe you want to only start editing if the user\n     * hits a numeric key, but not a letter, if the editor is for numbers.\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "isCancelAfterEnd": {
      "description": "/** Gets called once after editing is complete. If your return true, then the new\n     * value will not be used. The editing will have no impact on the record. Use this\n     * if you do not want a new value from your gui, i.e. you want to cancel the editing.\n     */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "focusIn": {
      "description": "/** If doing full line edit, then gets called when focus should be put into the editor\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "focusOut": {
      "description": "/** If doing full line edit, then gets called when focus is leaving the editor\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * This method is called each time the edit component is activated.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getReactContainerStyle": {
      "type": { "arguments": {}, "returnType": "{}", "optional": true }
    },
    "getReactContainerClasses": {
      "type": { "arguments": {}, "returnType": "string[]", "optional": true }
    }
  },
  "ILoadingCellRendererReactComp": {
    "getReactContainerStyle": {
      "type": { "arguments": {}, "returnType": "{}", "optional": true }
    },
    "getReactContainerClasses": {
      "type": { "arguments": {}, "returnType": "string[]", "optional": true }
    }
  },
  "ILoadingOverlayReactComp": {
    "getReactContainerStyle": {
      "type": { "arguments": {}, "returnType": "{}", "optional": true }
    },
    "getReactContainerClasses": {
      "type": { "arguments": {}, "returnType": "string[]", "optional": true }
    }
  },
  "INoRowsOverlayReactComp": {
    "getReactContainerStyle": {
      "type": { "arguments": {}, "returnType": "{}", "optional": true }
    },
    "getReactContainerClasses": {
      "type": { "arguments": {}, "returnType": "string[]", "optional": true }
    }
  },
  "IStatusPanelReactComp": {
    "getReactContainerStyle": {
      "type": { "arguments": {}, "returnType": "{}", "optional": true }
    },
    "getReactContainerClasses": {
      "type": { "arguments": {}, "returnType": "string[]", "optional": true }
    }
  },
  "IToolPanelReactComp": {
    "refresh": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "getReactContainerStyle": {
      "type": { "arguments": {}, "returnType": "{}", "optional": true }
    },
    "getReactContainerClasses": {
      "type": { "arguments": {}, "returnType": "string[]", "optional": true }
    }
  },
  "ITooltipReactComp": {
    "getReactContainerStyle": {
      "type": { "arguments": {}, "returnType": "{}", "optional": true }
    },
    "getReactContainerClasses": {
      "type": { "arguments": {}, "returnType": "string[]", "optional": true }
    }
  }
}
